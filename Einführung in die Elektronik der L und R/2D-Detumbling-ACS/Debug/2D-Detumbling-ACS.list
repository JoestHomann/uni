
2D-Detumbling-ACS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b80  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004c40  08004c40  00005c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cec  08004cec  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004cec  08004cec  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004cec  08004cec  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cec  08004cec  00005cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004cf0  08004cf0  00005cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004cf4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08004d00  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08004d00  0000611c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6ce  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d66  00000000  00000000  00011702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00013468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a12  00000000  00000000  00014148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011f8d  00000000  00000000  00014b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100bf  00000000  00000000  00026ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006dca2  00000000  00000000  00036ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a4848  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003028  00000000  00000000  000a488c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000a78b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c28 	.word	0x08004c28

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004c28 	.word	0x08004c28

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fbab 	bl	8000b58 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 fb33 	bl	8000a78 <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fb9d 	bl	8000b58 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fb93 	bl	8000b58 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fb41 	bl	8000ac8 <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fb37 	bl	8000ac8 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_fadd>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	024b      	lsls	r3, r1, #9
 800046c:	0a5a      	lsrs	r2, r3, #9
 800046e:	4694      	mov	ip, r2
 8000470:	004a      	lsls	r2, r1, #1
 8000472:	0fc9      	lsrs	r1, r1, #31
 8000474:	46ce      	mov	lr, r9
 8000476:	4647      	mov	r7, r8
 8000478:	4689      	mov	r9, r1
 800047a:	0045      	lsls	r5, r0, #1
 800047c:	0246      	lsls	r6, r0, #9
 800047e:	0e2d      	lsrs	r5, r5, #24
 8000480:	0e12      	lsrs	r2, r2, #24
 8000482:	b580      	push	{r7, lr}
 8000484:	0999      	lsrs	r1, r3, #6
 8000486:	0a77      	lsrs	r7, r6, #9
 8000488:	0fc4      	lsrs	r4, r0, #31
 800048a:	09b6      	lsrs	r6, r6, #6
 800048c:	1aab      	subs	r3, r5, r2
 800048e:	454c      	cmp	r4, r9
 8000490:	d020      	beq.n	80004d4 <__aeabi_fadd+0x6c>
 8000492:	2b00      	cmp	r3, #0
 8000494:	dd0c      	ble.n	80004b0 <__aeabi_fadd+0x48>
 8000496:	2a00      	cmp	r2, #0
 8000498:	d134      	bne.n	8000504 <__aeabi_fadd+0x9c>
 800049a:	2900      	cmp	r1, #0
 800049c:	d02a      	beq.n	80004f4 <__aeabi_fadd+0x8c>
 800049e:	1e5a      	subs	r2, r3, #1
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d100      	bne.n	80004a6 <__aeabi_fadd+0x3e>
 80004a4:	e08f      	b.n	80005c6 <__aeabi_fadd+0x15e>
 80004a6:	2bff      	cmp	r3, #255	@ 0xff
 80004a8:	d100      	bne.n	80004ac <__aeabi_fadd+0x44>
 80004aa:	e0cd      	b.n	8000648 <__aeabi_fadd+0x1e0>
 80004ac:	0013      	movs	r3, r2
 80004ae:	e02f      	b.n	8000510 <__aeabi_fadd+0xa8>
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d060      	beq.n	8000576 <__aeabi_fadd+0x10e>
 80004b4:	1b53      	subs	r3, r2, r5
 80004b6:	2d00      	cmp	r5, #0
 80004b8:	d000      	beq.n	80004bc <__aeabi_fadd+0x54>
 80004ba:	e0ee      	b.n	800069a <__aeabi_fadd+0x232>
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d100      	bne.n	80004c2 <__aeabi_fadd+0x5a>
 80004c0:	e13e      	b.n	8000740 <__aeabi_fadd+0x2d8>
 80004c2:	1e5c      	subs	r4, r3, #1
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d100      	bne.n	80004ca <__aeabi_fadd+0x62>
 80004c8:	e16b      	b.n	80007a2 <__aeabi_fadd+0x33a>
 80004ca:	2bff      	cmp	r3, #255	@ 0xff
 80004cc:	d100      	bne.n	80004d0 <__aeabi_fadd+0x68>
 80004ce:	e0b9      	b.n	8000644 <__aeabi_fadd+0x1dc>
 80004d0:	0023      	movs	r3, r4
 80004d2:	e0e7      	b.n	80006a4 <__aeabi_fadd+0x23c>
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	dc00      	bgt.n	80004da <__aeabi_fadd+0x72>
 80004d8:	e0a4      	b.n	8000624 <__aeabi_fadd+0x1bc>
 80004da:	2a00      	cmp	r2, #0
 80004dc:	d069      	beq.n	80005b2 <__aeabi_fadd+0x14a>
 80004de:	2dff      	cmp	r5, #255	@ 0xff
 80004e0:	d100      	bne.n	80004e4 <__aeabi_fadd+0x7c>
 80004e2:	e0b1      	b.n	8000648 <__aeabi_fadd+0x1e0>
 80004e4:	2280      	movs	r2, #128	@ 0x80
 80004e6:	04d2      	lsls	r2, r2, #19
 80004e8:	4311      	orrs	r1, r2
 80004ea:	2b1b      	cmp	r3, #27
 80004ec:	dc00      	bgt.n	80004f0 <__aeabi_fadd+0x88>
 80004ee:	e0e9      	b.n	80006c4 <__aeabi_fadd+0x25c>
 80004f0:	002b      	movs	r3, r5
 80004f2:	3605      	adds	r6, #5
 80004f4:	08f7      	lsrs	r7, r6, #3
 80004f6:	2bff      	cmp	r3, #255	@ 0xff
 80004f8:	d100      	bne.n	80004fc <__aeabi_fadd+0x94>
 80004fa:	e0a5      	b.n	8000648 <__aeabi_fadd+0x1e0>
 80004fc:	027a      	lsls	r2, r7, #9
 80004fe:	0a52      	lsrs	r2, r2, #9
 8000500:	b2d8      	uxtb	r0, r3
 8000502:	e030      	b.n	8000566 <__aeabi_fadd+0xfe>
 8000504:	2dff      	cmp	r5, #255	@ 0xff
 8000506:	d100      	bne.n	800050a <__aeabi_fadd+0xa2>
 8000508:	e09e      	b.n	8000648 <__aeabi_fadd+0x1e0>
 800050a:	2280      	movs	r2, #128	@ 0x80
 800050c:	04d2      	lsls	r2, r2, #19
 800050e:	4311      	orrs	r1, r2
 8000510:	2001      	movs	r0, #1
 8000512:	2b1b      	cmp	r3, #27
 8000514:	dc08      	bgt.n	8000528 <__aeabi_fadd+0xc0>
 8000516:	0008      	movs	r0, r1
 8000518:	2220      	movs	r2, #32
 800051a:	40d8      	lsrs	r0, r3
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	4099      	lsls	r1, r3
 8000520:	000b      	movs	r3, r1
 8000522:	1e5a      	subs	r2, r3, #1
 8000524:	4193      	sbcs	r3, r2
 8000526:	4318      	orrs	r0, r3
 8000528:	1a36      	subs	r6, r6, r0
 800052a:	0173      	lsls	r3, r6, #5
 800052c:	d400      	bmi.n	8000530 <__aeabi_fadd+0xc8>
 800052e:	e071      	b.n	8000614 <__aeabi_fadd+0x1ac>
 8000530:	01b6      	lsls	r6, r6, #6
 8000532:	09b7      	lsrs	r7, r6, #6
 8000534:	0038      	movs	r0, r7
 8000536:	f000 fd21 	bl	8000f7c <__clzsi2>
 800053a:	003b      	movs	r3, r7
 800053c:	3805      	subs	r0, #5
 800053e:	4083      	lsls	r3, r0
 8000540:	4285      	cmp	r5, r0
 8000542:	dd4d      	ble.n	80005e0 <__aeabi_fadd+0x178>
 8000544:	4eb4      	ldr	r6, [pc, #720]	@ (8000818 <__aeabi_fadd+0x3b0>)
 8000546:	1a2d      	subs	r5, r5, r0
 8000548:	401e      	ands	r6, r3
 800054a:	075a      	lsls	r2, r3, #29
 800054c:	d068      	beq.n	8000620 <__aeabi_fadd+0x1b8>
 800054e:	220f      	movs	r2, #15
 8000550:	4013      	ands	r3, r2
 8000552:	2b04      	cmp	r3, #4
 8000554:	d064      	beq.n	8000620 <__aeabi_fadd+0x1b8>
 8000556:	3604      	adds	r6, #4
 8000558:	0173      	lsls	r3, r6, #5
 800055a:	d561      	bpl.n	8000620 <__aeabi_fadd+0x1b8>
 800055c:	1c68      	adds	r0, r5, #1
 800055e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000560:	d154      	bne.n	800060c <__aeabi_fadd+0x1a4>
 8000562:	20ff      	movs	r0, #255	@ 0xff
 8000564:	2200      	movs	r2, #0
 8000566:	05c0      	lsls	r0, r0, #23
 8000568:	4310      	orrs	r0, r2
 800056a:	07e4      	lsls	r4, r4, #31
 800056c:	4320      	orrs	r0, r4
 800056e:	bcc0      	pop	{r6, r7}
 8000570:	46b9      	mov	r9, r7
 8000572:	46b0      	mov	r8, r6
 8000574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000576:	22fe      	movs	r2, #254	@ 0xfe
 8000578:	4690      	mov	r8, r2
 800057a:	1c68      	adds	r0, r5, #1
 800057c:	0002      	movs	r2, r0
 800057e:	4640      	mov	r0, r8
 8000580:	4210      	tst	r0, r2
 8000582:	d16b      	bne.n	800065c <__aeabi_fadd+0x1f4>
 8000584:	2d00      	cmp	r5, #0
 8000586:	d000      	beq.n	800058a <__aeabi_fadd+0x122>
 8000588:	e0dd      	b.n	8000746 <__aeabi_fadd+0x2de>
 800058a:	2e00      	cmp	r6, #0
 800058c:	d100      	bne.n	8000590 <__aeabi_fadd+0x128>
 800058e:	e102      	b.n	8000796 <__aeabi_fadd+0x32e>
 8000590:	2900      	cmp	r1, #0
 8000592:	d0b3      	beq.n	80004fc <__aeabi_fadd+0x94>
 8000594:	2280      	movs	r2, #128	@ 0x80
 8000596:	1a77      	subs	r7, r6, r1
 8000598:	04d2      	lsls	r2, r2, #19
 800059a:	4217      	tst	r7, r2
 800059c:	d100      	bne.n	80005a0 <__aeabi_fadd+0x138>
 800059e:	e136      	b.n	800080e <__aeabi_fadd+0x3a6>
 80005a0:	464c      	mov	r4, r9
 80005a2:	1b8e      	subs	r6, r1, r6
 80005a4:	d061      	beq.n	800066a <__aeabi_fadd+0x202>
 80005a6:	2001      	movs	r0, #1
 80005a8:	4216      	tst	r6, r2
 80005aa:	d130      	bne.n	800060e <__aeabi_fadd+0x1a6>
 80005ac:	2300      	movs	r3, #0
 80005ae:	08f7      	lsrs	r7, r6, #3
 80005b0:	e7a4      	b.n	80004fc <__aeabi_fadd+0x94>
 80005b2:	2900      	cmp	r1, #0
 80005b4:	d09e      	beq.n	80004f4 <__aeabi_fadd+0x8c>
 80005b6:	1e5a      	subs	r2, r3, #1
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d100      	bne.n	80005be <__aeabi_fadd+0x156>
 80005bc:	e0ca      	b.n	8000754 <__aeabi_fadd+0x2ec>
 80005be:	2bff      	cmp	r3, #255	@ 0xff
 80005c0:	d042      	beq.n	8000648 <__aeabi_fadd+0x1e0>
 80005c2:	0013      	movs	r3, r2
 80005c4:	e791      	b.n	80004ea <__aeabi_fadd+0x82>
 80005c6:	1a71      	subs	r1, r6, r1
 80005c8:	014b      	lsls	r3, r1, #5
 80005ca:	d400      	bmi.n	80005ce <__aeabi_fadd+0x166>
 80005cc:	e0d1      	b.n	8000772 <__aeabi_fadd+0x30a>
 80005ce:	018f      	lsls	r7, r1, #6
 80005d0:	09bf      	lsrs	r7, r7, #6
 80005d2:	0038      	movs	r0, r7
 80005d4:	f000 fcd2 	bl	8000f7c <__clzsi2>
 80005d8:	003b      	movs	r3, r7
 80005da:	3805      	subs	r0, #5
 80005dc:	4083      	lsls	r3, r0
 80005de:	2501      	movs	r5, #1
 80005e0:	2220      	movs	r2, #32
 80005e2:	1b40      	subs	r0, r0, r5
 80005e4:	3001      	adds	r0, #1
 80005e6:	1a12      	subs	r2, r2, r0
 80005e8:	001e      	movs	r6, r3
 80005ea:	4093      	lsls	r3, r2
 80005ec:	40c6      	lsrs	r6, r0
 80005ee:	1e5a      	subs	r2, r3, #1
 80005f0:	4193      	sbcs	r3, r2
 80005f2:	431e      	orrs	r6, r3
 80005f4:	d039      	beq.n	800066a <__aeabi_fadd+0x202>
 80005f6:	0773      	lsls	r3, r6, #29
 80005f8:	d100      	bne.n	80005fc <__aeabi_fadd+0x194>
 80005fa:	e11b      	b.n	8000834 <__aeabi_fadd+0x3cc>
 80005fc:	230f      	movs	r3, #15
 80005fe:	2500      	movs	r5, #0
 8000600:	4033      	ands	r3, r6
 8000602:	2b04      	cmp	r3, #4
 8000604:	d1a7      	bne.n	8000556 <__aeabi_fadd+0xee>
 8000606:	2001      	movs	r0, #1
 8000608:	0172      	lsls	r2, r6, #5
 800060a:	d57c      	bpl.n	8000706 <__aeabi_fadd+0x29e>
 800060c:	b2c0      	uxtb	r0, r0
 800060e:	01b2      	lsls	r2, r6, #6
 8000610:	0a52      	lsrs	r2, r2, #9
 8000612:	e7a8      	b.n	8000566 <__aeabi_fadd+0xfe>
 8000614:	0773      	lsls	r3, r6, #29
 8000616:	d003      	beq.n	8000620 <__aeabi_fadd+0x1b8>
 8000618:	230f      	movs	r3, #15
 800061a:	4033      	ands	r3, r6
 800061c:	2b04      	cmp	r3, #4
 800061e:	d19a      	bne.n	8000556 <__aeabi_fadd+0xee>
 8000620:	002b      	movs	r3, r5
 8000622:	e767      	b.n	80004f4 <__aeabi_fadd+0x8c>
 8000624:	2b00      	cmp	r3, #0
 8000626:	d023      	beq.n	8000670 <__aeabi_fadd+0x208>
 8000628:	1b53      	subs	r3, r2, r5
 800062a:	2d00      	cmp	r5, #0
 800062c:	d17b      	bne.n	8000726 <__aeabi_fadd+0x2be>
 800062e:	2e00      	cmp	r6, #0
 8000630:	d100      	bne.n	8000634 <__aeabi_fadd+0x1cc>
 8000632:	e086      	b.n	8000742 <__aeabi_fadd+0x2da>
 8000634:	1e5d      	subs	r5, r3, #1
 8000636:	2b01      	cmp	r3, #1
 8000638:	d100      	bne.n	800063c <__aeabi_fadd+0x1d4>
 800063a:	e08b      	b.n	8000754 <__aeabi_fadd+0x2ec>
 800063c:	2bff      	cmp	r3, #255	@ 0xff
 800063e:	d002      	beq.n	8000646 <__aeabi_fadd+0x1de>
 8000640:	002b      	movs	r3, r5
 8000642:	e075      	b.n	8000730 <__aeabi_fadd+0x2c8>
 8000644:	464c      	mov	r4, r9
 8000646:	4667      	mov	r7, ip
 8000648:	2f00      	cmp	r7, #0
 800064a:	d100      	bne.n	800064e <__aeabi_fadd+0x1e6>
 800064c:	e789      	b.n	8000562 <__aeabi_fadd+0xfa>
 800064e:	2280      	movs	r2, #128	@ 0x80
 8000650:	03d2      	lsls	r2, r2, #15
 8000652:	433a      	orrs	r2, r7
 8000654:	0252      	lsls	r2, r2, #9
 8000656:	20ff      	movs	r0, #255	@ 0xff
 8000658:	0a52      	lsrs	r2, r2, #9
 800065a:	e784      	b.n	8000566 <__aeabi_fadd+0xfe>
 800065c:	1a77      	subs	r7, r6, r1
 800065e:	017b      	lsls	r3, r7, #5
 8000660:	d46b      	bmi.n	800073a <__aeabi_fadd+0x2d2>
 8000662:	2f00      	cmp	r7, #0
 8000664:	d000      	beq.n	8000668 <__aeabi_fadd+0x200>
 8000666:	e765      	b.n	8000534 <__aeabi_fadd+0xcc>
 8000668:	2400      	movs	r4, #0
 800066a:	2000      	movs	r0, #0
 800066c:	2200      	movs	r2, #0
 800066e:	e77a      	b.n	8000566 <__aeabi_fadd+0xfe>
 8000670:	22fe      	movs	r2, #254	@ 0xfe
 8000672:	1c6b      	adds	r3, r5, #1
 8000674:	421a      	tst	r2, r3
 8000676:	d149      	bne.n	800070c <__aeabi_fadd+0x2a4>
 8000678:	2d00      	cmp	r5, #0
 800067a:	d000      	beq.n	800067e <__aeabi_fadd+0x216>
 800067c:	e09f      	b.n	80007be <__aeabi_fadd+0x356>
 800067e:	2e00      	cmp	r6, #0
 8000680:	d100      	bne.n	8000684 <__aeabi_fadd+0x21c>
 8000682:	e0ba      	b.n	80007fa <__aeabi_fadd+0x392>
 8000684:	2900      	cmp	r1, #0
 8000686:	d100      	bne.n	800068a <__aeabi_fadd+0x222>
 8000688:	e0cf      	b.n	800082a <__aeabi_fadd+0x3c2>
 800068a:	1872      	adds	r2, r6, r1
 800068c:	0153      	lsls	r3, r2, #5
 800068e:	d400      	bmi.n	8000692 <__aeabi_fadd+0x22a>
 8000690:	e0cd      	b.n	800082e <__aeabi_fadd+0x3c6>
 8000692:	0192      	lsls	r2, r2, #6
 8000694:	2001      	movs	r0, #1
 8000696:	0a52      	lsrs	r2, r2, #9
 8000698:	e765      	b.n	8000566 <__aeabi_fadd+0xfe>
 800069a:	2aff      	cmp	r2, #255	@ 0xff
 800069c:	d0d2      	beq.n	8000644 <__aeabi_fadd+0x1dc>
 800069e:	2080      	movs	r0, #128	@ 0x80
 80006a0:	04c0      	lsls	r0, r0, #19
 80006a2:	4306      	orrs	r6, r0
 80006a4:	2001      	movs	r0, #1
 80006a6:	2b1b      	cmp	r3, #27
 80006a8:	dc08      	bgt.n	80006bc <__aeabi_fadd+0x254>
 80006aa:	0030      	movs	r0, r6
 80006ac:	2420      	movs	r4, #32
 80006ae:	40d8      	lsrs	r0, r3
 80006b0:	1ae3      	subs	r3, r4, r3
 80006b2:	409e      	lsls	r6, r3
 80006b4:	0033      	movs	r3, r6
 80006b6:	1e5c      	subs	r4, r3, #1
 80006b8:	41a3      	sbcs	r3, r4
 80006ba:	4318      	orrs	r0, r3
 80006bc:	464c      	mov	r4, r9
 80006be:	0015      	movs	r5, r2
 80006c0:	1a0e      	subs	r6, r1, r0
 80006c2:	e732      	b.n	800052a <__aeabi_fadd+0xc2>
 80006c4:	0008      	movs	r0, r1
 80006c6:	2220      	movs	r2, #32
 80006c8:	40d8      	lsrs	r0, r3
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	4099      	lsls	r1, r3
 80006ce:	000b      	movs	r3, r1
 80006d0:	1e5a      	subs	r2, r3, #1
 80006d2:	4193      	sbcs	r3, r2
 80006d4:	4303      	orrs	r3, r0
 80006d6:	18f6      	adds	r6, r6, r3
 80006d8:	0173      	lsls	r3, r6, #5
 80006da:	d59b      	bpl.n	8000614 <__aeabi_fadd+0x1ac>
 80006dc:	3501      	adds	r5, #1
 80006de:	2dff      	cmp	r5, #255	@ 0xff
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fadd+0x27c>
 80006e2:	e73e      	b.n	8000562 <__aeabi_fadd+0xfa>
 80006e4:	2301      	movs	r3, #1
 80006e6:	494d      	ldr	r1, [pc, #308]	@ (800081c <__aeabi_fadd+0x3b4>)
 80006e8:	0872      	lsrs	r2, r6, #1
 80006ea:	4033      	ands	r3, r6
 80006ec:	400a      	ands	r2, r1
 80006ee:	431a      	orrs	r2, r3
 80006f0:	0016      	movs	r6, r2
 80006f2:	0753      	lsls	r3, r2, #29
 80006f4:	d004      	beq.n	8000700 <__aeabi_fadd+0x298>
 80006f6:	230f      	movs	r3, #15
 80006f8:	4013      	ands	r3, r2
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	d000      	beq.n	8000700 <__aeabi_fadd+0x298>
 80006fe:	e72a      	b.n	8000556 <__aeabi_fadd+0xee>
 8000700:	0173      	lsls	r3, r6, #5
 8000702:	d500      	bpl.n	8000706 <__aeabi_fadd+0x29e>
 8000704:	e72a      	b.n	800055c <__aeabi_fadd+0xf4>
 8000706:	002b      	movs	r3, r5
 8000708:	08f7      	lsrs	r7, r6, #3
 800070a:	e6f7      	b.n	80004fc <__aeabi_fadd+0x94>
 800070c:	2bff      	cmp	r3, #255	@ 0xff
 800070e:	d100      	bne.n	8000712 <__aeabi_fadd+0x2aa>
 8000710:	e727      	b.n	8000562 <__aeabi_fadd+0xfa>
 8000712:	1871      	adds	r1, r6, r1
 8000714:	0849      	lsrs	r1, r1, #1
 8000716:	074a      	lsls	r2, r1, #29
 8000718:	d02f      	beq.n	800077a <__aeabi_fadd+0x312>
 800071a:	220f      	movs	r2, #15
 800071c:	400a      	ands	r2, r1
 800071e:	2a04      	cmp	r2, #4
 8000720:	d02b      	beq.n	800077a <__aeabi_fadd+0x312>
 8000722:	1d0e      	adds	r6, r1, #4
 8000724:	e6e6      	b.n	80004f4 <__aeabi_fadd+0x8c>
 8000726:	2aff      	cmp	r2, #255	@ 0xff
 8000728:	d08d      	beq.n	8000646 <__aeabi_fadd+0x1de>
 800072a:	2080      	movs	r0, #128	@ 0x80
 800072c:	04c0      	lsls	r0, r0, #19
 800072e:	4306      	orrs	r6, r0
 8000730:	2b1b      	cmp	r3, #27
 8000732:	dd24      	ble.n	800077e <__aeabi_fadd+0x316>
 8000734:	0013      	movs	r3, r2
 8000736:	1d4e      	adds	r6, r1, #5
 8000738:	e6dc      	b.n	80004f4 <__aeabi_fadd+0x8c>
 800073a:	464c      	mov	r4, r9
 800073c:	1b8f      	subs	r7, r1, r6
 800073e:	e6f9      	b.n	8000534 <__aeabi_fadd+0xcc>
 8000740:	464c      	mov	r4, r9
 8000742:	000e      	movs	r6, r1
 8000744:	e6d6      	b.n	80004f4 <__aeabi_fadd+0x8c>
 8000746:	2e00      	cmp	r6, #0
 8000748:	d149      	bne.n	80007de <__aeabi_fadd+0x376>
 800074a:	2900      	cmp	r1, #0
 800074c:	d068      	beq.n	8000820 <__aeabi_fadd+0x3b8>
 800074e:	4667      	mov	r7, ip
 8000750:	464c      	mov	r4, r9
 8000752:	e77c      	b.n	800064e <__aeabi_fadd+0x1e6>
 8000754:	1870      	adds	r0, r6, r1
 8000756:	0143      	lsls	r3, r0, #5
 8000758:	d574      	bpl.n	8000844 <__aeabi_fadd+0x3dc>
 800075a:	4930      	ldr	r1, [pc, #192]	@ (800081c <__aeabi_fadd+0x3b4>)
 800075c:	0840      	lsrs	r0, r0, #1
 800075e:	4001      	ands	r1, r0
 8000760:	0743      	lsls	r3, r0, #29
 8000762:	d009      	beq.n	8000778 <__aeabi_fadd+0x310>
 8000764:	230f      	movs	r3, #15
 8000766:	4003      	ands	r3, r0
 8000768:	2b04      	cmp	r3, #4
 800076a:	d005      	beq.n	8000778 <__aeabi_fadd+0x310>
 800076c:	2302      	movs	r3, #2
 800076e:	1d0e      	adds	r6, r1, #4
 8000770:	e6c0      	b.n	80004f4 <__aeabi_fadd+0x8c>
 8000772:	2301      	movs	r3, #1
 8000774:	08cf      	lsrs	r7, r1, #3
 8000776:	e6c1      	b.n	80004fc <__aeabi_fadd+0x94>
 8000778:	2302      	movs	r3, #2
 800077a:	08cf      	lsrs	r7, r1, #3
 800077c:	e6be      	b.n	80004fc <__aeabi_fadd+0x94>
 800077e:	2520      	movs	r5, #32
 8000780:	0030      	movs	r0, r6
 8000782:	40d8      	lsrs	r0, r3
 8000784:	1aeb      	subs	r3, r5, r3
 8000786:	409e      	lsls	r6, r3
 8000788:	0033      	movs	r3, r6
 800078a:	1e5d      	subs	r5, r3, #1
 800078c:	41ab      	sbcs	r3, r5
 800078e:	4303      	orrs	r3, r0
 8000790:	0015      	movs	r5, r2
 8000792:	185e      	adds	r6, r3, r1
 8000794:	e7a0      	b.n	80006d8 <__aeabi_fadd+0x270>
 8000796:	2900      	cmp	r1, #0
 8000798:	d100      	bne.n	800079c <__aeabi_fadd+0x334>
 800079a:	e765      	b.n	8000668 <__aeabi_fadd+0x200>
 800079c:	464c      	mov	r4, r9
 800079e:	4667      	mov	r7, ip
 80007a0:	e6ac      	b.n	80004fc <__aeabi_fadd+0x94>
 80007a2:	1b8f      	subs	r7, r1, r6
 80007a4:	017b      	lsls	r3, r7, #5
 80007a6:	d52e      	bpl.n	8000806 <__aeabi_fadd+0x39e>
 80007a8:	01bf      	lsls	r7, r7, #6
 80007aa:	09bf      	lsrs	r7, r7, #6
 80007ac:	0038      	movs	r0, r7
 80007ae:	f000 fbe5 	bl	8000f7c <__clzsi2>
 80007b2:	003b      	movs	r3, r7
 80007b4:	3805      	subs	r0, #5
 80007b6:	4083      	lsls	r3, r0
 80007b8:	464c      	mov	r4, r9
 80007ba:	3501      	adds	r5, #1
 80007bc:	e710      	b.n	80005e0 <__aeabi_fadd+0x178>
 80007be:	2e00      	cmp	r6, #0
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fadd+0x35c>
 80007c2:	e740      	b.n	8000646 <__aeabi_fadd+0x1de>
 80007c4:	2900      	cmp	r1, #0
 80007c6:	d100      	bne.n	80007ca <__aeabi_fadd+0x362>
 80007c8:	e741      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007ca:	2380      	movs	r3, #128	@ 0x80
 80007cc:	03db      	lsls	r3, r3, #15
 80007ce:	429f      	cmp	r7, r3
 80007d0:	d200      	bcs.n	80007d4 <__aeabi_fadd+0x36c>
 80007d2:	e73c      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007d4:	459c      	cmp	ip, r3
 80007d6:	d300      	bcc.n	80007da <__aeabi_fadd+0x372>
 80007d8:	e739      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007da:	4667      	mov	r7, ip
 80007dc:	e737      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007de:	2900      	cmp	r1, #0
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fadd+0x37c>
 80007e2:	e734      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007e4:	2380      	movs	r3, #128	@ 0x80
 80007e6:	03db      	lsls	r3, r3, #15
 80007e8:	429f      	cmp	r7, r3
 80007ea:	d200      	bcs.n	80007ee <__aeabi_fadd+0x386>
 80007ec:	e72f      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007ee:	459c      	cmp	ip, r3
 80007f0:	d300      	bcc.n	80007f4 <__aeabi_fadd+0x38c>
 80007f2:	e72c      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007f4:	464c      	mov	r4, r9
 80007f6:	4667      	mov	r7, ip
 80007f8:	e729      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007fa:	2900      	cmp	r1, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_fadd+0x398>
 80007fe:	e734      	b.n	800066a <__aeabi_fadd+0x202>
 8000800:	2300      	movs	r3, #0
 8000802:	08cf      	lsrs	r7, r1, #3
 8000804:	e67a      	b.n	80004fc <__aeabi_fadd+0x94>
 8000806:	464c      	mov	r4, r9
 8000808:	2301      	movs	r3, #1
 800080a:	08ff      	lsrs	r7, r7, #3
 800080c:	e676      	b.n	80004fc <__aeabi_fadd+0x94>
 800080e:	2f00      	cmp	r7, #0
 8000810:	d100      	bne.n	8000814 <__aeabi_fadd+0x3ac>
 8000812:	e729      	b.n	8000668 <__aeabi_fadd+0x200>
 8000814:	08ff      	lsrs	r7, r7, #3
 8000816:	e671      	b.n	80004fc <__aeabi_fadd+0x94>
 8000818:	fbffffff 	.word	0xfbffffff
 800081c:	7dffffff 	.word	0x7dffffff
 8000820:	2280      	movs	r2, #128	@ 0x80
 8000822:	2400      	movs	r4, #0
 8000824:	20ff      	movs	r0, #255	@ 0xff
 8000826:	03d2      	lsls	r2, r2, #15
 8000828:	e69d      	b.n	8000566 <__aeabi_fadd+0xfe>
 800082a:	2300      	movs	r3, #0
 800082c:	e666      	b.n	80004fc <__aeabi_fadd+0x94>
 800082e:	2300      	movs	r3, #0
 8000830:	08d7      	lsrs	r7, r2, #3
 8000832:	e663      	b.n	80004fc <__aeabi_fadd+0x94>
 8000834:	2001      	movs	r0, #1
 8000836:	0172      	lsls	r2, r6, #5
 8000838:	d500      	bpl.n	800083c <__aeabi_fadd+0x3d4>
 800083a:	e6e7      	b.n	800060c <__aeabi_fadd+0x1a4>
 800083c:	0031      	movs	r1, r6
 800083e:	2300      	movs	r3, #0
 8000840:	08cf      	lsrs	r7, r1, #3
 8000842:	e65b      	b.n	80004fc <__aeabi_fadd+0x94>
 8000844:	2301      	movs	r3, #1
 8000846:	08c7      	lsrs	r7, r0, #3
 8000848:	e658      	b.n	80004fc <__aeabi_fadd+0x94>
 800084a:	46c0      	nop			@ (mov r8, r8)

0800084c <__aeabi_fdiv>:
 800084c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800084e:	4646      	mov	r6, r8
 8000850:	464f      	mov	r7, r9
 8000852:	46d6      	mov	lr, sl
 8000854:	0245      	lsls	r5, r0, #9
 8000856:	b5c0      	push	{r6, r7, lr}
 8000858:	0fc3      	lsrs	r3, r0, #31
 800085a:	0047      	lsls	r7, r0, #1
 800085c:	4698      	mov	r8, r3
 800085e:	1c0e      	adds	r6, r1, #0
 8000860:	0a6d      	lsrs	r5, r5, #9
 8000862:	0e3f      	lsrs	r7, r7, #24
 8000864:	d05b      	beq.n	800091e <__aeabi_fdiv+0xd2>
 8000866:	2fff      	cmp	r7, #255	@ 0xff
 8000868:	d021      	beq.n	80008ae <__aeabi_fdiv+0x62>
 800086a:	2380      	movs	r3, #128	@ 0x80
 800086c:	00ed      	lsls	r5, r5, #3
 800086e:	04db      	lsls	r3, r3, #19
 8000870:	431d      	orrs	r5, r3
 8000872:	2300      	movs	r3, #0
 8000874:	4699      	mov	r9, r3
 8000876:	469a      	mov	sl, r3
 8000878:	3f7f      	subs	r7, #127	@ 0x7f
 800087a:	0274      	lsls	r4, r6, #9
 800087c:	0073      	lsls	r3, r6, #1
 800087e:	0a64      	lsrs	r4, r4, #9
 8000880:	0e1b      	lsrs	r3, r3, #24
 8000882:	0ff6      	lsrs	r6, r6, #31
 8000884:	2b00      	cmp	r3, #0
 8000886:	d020      	beq.n	80008ca <__aeabi_fdiv+0x7e>
 8000888:	2bff      	cmp	r3, #255	@ 0xff
 800088a:	d043      	beq.n	8000914 <__aeabi_fdiv+0xc8>
 800088c:	2280      	movs	r2, #128	@ 0x80
 800088e:	2000      	movs	r0, #0
 8000890:	00e4      	lsls	r4, r4, #3
 8000892:	04d2      	lsls	r2, r2, #19
 8000894:	4314      	orrs	r4, r2
 8000896:	3b7f      	subs	r3, #127	@ 0x7f
 8000898:	4642      	mov	r2, r8
 800089a:	1aff      	subs	r7, r7, r3
 800089c:	464b      	mov	r3, r9
 800089e:	4072      	eors	r2, r6
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d900      	bls.n	80008a6 <__aeabi_fdiv+0x5a>
 80008a4:	e09d      	b.n	80009e2 <__aeabi_fdiv+0x196>
 80008a6:	4971      	ldr	r1, [pc, #452]	@ (8000a6c <__aeabi_fdiv+0x220>)
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	58cb      	ldr	r3, [r1, r3]
 80008ac:	469f      	mov	pc, r3
 80008ae:	2d00      	cmp	r5, #0
 80008b0:	d15a      	bne.n	8000968 <__aeabi_fdiv+0x11c>
 80008b2:	2308      	movs	r3, #8
 80008b4:	4699      	mov	r9, r3
 80008b6:	3b06      	subs	r3, #6
 80008b8:	0274      	lsls	r4, r6, #9
 80008ba:	469a      	mov	sl, r3
 80008bc:	0073      	lsls	r3, r6, #1
 80008be:	27ff      	movs	r7, #255	@ 0xff
 80008c0:	0a64      	lsrs	r4, r4, #9
 80008c2:	0e1b      	lsrs	r3, r3, #24
 80008c4:	0ff6      	lsrs	r6, r6, #31
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d1de      	bne.n	8000888 <__aeabi_fdiv+0x3c>
 80008ca:	2c00      	cmp	r4, #0
 80008cc:	d13b      	bne.n	8000946 <__aeabi_fdiv+0xfa>
 80008ce:	2301      	movs	r3, #1
 80008d0:	4642      	mov	r2, r8
 80008d2:	4649      	mov	r1, r9
 80008d4:	4072      	eors	r2, r6
 80008d6:	4319      	orrs	r1, r3
 80008d8:	290e      	cmp	r1, #14
 80008da:	d818      	bhi.n	800090e <__aeabi_fdiv+0xc2>
 80008dc:	4864      	ldr	r0, [pc, #400]	@ (8000a70 <__aeabi_fdiv+0x224>)
 80008de:	0089      	lsls	r1, r1, #2
 80008e0:	5841      	ldr	r1, [r0, r1]
 80008e2:	468f      	mov	pc, r1
 80008e4:	4653      	mov	r3, sl
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d100      	bne.n	80008ec <__aeabi_fdiv+0xa0>
 80008ea:	e0b8      	b.n	8000a5e <__aeabi_fdiv+0x212>
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d06e      	beq.n	80009ce <__aeabi_fdiv+0x182>
 80008f0:	4642      	mov	r2, r8
 80008f2:	002c      	movs	r4, r5
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d140      	bne.n	800097a <__aeabi_fdiv+0x12e>
 80008f8:	2000      	movs	r0, #0
 80008fa:	2400      	movs	r4, #0
 80008fc:	05c0      	lsls	r0, r0, #23
 80008fe:	4320      	orrs	r0, r4
 8000900:	07d2      	lsls	r2, r2, #31
 8000902:	4310      	orrs	r0, r2
 8000904:	bce0      	pop	{r5, r6, r7}
 8000906:	46ba      	mov	sl, r7
 8000908:	46b1      	mov	r9, r6
 800090a:	46a8      	mov	r8, r5
 800090c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800090e:	20ff      	movs	r0, #255	@ 0xff
 8000910:	2400      	movs	r4, #0
 8000912:	e7f3      	b.n	80008fc <__aeabi_fdiv+0xb0>
 8000914:	2c00      	cmp	r4, #0
 8000916:	d120      	bne.n	800095a <__aeabi_fdiv+0x10e>
 8000918:	2302      	movs	r3, #2
 800091a:	3fff      	subs	r7, #255	@ 0xff
 800091c:	e7d8      	b.n	80008d0 <__aeabi_fdiv+0x84>
 800091e:	2d00      	cmp	r5, #0
 8000920:	d105      	bne.n	800092e <__aeabi_fdiv+0xe2>
 8000922:	2304      	movs	r3, #4
 8000924:	4699      	mov	r9, r3
 8000926:	3b03      	subs	r3, #3
 8000928:	2700      	movs	r7, #0
 800092a:	469a      	mov	sl, r3
 800092c:	e7a5      	b.n	800087a <__aeabi_fdiv+0x2e>
 800092e:	0028      	movs	r0, r5
 8000930:	f000 fb24 	bl	8000f7c <__clzsi2>
 8000934:	2776      	movs	r7, #118	@ 0x76
 8000936:	1f43      	subs	r3, r0, #5
 8000938:	409d      	lsls	r5, r3
 800093a:	2300      	movs	r3, #0
 800093c:	427f      	negs	r7, r7
 800093e:	4699      	mov	r9, r3
 8000940:	469a      	mov	sl, r3
 8000942:	1a3f      	subs	r7, r7, r0
 8000944:	e799      	b.n	800087a <__aeabi_fdiv+0x2e>
 8000946:	0020      	movs	r0, r4
 8000948:	f000 fb18 	bl	8000f7c <__clzsi2>
 800094c:	1f43      	subs	r3, r0, #5
 800094e:	409c      	lsls	r4, r3
 8000950:	2376      	movs	r3, #118	@ 0x76
 8000952:	425b      	negs	r3, r3
 8000954:	1a1b      	subs	r3, r3, r0
 8000956:	2000      	movs	r0, #0
 8000958:	e79e      	b.n	8000898 <__aeabi_fdiv+0x4c>
 800095a:	2303      	movs	r3, #3
 800095c:	464a      	mov	r2, r9
 800095e:	431a      	orrs	r2, r3
 8000960:	4691      	mov	r9, r2
 8000962:	2003      	movs	r0, #3
 8000964:	33fc      	adds	r3, #252	@ 0xfc
 8000966:	e797      	b.n	8000898 <__aeabi_fdiv+0x4c>
 8000968:	230c      	movs	r3, #12
 800096a:	4699      	mov	r9, r3
 800096c:	3b09      	subs	r3, #9
 800096e:	27ff      	movs	r7, #255	@ 0xff
 8000970:	469a      	mov	sl, r3
 8000972:	e782      	b.n	800087a <__aeabi_fdiv+0x2e>
 8000974:	2803      	cmp	r0, #3
 8000976:	d02c      	beq.n	80009d2 <__aeabi_fdiv+0x186>
 8000978:	0032      	movs	r2, r6
 800097a:	0038      	movs	r0, r7
 800097c:	307f      	adds	r0, #127	@ 0x7f
 800097e:	2800      	cmp	r0, #0
 8000980:	dd47      	ble.n	8000a12 <__aeabi_fdiv+0x1c6>
 8000982:	0763      	lsls	r3, r4, #29
 8000984:	d004      	beq.n	8000990 <__aeabi_fdiv+0x144>
 8000986:	230f      	movs	r3, #15
 8000988:	4023      	ands	r3, r4
 800098a:	2b04      	cmp	r3, #4
 800098c:	d000      	beq.n	8000990 <__aeabi_fdiv+0x144>
 800098e:	3404      	adds	r4, #4
 8000990:	0123      	lsls	r3, r4, #4
 8000992:	d503      	bpl.n	800099c <__aeabi_fdiv+0x150>
 8000994:	0038      	movs	r0, r7
 8000996:	4b37      	ldr	r3, [pc, #220]	@ (8000a74 <__aeabi_fdiv+0x228>)
 8000998:	3080      	adds	r0, #128	@ 0x80
 800099a:	401c      	ands	r4, r3
 800099c:	28fe      	cmp	r0, #254	@ 0xfe
 800099e:	dcb6      	bgt.n	800090e <__aeabi_fdiv+0xc2>
 80009a0:	01a4      	lsls	r4, r4, #6
 80009a2:	0a64      	lsrs	r4, r4, #9
 80009a4:	b2c0      	uxtb	r0, r0
 80009a6:	e7a9      	b.n	80008fc <__aeabi_fdiv+0xb0>
 80009a8:	2480      	movs	r4, #128	@ 0x80
 80009aa:	2200      	movs	r2, #0
 80009ac:	20ff      	movs	r0, #255	@ 0xff
 80009ae:	03e4      	lsls	r4, r4, #15
 80009b0:	e7a4      	b.n	80008fc <__aeabi_fdiv+0xb0>
 80009b2:	2380      	movs	r3, #128	@ 0x80
 80009b4:	03db      	lsls	r3, r3, #15
 80009b6:	421d      	tst	r5, r3
 80009b8:	d001      	beq.n	80009be <__aeabi_fdiv+0x172>
 80009ba:	421c      	tst	r4, r3
 80009bc:	d00b      	beq.n	80009d6 <__aeabi_fdiv+0x18a>
 80009be:	2480      	movs	r4, #128	@ 0x80
 80009c0:	03e4      	lsls	r4, r4, #15
 80009c2:	432c      	orrs	r4, r5
 80009c4:	0264      	lsls	r4, r4, #9
 80009c6:	4642      	mov	r2, r8
 80009c8:	20ff      	movs	r0, #255	@ 0xff
 80009ca:	0a64      	lsrs	r4, r4, #9
 80009cc:	e796      	b.n	80008fc <__aeabi_fdiv+0xb0>
 80009ce:	4646      	mov	r6, r8
 80009d0:	002c      	movs	r4, r5
 80009d2:	2380      	movs	r3, #128	@ 0x80
 80009d4:	03db      	lsls	r3, r3, #15
 80009d6:	431c      	orrs	r4, r3
 80009d8:	0264      	lsls	r4, r4, #9
 80009da:	0032      	movs	r2, r6
 80009dc:	20ff      	movs	r0, #255	@ 0xff
 80009de:	0a64      	lsrs	r4, r4, #9
 80009e0:	e78c      	b.n	80008fc <__aeabi_fdiv+0xb0>
 80009e2:	016d      	lsls	r5, r5, #5
 80009e4:	0160      	lsls	r0, r4, #5
 80009e6:	4285      	cmp	r5, r0
 80009e8:	d22d      	bcs.n	8000a46 <__aeabi_fdiv+0x1fa>
 80009ea:	231b      	movs	r3, #27
 80009ec:	2400      	movs	r4, #0
 80009ee:	3f01      	subs	r7, #1
 80009f0:	2601      	movs	r6, #1
 80009f2:	0029      	movs	r1, r5
 80009f4:	0064      	lsls	r4, r4, #1
 80009f6:	006d      	lsls	r5, r5, #1
 80009f8:	2900      	cmp	r1, #0
 80009fa:	db01      	blt.n	8000a00 <__aeabi_fdiv+0x1b4>
 80009fc:	4285      	cmp	r5, r0
 80009fe:	d301      	bcc.n	8000a04 <__aeabi_fdiv+0x1b8>
 8000a00:	1a2d      	subs	r5, r5, r0
 8000a02:	4334      	orrs	r4, r6
 8000a04:	3b01      	subs	r3, #1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1f3      	bne.n	80009f2 <__aeabi_fdiv+0x1a6>
 8000a0a:	1e6b      	subs	r3, r5, #1
 8000a0c:	419d      	sbcs	r5, r3
 8000a0e:	432c      	orrs	r4, r5
 8000a10:	e7b3      	b.n	800097a <__aeabi_fdiv+0x12e>
 8000a12:	2301      	movs	r3, #1
 8000a14:	1a1b      	subs	r3, r3, r0
 8000a16:	2b1b      	cmp	r3, #27
 8000a18:	dd00      	ble.n	8000a1c <__aeabi_fdiv+0x1d0>
 8000a1a:	e76d      	b.n	80008f8 <__aeabi_fdiv+0xac>
 8000a1c:	0021      	movs	r1, r4
 8000a1e:	379e      	adds	r7, #158	@ 0x9e
 8000a20:	40d9      	lsrs	r1, r3
 8000a22:	40bc      	lsls	r4, r7
 8000a24:	000b      	movs	r3, r1
 8000a26:	1e61      	subs	r1, r4, #1
 8000a28:	418c      	sbcs	r4, r1
 8000a2a:	4323      	orrs	r3, r4
 8000a2c:	0759      	lsls	r1, r3, #29
 8000a2e:	d004      	beq.n	8000a3a <__aeabi_fdiv+0x1ee>
 8000a30:	210f      	movs	r1, #15
 8000a32:	4019      	ands	r1, r3
 8000a34:	2904      	cmp	r1, #4
 8000a36:	d000      	beq.n	8000a3a <__aeabi_fdiv+0x1ee>
 8000a38:	3304      	adds	r3, #4
 8000a3a:	0159      	lsls	r1, r3, #5
 8000a3c:	d413      	bmi.n	8000a66 <__aeabi_fdiv+0x21a>
 8000a3e:	019b      	lsls	r3, r3, #6
 8000a40:	2000      	movs	r0, #0
 8000a42:	0a5c      	lsrs	r4, r3, #9
 8000a44:	e75a      	b.n	80008fc <__aeabi_fdiv+0xb0>
 8000a46:	231a      	movs	r3, #26
 8000a48:	2401      	movs	r4, #1
 8000a4a:	1a2d      	subs	r5, r5, r0
 8000a4c:	e7d0      	b.n	80009f0 <__aeabi_fdiv+0x1a4>
 8000a4e:	1e98      	subs	r0, r3, #2
 8000a50:	4243      	negs	r3, r0
 8000a52:	4158      	adcs	r0, r3
 8000a54:	4240      	negs	r0, r0
 8000a56:	0032      	movs	r2, r6
 8000a58:	2400      	movs	r4, #0
 8000a5a:	b2c0      	uxtb	r0, r0
 8000a5c:	e74e      	b.n	80008fc <__aeabi_fdiv+0xb0>
 8000a5e:	4642      	mov	r2, r8
 8000a60:	20ff      	movs	r0, #255	@ 0xff
 8000a62:	2400      	movs	r4, #0
 8000a64:	e74a      	b.n	80008fc <__aeabi_fdiv+0xb0>
 8000a66:	2001      	movs	r0, #1
 8000a68:	2400      	movs	r4, #0
 8000a6a:	e747      	b.n	80008fc <__aeabi_fdiv+0xb0>
 8000a6c:	08004c40 	.word	0x08004c40
 8000a70:	08004c80 	.word	0x08004c80
 8000a74:	f7ffffff 	.word	0xf7ffffff

08000a78 <__eqsf2>:
 8000a78:	b570      	push	{r4, r5, r6, lr}
 8000a7a:	0042      	lsls	r2, r0, #1
 8000a7c:	024e      	lsls	r6, r1, #9
 8000a7e:	004c      	lsls	r4, r1, #1
 8000a80:	0245      	lsls	r5, r0, #9
 8000a82:	0a6d      	lsrs	r5, r5, #9
 8000a84:	0e12      	lsrs	r2, r2, #24
 8000a86:	0fc3      	lsrs	r3, r0, #31
 8000a88:	0a76      	lsrs	r6, r6, #9
 8000a8a:	0e24      	lsrs	r4, r4, #24
 8000a8c:	0fc9      	lsrs	r1, r1, #31
 8000a8e:	2aff      	cmp	r2, #255	@ 0xff
 8000a90:	d010      	beq.n	8000ab4 <__eqsf2+0x3c>
 8000a92:	2cff      	cmp	r4, #255	@ 0xff
 8000a94:	d00c      	beq.n	8000ab0 <__eqsf2+0x38>
 8000a96:	2001      	movs	r0, #1
 8000a98:	42a2      	cmp	r2, r4
 8000a9a:	d10a      	bne.n	8000ab2 <__eqsf2+0x3a>
 8000a9c:	42b5      	cmp	r5, r6
 8000a9e:	d108      	bne.n	8000ab2 <__eqsf2+0x3a>
 8000aa0:	428b      	cmp	r3, r1
 8000aa2:	d00f      	beq.n	8000ac4 <__eqsf2+0x4c>
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	d104      	bne.n	8000ab2 <__eqsf2+0x3a>
 8000aa8:	0028      	movs	r0, r5
 8000aaa:	1e43      	subs	r3, r0, #1
 8000aac:	4198      	sbcs	r0, r3
 8000aae:	e000      	b.n	8000ab2 <__eqsf2+0x3a>
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	2cff      	cmp	r4, #255	@ 0xff
 8000ab8:	d1fb      	bne.n	8000ab2 <__eqsf2+0x3a>
 8000aba:	4335      	orrs	r5, r6
 8000abc:	d1f9      	bne.n	8000ab2 <__eqsf2+0x3a>
 8000abe:	404b      	eors	r3, r1
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	e7f6      	b.n	8000ab2 <__eqsf2+0x3a>
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	e7f4      	b.n	8000ab2 <__eqsf2+0x3a>

08000ac8 <__gesf2>:
 8000ac8:	b530      	push	{r4, r5, lr}
 8000aca:	0042      	lsls	r2, r0, #1
 8000acc:	0244      	lsls	r4, r0, #9
 8000ace:	024d      	lsls	r5, r1, #9
 8000ad0:	0fc3      	lsrs	r3, r0, #31
 8000ad2:	0048      	lsls	r0, r1, #1
 8000ad4:	0a64      	lsrs	r4, r4, #9
 8000ad6:	0e12      	lsrs	r2, r2, #24
 8000ad8:	0a6d      	lsrs	r5, r5, #9
 8000ada:	0e00      	lsrs	r0, r0, #24
 8000adc:	0fc9      	lsrs	r1, r1, #31
 8000ade:	2aff      	cmp	r2, #255	@ 0xff
 8000ae0:	d018      	beq.n	8000b14 <__gesf2+0x4c>
 8000ae2:	28ff      	cmp	r0, #255	@ 0xff
 8000ae4:	d00a      	beq.n	8000afc <__gesf2+0x34>
 8000ae6:	2a00      	cmp	r2, #0
 8000ae8:	d11e      	bne.n	8000b28 <__gesf2+0x60>
 8000aea:	2800      	cmp	r0, #0
 8000aec:	d10a      	bne.n	8000b04 <__gesf2+0x3c>
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	d029      	beq.n	8000b46 <__gesf2+0x7e>
 8000af2:	2c00      	cmp	r4, #0
 8000af4:	d12d      	bne.n	8000b52 <__gesf2+0x8a>
 8000af6:	0048      	lsls	r0, r1, #1
 8000af8:	3801      	subs	r0, #1
 8000afa:	bd30      	pop	{r4, r5, pc}
 8000afc:	2d00      	cmp	r5, #0
 8000afe:	d125      	bne.n	8000b4c <__gesf2+0x84>
 8000b00:	2a00      	cmp	r2, #0
 8000b02:	d101      	bne.n	8000b08 <__gesf2+0x40>
 8000b04:	2c00      	cmp	r4, #0
 8000b06:	d0f6      	beq.n	8000af6 <__gesf2+0x2e>
 8000b08:	428b      	cmp	r3, r1
 8000b0a:	d019      	beq.n	8000b40 <__gesf2+0x78>
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	425b      	negs	r3, r3
 8000b10:	4318      	orrs	r0, r3
 8000b12:	e7f2      	b.n	8000afa <__gesf2+0x32>
 8000b14:	2c00      	cmp	r4, #0
 8000b16:	d119      	bne.n	8000b4c <__gesf2+0x84>
 8000b18:	28ff      	cmp	r0, #255	@ 0xff
 8000b1a:	d1f7      	bne.n	8000b0c <__gesf2+0x44>
 8000b1c:	2d00      	cmp	r5, #0
 8000b1e:	d115      	bne.n	8000b4c <__gesf2+0x84>
 8000b20:	2000      	movs	r0, #0
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d1f2      	bne.n	8000b0c <__gesf2+0x44>
 8000b26:	e7e8      	b.n	8000afa <__gesf2+0x32>
 8000b28:	2800      	cmp	r0, #0
 8000b2a:	d0ef      	beq.n	8000b0c <__gesf2+0x44>
 8000b2c:	428b      	cmp	r3, r1
 8000b2e:	d1ed      	bne.n	8000b0c <__gesf2+0x44>
 8000b30:	4282      	cmp	r2, r0
 8000b32:	dceb      	bgt.n	8000b0c <__gesf2+0x44>
 8000b34:	db04      	blt.n	8000b40 <__gesf2+0x78>
 8000b36:	42ac      	cmp	r4, r5
 8000b38:	d8e8      	bhi.n	8000b0c <__gesf2+0x44>
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	42ac      	cmp	r4, r5
 8000b3e:	d2dc      	bcs.n	8000afa <__gesf2+0x32>
 8000b40:	0058      	lsls	r0, r3, #1
 8000b42:	3801      	subs	r0, #1
 8000b44:	e7d9      	b.n	8000afa <__gesf2+0x32>
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	d0d7      	beq.n	8000afa <__gesf2+0x32>
 8000b4a:	e7df      	b.n	8000b0c <__gesf2+0x44>
 8000b4c:	2002      	movs	r0, #2
 8000b4e:	4240      	negs	r0, r0
 8000b50:	e7d3      	b.n	8000afa <__gesf2+0x32>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d1da      	bne.n	8000b0c <__gesf2+0x44>
 8000b56:	e7ee      	b.n	8000b36 <__gesf2+0x6e>

08000b58 <__lesf2>:
 8000b58:	b530      	push	{r4, r5, lr}
 8000b5a:	0042      	lsls	r2, r0, #1
 8000b5c:	0244      	lsls	r4, r0, #9
 8000b5e:	024d      	lsls	r5, r1, #9
 8000b60:	0fc3      	lsrs	r3, r0, #31
 8000b62:	0048      	lsls	r0, r1, #1
 8000b64:	0a64      	lsrs	r4, r4, #9
 8000b66:	0e12      	lsrs	r2, r2, #24
 8000b68:	0a6d      	lsrs	r5, r5, #9
 8000b6a:	0e00      	lsrs	r0, r0, #24
 8000b6c:	0fc9      	lsrs	r1, r1, #31
 8000b6e:	2aff      	cmp	r2, #255	@ 0xff
 8000b70:	d017      	beq.n	8000ba2 <__lesf2+0x4a>
 8000b72:	28ff      	cmp	r0, #255	@ 0xff
 8000b74:	d00a      	beq.n	8000b8c <__lesf2+0x34>
 8000b76:	2a00      	cmp	r2, #0
 8000b78:	d11b      	bne.n	8000bb2 <__lesf2+0x5a>
 8000b7a:	2800      	cmp	r0, #0
 8000b7c:	d10a      	bne.n	8000b94 <__lesf2+0x3c>
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d01d      	beq.n	8000bbe <__lesf2+0x66>
 8000b82:	2c00      	cmp	r4, #0
 8000b84:	d12d      	bne.n	8000be2 <__lesf2+0x8a>
 8000b86:	0048      	lsls	r0, r1, #1
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e011      	b.n	8000bb0 <__lesf2+0x58>
 8000b8c:	2d00      	cmp	r5, #0
 8000b8e:	d10e      	bne.n	8000bae <__lesf2+0x56>
 8000b90:	2a00      	cmp	r2, #0
 8000b92:	d101      	bne.n	8000b98 <__lesf2+0x40>
 8000b94:	2c00      	cmp	r4, #0
 8000b96:	d0f6      	beq.n	8000b86 <__lesf2+0x2e>
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	d10c      	bne.n	8000bb6 <__lesf2+0x5e>
 8000b9c:	0058      	lsls	r0, r3, #1
 8000b9e:	3801      	subs	r0, #1
 8000ba0:	e006      	b.n	8000bb0 <__lesf2+0x58>
 8000ba2:	2c00      	cmp	r4, #0
 8000ba4:	d103      	bne.n	8000bae <__lesf2+0x56>
 8000ba6:	28ff      	cmp	r0, #255	@ 0xff
 8000ba8:	d105      	bne.n	8000bb6 <__lesf2+0x5e>
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d015      	beq.n	8000bda <__lesf2+0x82>
 8000bae:	2002      	movs	r0, #2
 8000bb0:	bd30      	pop	{r4, r5, pc}
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	d106      	bne.n	8000bc4 <__lesf2+0x6c>
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	425b      	negs	r3, r3
 8000bba:	4318      	orrs	r0, r3
 8000bbc:	e7f8      	b.n	8000bb0 <__lesf2+0x58>
 8000bbe:	2c00      	cmp	r4, #0
 8000bc0:	d0f6      	beq.n	8000bb0 <__lesf2+0x58>
 8000bc2:	e7f8      	b.n	8000bb6 <__lesf2+0x5e>
 8000bc4:	428b      	cmp	r3, r1
 8000bc6:	d1f6      	bne.n	8000bb6 <__lesf2+0x5e>
 8000bc8:	4282      	cmp	r2, r0
 8000bca:	dcf4      	bgt.n	8000bb6 <__lesf2+0x5e>
 8000bcc:	dbe6      	blt.n	8000b9c <__lesf2+0x44>
 8000bce:	42ac      	cmp	r4, r5
 8000bd0:	d8f1      	bhi.n	8000bb6 <__lesf2+0x5e>
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	42ac      	cmp	r4, r5
 8000bd6:	d2eb      	bcs.n	8000bb0 <__lesf2+0x58>
 8000bd8:	e7e0      	b.n	8000b9c <__lesf2+0x44>
 8000bda:	2000      	movs	r0, #0
 8000bdc:	428b      	cmp	r3, r1
 8000bde:	d1ea      	bne.n	8000bb6 <__lesf2+0x5e>
 8000be0:	e7e6      	b.n	8000bb0 <__lesf2+0x58>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d1e7      	bne.n	8000bb6 <__lesf2+0x5e>
 8000be6:	e7f2      	b.n	8000bce <__lesf2+0x76>

08000be8 <__aeabi_fmul>:
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bea:	464f      	mov	r7, r9
 8000bec:	4646      	mov	r6, r8
 8000bee:	46d6      	mov	lr, sl
 8000bf0:	0044      	lsls	r4, r0, #1
 8000bf2:	b5c0      	push	{r6, r7, lr}
 8000bf4:	0246      	lsls	r6, r0, #9
 8000bf6:	1c0f      	adds	r7, r1, #0
 8000bf8:	0a76      	lsrs	r6, r6, #9
 8000bfa:	0e24      	lsrs	r4, r4, #24
 8000bfc:	0fc5      	lsrs	r5, r0, #31
 8000bfe:	2c00      	cmp	r4, #0
 8000c00:	d100      	bne.n	8000c04 <__aeabi_fmul+0x1c>
 8000c02:	e0da      	b.n	8000dba <__aeabi_fmul+0x1d2>
 8000c04:	2cff      	cmp	r4, #255	@ 0xff
 8000c06:	d074      	beq.n	8000cf2 <__aeabi_fmul+0x10a>
 8000c08:	2380      	movs	r3, #128	@ 0x80
 8000c0a:	00f6      	lsls	r6, r6, #3
 8000c0c:	04db      	lsls	r3, r3, #19
 8000c0e:	431e      	orrs	r6, r3
 8000c10:	2300      	movs	r3, #0
 8000c12:	4699      	mov	r9, r3
 8000c14:	469a      	mov	sl, r3
 8000c16:	3c7f      	subs	r4, #127	@ 0x7f
 8000c18:	027b      	lsls	r3, r7, #9
 8000c1a:	0a5b      	lsrs	r3, r3, #9
 8000c1c:	4698      	mov	r8, r3
 8000c1e:	007b      	lsls	r3, r7, #1
 8000c20:	0e1b      	lsrs	r3, r3, #24
 8000c22:	0fff      	lsrs	r7, r7, #31
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d074      	beq.n	8000d12 <__aeabi_fmul+0x12a>
 8000c28:	2bff      	cmp	r3, #255	@ 0xff
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_fmul+0x46>
 8000c2c:	e08e      	b.n	8000d4c <__aeabi_fmul+0x164>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	2180      	movs	r1, #128	@ 0x80
 8000c32:	00d2      	lsls	r2, r2, #3
 8000c34:	04c9      	lsls	r1, r1, #19
 8000c36:	4311      	orrs	r1, r2
 8000c38:	3b7f      	subs	r3, #127	@ 0x7f
 8000c3a:	002a      	movs	r2, r5
 8000c3c:	18e4      	adds	r4, r4, r3
 8000c3e:	464b      	mov	r3, r9
 8000c40:	407a      	eors	r2, r7
 8000c42:	4688      	mov	r8, r1
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	2b0a      	cmp	r3, #10
 8000c48:	dc75      	bgt.n	8000d36 <__aeabi_fmul+0x14e>
 8000c4a:	464b      	mov	r3, r9
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	dd0f      	ble.n	8000c72 <__aeabi_fmul+0x8a>
 8000c52:	4649      	mov	r1, r9
 8000c54:	2301      	movs	r3, #1
 8000c56:	408b      	lsls	r3, r1
 8000c58:	21a6      	movs	r1, #166	@ 0xa6
 8000c5a:	00c9      	lsls	r1, r1, #3
 8000c5c:	420b      	tst	r3, r1
 8000c5e:	d169      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000c60:	2190      	movs	r1, #144	@ 0x90
 8000c62:	0089      	lsls	r1, r1, #2
 8000c64:	420b      	tst	r3, r1
 8000c66:	d000      	beq.n	8000c6a <__aeabi_fmul+0x82>
 8000c68:	e100      	b.n	8000e6c <__aeabi_fmul+0x284>
 8000c6a:	2188      	movs	r1, #136	@ 0x88
 8000c6c:	4219      	tst	r1, r3
 8000c6e:	d000      	beq.n	8000c72 <__aeabi_fmul+0x8a>
 8000c70:	e0f5      	b.n	8000e5e <__aeabi_fmul+0x276>
 8000c72:	4641      	mov	r1, r8
 8000c74:	0409      	lsls	r1, r1, #16
 8000c76:	0c09      	lsrs	r1, r1, #16
 8000c78:	4643      	mov	r3, r8
 8000c7a:	0008      	movs	r0, r1
 8000c7c:	0c35      	lsrs	r5, r6, #16
 8000c7e:	0436      	lsls	r6, r6, #16
 8000c80:	0c1b      	lsrs	r3, r3, #16
 8000c82:	0c36      	lsrs	r6, r6, #16
 8000c84:	4370      	muls	r0, r6
 8000c86:	4369      	muls	r1, r5
 8000c88:	435e      	muls	r6, r3
 8000c8a:	435d      	muls	r5, r3
 8000c8c:	1876      	adds	r6, r6, r1
 8000c8e:	0c03      	lsrs	r3, r0, #16
 8000c90:	199b      	adds	r3, r3, r6
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d903      	bls.n	8000c9e <__aeabi_fmul+0xb6>
 8000c96:	2180      	movs	r1, #128	@ 0x80
 8000c98:	0249      	lsls	r1, r1, #9
 8000c9a:	468c      	mov	ip, r1
 8000c9c:	4465      	add	r5, ip
 8000c9e:	0400      	lsls	r0, r0, #16
 8000ca0:	0419      	lsls	r1, r3, #16
 8000ca2:	0c00      	lsrs	r0, r0, #16
 8000ca4:	1809      	adds	r1, r1, r0
 8000ca6:	018e      	lsls	r6, r1, #6
 8000ca8:	1e70      	subs	r0, r6, #1
 8000caa:	4186      	sbcs	r6, r0
 8000cac:	0c1b      	lsrs	r3, r3, #16
 8000cae:	0e89      	lsrs	r1, r1, #26
 8000cb0:	195b      	adds	r3, r3, r5
 8000cb2:	430e      	orrs	r6, r1
 8000cb4:	019b      	lsls	r3, r3, #6
 8000cb6:	431e      	orrs	r6, r3
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	d46c      	bmi.n	8000d96 <__aeabi_fmul+0x1ae>
 8000cbc:	0023      	movs	r3, r4
 8000cbe:	337f      	adds	r3, #127	@ 0x7f
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	dc00      	bgt.n	8000cc6 <__aeabi_fmul+0xde>
 8000cc4:	e0b1      	b.n	8000e2a <__aeabi_fmul+0x242>
 8000cc6:	0015      	movs	r5, r2
 8000cc8:	0771      	lsls	r1, r6, #29
 8000cca:	d00b      	beq.n	8000ce4 <__aeabi_fmul+0xfc>
 8000ccc:	200f      	movs	r0, #15
 8000cce:	0021      	movs	r1, r4
 8000cd0:	4030      	ands	r0, r6
 8000cd2:	2804      	cmp	r0, #4
 8000cd4:	d006      	beq.n	8000ce4 <__aeabi_fmul+0xfc>
 8000cd6:	3604      	adds	r6, #4
 8000cd8:	0132      	lsls	r2, r6, #4
 8000cda:	d503      	bpl.n	8000ce4 <__aeabi_fmul+0xfc>
 8000cdc:	4b6e      	ldr	r3, [pc, #440]	@ (8000e98 <__aeabi_fmul+0x2b0>)
 8000cde:	401e      	ands	r6, r3
 8000ce0:	000b      	movs	r3, r1
 8000ce2:	3380      	adds	r3, #128	@ 0x80
 8000ce4:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ce6:	dd00      	ble.n	8000cea <__aeabi_fmul+0x102>
 8000ce8:	e0bd      	b.n	8000e66 <__aeabi_fmul+0x27e>
 8000cea:	01b2      	lsls	r2, r6, #6
 8000cec:	0a52      	lsrs	r2, r2, #9
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	e048      	b.n	8000d84 <__aeabi_fmul+0x19c>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d000      	beq.n	8000cf8 <__aeabi_fmul+0x110>
 8000cf6:	e092      	b.n	8000e1e <__aeabi_fmul+0x236>
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	4699      	mov	r9, r3
 8000cfc:	3b06      	subs	r3, #6
 8000cfe:	469a      	mov	sl, r3
 8000d00:	027b      	lsls	r3, r7, #9
 8000d02:	0a5b      	lsrs	r3, r3, #9
 8000d04:	4698      	mov	r8, r3
 8000d06:	007b      	lsls	r3, r7, #1
 8000d08:	24ff      	movs	r4, #255	@ 0xff
 8000d0a:	0e1b      	lsrs	r3, r3, #24
 8000d0c:	0fff      	lsrs	r7, r7, #31
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d18a      	bne.n	8000c28 <__aeabi_fmul+0x40>
 8000d12:	4642      	mov	r2, r8
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	d164      	bne.n	8000de2 <__aeabi_fmul+0x1fa>
 8000d18:	4649      	mov	r1, r9
 8000d1a:	3201      	adds	r2, #1
 8000d1c:	4311      	orrs	r1, r2
 8000d1e:	4689      	mov	r9, r1
 8000d20:	290a      	cmp	r1, #10
 8000d22:	dc08      	bgt.n	8000d36 <__aeabi_fmul+0x14e>
 8000d24:	407d      	eors	r5, r7
 8000d26:	2001      	movs	r0, #1
 8000d28:	b2ea      	uxtb	r2, r5
 8000d2a:	2902      	cmp	r1, #2
 8000d2c:	dc91      	bgt.n	8000c52 <__aeabi_fmul+0x6a>
 8000d2e:	0015      	movs	r5, r2
 8000d30:	2200      	movs	r2, #0
 8000d32:	e027      	b.n	8000d84 <__aeabi_fmul+0x19c>
 8000d34:	0015      	movs	r5, r2
 8000d36:	4653      	mov	r3, sl
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_fmul+0x156>
 8000d3c:	e093      	b.n	8000e66 <__aeabi_fmul+0x27e>
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d01a      	beq.n	8000d78 <__aeabi_fmul+0x190>
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d12c      	bne.n	8000da0 <__aeabi_fmul+0x1b8>
 8000d46:	2300      	movs	r3, #0
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e01b      	b.n	8000d84 <__aeabi_fmul+0x19c>
 8000d4c:	4643      	mov	r3, r8
 8000d4e:	34ff      	adds	r4, #255	@ 0xff
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d055      	beq.n	8000e00 <__aeabi_fmul+0x218>
 8000d54:	2103      	movs	r1, #3
 8000d56:	464b      	mov	r3, r9
 8000d58:	430b      	orrs	r3, r1
 8000d5a:	0019      	movs	r1, r3
 8000d5c:	2b0a      	cmp	r3, #10
 8000d5e:	dc00      	bgt.n	8000d62 <__aeabi_fmul+0x17a>
 8000d60:	e092      	b.n	8000e88 <__aeabi_fmul+0x2a0>
 8000d62:	2b0f      	cmp	r3, #15
 8000d64:	d000      	beq.n	8000d68 <__aeabi_fmul+0x180>
 8000d66:	e08c      	b.n	8000e82 <__aeabi_fmul+0x29a>
 8000d68:	2280      	movs	r2, #128	@ 0x80
 8000d6a:	03d2      	lsls	r2, r2, #15
 8000d6c:	4216      	tst	r6, r2
 8000d6e:	d003      	beq.n	8000d78 <__aeabi_fmul+0x190>
 8000d70:	4643      	mov	r3, r8
 8000d72:	4213      	tst	r3, r2
 8000d74:	d100      	bne.n	8000d78 <__aeabi_fmul+0x190>
 8000d76:	e07d      	b.n	8000e74 <__aeabi_fmul+0x28c>
 8000d78:	2280      	movs	r2, #128	@ 0x80
 8000d7a:	03d2      	lsls	r2, r2, #15
 8000d7c:	4332      	orrs	r2, r6
 8000d7e:	0252      	lsls	r2, r2, #9
 8000d80:	0a52      	lsrs	r2, r2, #9
 8000d82:	23ff      	movs	r3, #255	@ 0xff
 8000d84:	05d8      	lsls	r0, r3, #23
 8000d86:	07ed      	lsls	r5, r5, #31
 8000d88:	4310      	orrs	r0, r2
 8000d8a:	4328      	orrs	r0, r5
 8000d8c:	bce0      	pop	{r5, r6, r7}
 8000d8e:	46ba      	mov	sl, r7
 8000d90:	46b1      	mov	r9, r6
 8000d92:	46a8      	mov	r8, r5
 8000d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d96:	2301      	movs	r3, #1
 8000d98:	0015      	movs	r5, r2
 8000d9a:	0871      	lsrs	r1, r6, #1
 8000d9c:	401e      	ands	r6, r3
 8000d9e:	430e      	orrs	r6, r1
 8000da0:	0023      	movs	r3, r4
 8000da2:	3380      	adds	r3, #128	@ 0x80
 8000da4:	1c61      	adds	r1, r4, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	dd41      	ble.n	8000e2e <__aeabi_fmul+0x246>
 8000daa:	0772      	lsls	r2, r6, #29
 8000dac:	d094      	beq.n	8000cd8 <__aeabi_fmul+0xf0>
 8000dae:	220f      	movs	r2, #15
 8000db0:	4032      	ands	r2, r6
 8000db2:	2a04      	cmp	r2, #4
 8000db4:	d000      	beq.n	8000db8 <__aeabi_fmul+0x1d0>
 8000db6:	e78e      	b.n	8000cd6 <__aeabi_fmul+0xee>
 8000db8:	e78e      	b.n	8000cd8 <__aeabi_fmul+0xf0>
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d105      	bne.n	8000dca <__aeabi_fmul+0x1e2>
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	4699      	mov	r9, r3
 8000dc2:	3b03      	subs	r3, #3
 8000dc4:	2400      	movs	r4, #0
 8000dc6:	469a      	mov	sl, r3
 8000dc8:	e726      	b.n	8000c18 <__aeabi_fmul+0x30>
 8000dca:	0030      	movs	r0, r6
 8000dcc:	f000 f8d6 	bl	8000f7c <__clzsi2>
 8000dd0:	2476      	movs	r4, #118	@ 0x76
 8000dd2:	1f43      	subs	r3, r0, #5
 8000dd4:	409e      	lsls	r6, r3
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	4264      	negs	r4, r4
 8000dda:	4699      	mov	r9, r3
 8000ddc:	469a      	mov	sl, r3
 8000dde:	1a24      	subs	r4, r4, r0
 8000de0:	e71a      	b.n	8000c18 <__aeabi_fmul+0x30>
 8000de2:	4640      	mov	r0, r8
 8000de4:	f000 f8ca 	bl	8000f7c <__clzsi2>
 8000de8:	464b      	mov	r3, r9
 8000dea:	1a24      	subs	r4, r4, r0
 8000dec:	3c76      	subs	r4, #118	@ 0x76
 8000dee:	2b0a      	cmp	r3, #10
 8000df0:	dca1      	bgt.n	8000d36 <__aeabi_fmul+0x14e>
 8000df2:	4643      	mov	r3, r8
 8000df4:	3805      	subs	r0, #5
 8000df6:	4083      	lsls	r3, r0
 8000df8:	407d      	eors	r5, r7
 8000dfa:	4698      	mov	r8, r3
 8000dfc:	b2ea      	uxtb	r2, r5
 8000dfe:	e724      	b.n	8000c4a <__aeabi_fmul+0x62>
 8000e00:	464a      	mov	r2, r9
 8000e02:	3302      	adds	r3, #2
 8000e04:	4313      	orrs	r3, r2
 8000e06:	002a      	movs	r2, r5
 8000e08:	407a      	eors	r2, r7
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	2b0a      	cmp	r3, #10
 8000e0e:	dc92      	bgt.n	8000d36 <__aeabi_fmul+0x14e>
 8000e10:	4649      	mov	r1, r9
 8000e12:	0015      	movs	r5, r2
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d026      	beq.n	8000e66 <__aeabi_fmul+0x27e>
 8000e18:	4699      	mov	r9, r3
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	e719      	b.n	8000c52 <__aeabi_fmul+0x6a>
 8000e1e:	230c      	movs	r3, #12
 8000e20:	4699      	mov	r9, r3
 8000e22:	3b09      	subs	r3, #9
 8000e24:	24ff      	movs	r4, #255	@ 0xff
 8000e26:	469a      	mov	sl, r3
 8000e28:	e6f6      	b.n	8000c18 <__aeabi_fmul+0x30>
 8000e2a:	0015      	movs	r5, r2
 8000e2c:	0021      	movs	r1, r4
 8000e2e:	2201      	movs	r2, #1
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b1b      	cmp	r3, #27
 8000e34:	dd00      	ble.n	8000e38 <__aeabi_fmul+0x250>
 8000e36:	e786      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e38:	319e      	adds	r1, #158	@ 0x9e
 8000e3a:	0032      	movs	r2, r6
 8000e3c:	408e      	lsls	r6, r1
 8000e3e:	40da      	lsrs	r2, r3
 8000e40:	1e73      	subs	r3, r6, #1
 8000e42:	419e      	sbcs	r6, r3
 8000e44:	4332      	orrs	r2, r6
 8000e46:	0753      	lsls	r3, r2, #29
 8000e48:	d004      	beq.n	8000e54 <__aeabi_fmul+0x26c>
 8000e4a:	230f      	movs	r3, #15
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	d000      	beq.n	8000e54 <__aeabi_fmul+0x26c>
 8000e52:	3204      	adds	r2, #4
 8000e54:	0153      	lsls	r3, r2, #5
 8000e56:	d510      	bpl.n	8000e7a <__aeabi_fmul+0x292>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	e792      	b.n	8000d84 <__aeabi_fmul+0x19c>
 8000e5e:	003d      	movs	r5, r7
 8000e60:	4646      	mov	r6, r8
 8000e62:	4682      	mov	sl, r0
 8000e64:	e767      	b.n	8000d36 <__aeabi_fmul+0x14e>
 8000e66:	23ff      	movs	r3, #255	@ 0xff
 8000e68:	2200      	movs	r2, #0
 8000e6a:	e78b      	b.n	8000d84 <__aeabi_fmul+0x19c>
 8000e6c:	2280      	movs	r2, #128	@ 0x80
 8000e6e:	2500      	movs	r5, #0
 8000e70:	03d2      	lsls	r2, r2, #15
 8000e72:	e786      	b.n	8000d82 <__aeabi_fmul+0x19a>
 8000e74:	003d      	movs	r5, r7
 8000e76:	431a      	orrs	r2, r3
 8000e78:	e783      	b.n	8000d82 <__aeabi_fmul+0x19a>
 8000e7a:	0192      	lsls	r2, r2, #6
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	0a52      	lsrs	r2, r2, #9
 8000e80:	e780      	b.n	8000d84 <__aeabi_fmul+0x19c>
 8000e82:	003d      	movs	r5, r7
 8000e84:	4646      	mov	r6, r8
 8000e86:	e777      	b.n	8000d78 <__aeabi_fmul+0x190>
 8000e88:	002a      	movs	r2, r5
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	407a      	eors	r2, r7
 8000e8e:	408b      	lsls	r3, r1
 8000e90:	2003      	movs	r0, #3
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	e6e9      	b.n	8000c6a <__aeabi_fmul+0x82>
 8000e96:	46c0      	nop			@ (mov r8, r8)
 8000e98:	f7ffffff 	.word	0xf7ffffff

08000e9c <__aeabi_f2iz>:
 8000e9c:	0241      	lsls	r1, r0, #9
 8000e9e:	0042      	lsls	r2, r0, #1
 8000ea0:	0fc3      	lsrs	r3, r0, #31
 8000ea2:	0a49      	lsrs	r1, r1, #9
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	0e12      	lsrs	r2, r2, #24
 8000ea8:	2a7e      	cmp	r2, #126	@ 0x7e
 8000eaa:	dd03      	ble.n	8000eb4 <__aeabi_f2iz+0x18>
 8000eac:	2a9d      	cmp	r2, #157	@ 0x9d
 8000eae:	dd02      	ble.n	8000eb6 <__aeabi_f2iz+0x1a>
 8000eb0:	4a09      	ldr	r2, [pc, #36]	@ (8000ed8 <__aeabi_f2iz+0x3c>)
 8000eb2:	1898      	adds	r0, r3, r2
 8000eb4:	4770      	bx	lr
 8000eb6:	2080      	movs	r0, #128	@ 0x80
 8000eb8:	0400      	lsls	r0, r0, #16
 8000eba:	4301      	orrs	r1, r0
 8000ebc:	2a95      	cmp	r2, #149	@ 0x95
 8000ebe:	dc07      	bgt.n	8000ed0 <__aeabi_f2iz+0x34>
 8000ec0:	2096      	movs	r0, #150	@ 0x96
 8000ec2:	1a82      	subs	r2, r0, r2
 8000ec4:	40d1      	lsrs	r1, r2
 8000ec6:	4248      	negs	r0, r1
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1f3      	bne.n	8000eb4 <__aeabi_f2iz+0x18>
 8000ecc:	0008      	movs	r0, r1
 8000ece:	e7f1      	b.n	8000eb4 <__aeabi_f2iz+0x18>
 8000ed0:	3a96      	subs	r2, #150	@ 0x96
 8000ed2:	4091      	lsls	r1, r2
 8000ed4:	e7f7      	b.n	8000ec6 <__aeabi_f2iz+0x2a>
 8000ed6:	46c0      	nop			@ (mov r8, r8)
 8000ed8:	7fffffff 	.word	0x7fffffff

08000edc <__aeabi_i2f>:
 8000edc:	b570      	push	{r4, r5, r6, lr}
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	d012      	beq.n	8000f08 <__aeabi_i2f+0x2c>
 8000ee2:	17c3      	asrs	r3, r0, #31
 8000ee4:	18c5      	adds	r5, r0, r3
 8000ee6:	405d      	eors	r5, r3
 8000ee8:	0fc4      	lsrs	r4, r0, #31
 8000eea:	0028      	movs	r0, r5
 8000eec:	f000 f846 	bl	8000f7c <__clzsi2>
 8000ef0:	239e      	movs	r3, #158	@ 0x9e
 8000ef2:	1a1b      	subs	r3, r3, r0
 8000ef4:	2b96      	cmp	r3, #150	@ 0x96
 8000ef6:	dc0f      	bgt.n	8000f18 <__aeabi_i2f+0x3c>
 8000ef8:	2808      	cmp	r0, #8
 8000efa:	d038      	beq.n	8000f6e <__aeabi_i2f+0x92>
 8000efc:	3808      	subs	r0, #8
 8000efe:	4085      	lsls	r5, r0
 8000f00:	026d      	lsls	r5, r5, #9
 8000f02:	0a6d      	lsrs	r5, r5, #9
 8000f04:	b2d8      	uxtb	r0, r3
 8000f06:	e002      	b.n	8000f0e <__aeabi_i2f+0x32>
 8000f08:	2400      	movs	r4, #0
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	2500      	movs	r5, #0
 8000f0e:	05c0      	lsls	r0, r0, #23
 8000f10:	4328      	orrs	r0, r5
 8000f12:	07e4      	lsls	r4, r4, #31
 8000f14:	4320      	orrs	r0, r4
 8000f16:	bd70      	pop	{r4, r5, r6, pc}
 8000f18:	2b99      	cmp	r3, #153	@ 0x99
 8000f1a:	dc14      	bgt.n	8000f46 <__aeabi_i2f+0x6a>
 8000f1c:	1f42      	subs	r2, r0, #5
 8000f1e:	4095      	lsls	r5, r2
 8000f20:	002a      	movs	r2, r5
 8000f22:	4915      	ldr	r1, [pc, #84]	@ (8000f78 <__aeabi_i2f+0x9c>)
 8000f24:	4011      	ands	r1, r2
 8000f26:	0755      	lsls	r5, r2, #29
 8000f28:	d01c      	beq.n	8000f64 <__aeabi_i2f+0x88>
 8000f2a:	250f      	movs	r5, #15
 8000f2c:	402a      	ands	r2, r5
 8000f2e:	2a04      	cmp	r2, #4
 8000f30:	d018      	beq.n	8000f64 <__aeabi_i2f+0x88>
 8000f32:	3104      	adds	r1, #4
 8000f34:	08ca      	lsrs	r2, r1, #3
 8000f36:	0149      	lsls	r1, r1, #5
 8000f38:	d515      	bpl.n	8000f66 <__aeabi_i2f+0x8a>
 8000f3a:	239f      	movs	r3, #159	@ 0x9f
 8000f3c:	0252      	lsls	r2, r2, #9
 8000f3e:	1a18      	subs	r0, r3, r0
 8000f40:	0a55      	lsrs	r5, r2, #9
 8000f42:	b2c0      	uxtb	r0, r0
 8000f44:	e7e3      	b.n	8000f0e <__aeabi_i2f+0x32>
 8000f46:	2205      	movs	r2, #5
 8000f48:	0029      	movs	r1, r5
 8000f4a:	1a12      	subs	r2, r2, r0
 8000f4c:	40d1      	lsrs	r1, r2
 8000f4e:	0002      	movs	r2, r0
 8000f50:	321b      	adds	r2, #27
 8000f52:	4095      	lsls	r5, r2
 8000f54:	002a      	movs	r2, r5
 8000f56:	1e55      	subs	r5, r2, #1
 8000f58:	41aa      	sbcs	r2, r5
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	4906      	ldr	r1, [pc, #24]	@ (8000f78 <__aeabi_i2f+0x9c>)
 8000f5e:	4011      	ands	r1, r2
 8000f60:	0755      	lsls	r5, r2, #29
 8000f62:	d1e2      	bne.n	8000f2a <__aeabi_i2f+0x4e>
 8000f64:	08ca      	lsrs	r2, r1, #3
 8000f66:	0252      	lsls	r2, r2, #9
 8000f68:	0a55      	lsrs	r5, r2, #9
 8000f6a:	b2d8      	uxtb	r0, r3
 8000f6c:	e7cf      	b.n	8000f0e <__aeabi_i2f+0x32>
 8000f6e:	026d      	lsls	r5, r5, #9
 8000f70:	0a6d      	lsrs	r5, r5, #9
 8000f72:	308e      	adds	r0, #142	@ 0x8e
 8000f74:	e7cb      	b.n	8000f0e <__aeabi_i2f+0x32>
 8000f76:	46c0      	nop			@ (mov r8, r8)
 8000f78:	fbffffff 	.word	0xfbffffff

08000f7c <__clzsi2>:
 8000f7c:	211c      	movs	r1, #28
 8000f7e:	2301      	movs	r3, #1
 8000f80:	041b      	lsls	r3, r3, #16
 8000f82:	4298      	cmp	r0, r3
 8000f84:	d301      	bcc.n	8000f8a <__clzsi2+0xe>
 8000f86:	0c00      	lsrs	r0, r0, #16
 8000f88:	3910      	subs	r1, #16
 8000f8a:	0a1b      	lsrs	r3, r3, #8
 8000f8c:	4298      	cmp	r0, r3
 8000f8e:	d301      	bcc.n	8000f94 <__clzsi2+0x18>
 8000f90:	0a00      	lsrs	r0, r0, #8
 8000f92:	3908      	subs	r1, #8
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	4298      	cmp	r0, r3
 8000f98:	d301      	bcc.n	8000f9e <__clzsi2+0x22>
 8000f9a:	0900      	lsrs	r0, r0, #4
 8000f9c:	3904      	subs	r1, #4
 8000f9e:	a202      	add	r2, pc, #8	@ (adr r2, 8000fa8 <__clzsi2+0x2c>)
 8000fa0:	5c10      	ldrb	r0, [r2, r0]
 8000fa2:	1840      	adds	r0, r0, r1
 8000fa4:	4770      	bx	lr
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	02020304 	.word	0x02020304
 8000fac:	01010101 	.word	0x01010101
	...

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbe:	f001 f8a5 	bl	800210c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc2:	f000 f8f1 	bl	80011a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc6:	f000 fa21 	bl	800140c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000fca:	f000 f98f 	bl	80012ec <MX_TIM3_Init>
  MX_TIM14_Init();
 8000fce:	f000 f9f7 	bl	80013c0 <MX_TIM14_Init>
  MX_I2C1_Init();
 8000fd2:	f000 f94b 	bl	800126c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Start PWM on green and blue LED
  HAL_TIM_PWM_Start(&PWM_TIMER, PWM_BLUE_LED);
 8000fd6:	4b6f      	ldr	r3, [pc, #444]	@ (8001194 <main+0x1dc>)
 8000fd8:	2108      	movs	r1, #8
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f003 f850 	bl	8004080 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&PWM_TIMER, PWM_GREEN_LED);
 8000fe0:	4b6c      	ldr	r3, [pc, #432]	@ (8001194 <main+0x1dc>)
 8000fe2:	210c      	movs	r1, #12
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f003 f84b 	bl	8004080 <HAL_TIM_PWM_Start>


  // Check, if who_am_i register of the sensors returns the correct value and blink accordingly
  if (check_gyro())
 8000fea:	f000 fb61 	bl	80016b0 <check_gyro>
 8000fee:	1e03      	subs	r3, r0, #0
 8000ff0:	d005      	beq.n	8000ffe <main+0x46>
  {
    blink_sos_pwm(&PWM_TIMER, PWM_BLUE_LED); // Check successful
 8000ff2:	4b68      	ldr	r3, [pc, #416]	@ (8001194 <main+0x1dc>)
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f000 fa54 	bl	80014a4 <blink_sos_pwm>
 8000ffc:	e004      	b.n	8001008 <main+0x50>
  }
  else
  {
    blink_sos_pwm(&PWM_TIMER, PWM_GREEN_LED); // Check failed
 8000ffe:	4b65      	ldr	r3, [pc, #404]	@ (8001194 <main+0x1dc>)
 8001000:	210c      	movs	r1, #12
 8001002:	0018      	movs	r0, r3
 8001004:	f000 fa4e 	bl	80014a4 <blink_sos_pwm>
  }

  HAL_Delay(2000);  // Pause to make checks visually distinguishable
 8001008:	23fa      	movs	r3, #250	@ 0xfa
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	0018      	movs	r0, r3
 800100e:	f001 f8e1 	bl	80021d4 <HAL_Delay>

  if (check_magnetometer())
 8001012:	f000 fb7b 	bl	800170c <check_magnetometer>
 8001016:	1e03      	subs	r3, r0, #0
 8001018:	d005      	beq.n	8001026 <main+0x6e>
  {
    blink_sos_pwm(&PWM_TIMER, PWM_BLUE_LED); // Check successful
 800101a:	4b5e      	ldr	r3, [pc, #376]	@ (8001194 <main+0x1dc>)
 800101c:	2108      	movs	r1, #8
 800101e:	0018      	movs	r0, r3
 8001020:	f000 fa40 	bl	80014a4 <blink_sos_pwm>
 8001024:	e004      	b.n	8001030 <main+0x78>
  }
  else
  {
    blink_sos_pwm(&PWM_TIMER, PWM_GREEN_LED); // Check failed
 8001026:	4b5b      	ldr	r3, [pc, #364]	@ (8001194 <main+0x1dc>)
 8001028:	210c      	movs	r1, #12
 800102a:	0018      	movs	r0, r3
 800102c:	f000 fa3a 	bl	80014a4 <blink_sos_pwm>
  }

  HAL_Delay(1000);  // Pause to make checks visually distinguishable
 8001030:	23fa      	movs	r3, #250	@ 0xfa
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	0018      	movs	r0, r3
 8001036:	f001 f8cd 	bl	80021d4 <HAL_Delay>

  // Sensor initialisations
  init_gyro();				// Initialisation of control registers of the gyroscope (FXAS21002C)
 800103a:	f000 fb95 	bl	8001768 <init_gyro>
  init_magnetometer();		// Initialisation of control registers of the magnetometer (FXOS8700CQ)
 800103e:	f000 fbdb 	bl	80017f8 <init_magnetometer>


  // Start control cycle

  // Wait for press of the blue switch (LOW)
  while (HAL_GPIO_ReadPin(blue_switch_GPIO_Port, blue_switch_Pin) == GPIO_PIN_RESET) {
 8001042:	e012      	b.n	800106a <main+0xb2>
      // Blue LED oscillates slowly while waiting on press
      static uint8_t val = 0;
      val = (val + 5) % 100;
 8001044:	4b54      	ldr	r3, [pc, #336]	@ (8001198 <main+0x1e0>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	3305      	adds	r3, #5
 800104a:	2164      	movs	r1, #100	@ 0x64
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff f9cb 	bl	80003e8 <__aeabi_idivmod>
 8001052:	000b      	movs	r3, r1
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b50      	ldr	r3, [pc, #320]	@ (8001198 <main+0x1e0>)
 8001058:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_COMPARE(&PWM_TIMER, PWM_BLUE_LED, val);
 800105a:	4b4f      	ldr	r3, [pc, #316]	@ (8001198 <main+0x1e0>)
 800105c:	781a      	ldrb	r2, [r3, #0]
 800105e:	4b4d      	ldr	r3, [pc, #308]	@ (8001194 <main+0x1dc>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	63da      	str	r2, [r3, #60]	@ 0x3c
      HAL_Delay(50);
 8001064:	2032      	movs	r0, #50	@ 0x32
 8001066:	f001 f8b5 	bl	80021d4 <HAL_Delay>
  while (HAL_GPIO_ReadPin(blue_switch_GPIO_Port, blue_switch_Pin) == GPIO_PIN_RESET) {
 800106a:	2390      	movs	r3, #144	@ 0x90
 800106c:	05db      	lsls	r3, r3, #23
 800106e:	2101      	movs	r1, #1
 8001070:	0018      	movs	r0, r3
 8001072:	f001 fb21 	bl	80026b8 <HAL_GPIO_ReadPin>
 8001076:	1e03      	subs	r3, r0, #0
 8001078:	d0e4      	beq.n	8001044 <main+0x8c>
  }

  // Wait 50 ms to compensate for possible (de-)bouncing
  HAL_Delay(50);
 800107a:	2032      	movs	r0, #50	@ 0x32
 800107c:	f001 f8aa 	bl	80021d4 <HAL_Delay>

  // Wait for release of the blue switch (HIGH)
  while (HAL_GPIO_ReadPin(blue_switch_GPIO_Port, blue_switch_Pin) == GPIO_PIN_SET) {
 8001080:	e00d      	b.n	800109e <main+0xe6>
	  // Blue LED blinks intensely while waiting on release
      __HAL_TIM_SET_COMPARE(&PWM_TIMER, PWM_BLUE_LED, PWM_MAX);
 8001082:	4b44      	ldr	r3, [pc, #272]	@ (8001194 <main+0x1dc>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2264      	movs	r2, #100	@ 0x64
 8001088:	63da      	str	r2, [r3, #60]	@ 0x3c
      HAL_Delay(50);
 800108a:	2032      	movs	r0, #50	@ 0x32
 800108c:	f001 f8a2 	bl	80021d4 <HAL_Delay>
      __HAL_TIM_SET_COMPARE(&PWM_TIMER, PWM_BLUE_LED, PWM_MIN);
 8001090:	4b40      	ldr	r3, [pc, #256]	@ (8001194 <main+0x1dc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2200      	movs	r2, #0
 8001096:	63da      	str	r2, [r3, #60]	@ 0x3c
      HAL_Delay(50);
 8001098:	2032      	movs	r0, #50	@ 0x32
 800109a:	f001 f89b 	bl	80021d4 <HAL_Delay>
  while (HAL_GPIO_ReadPin(blue_switch_GPIO_Port, blue_switch_Pin) == GPIO_PIN_SET) {
 800109e:	2390      	movs	r3, #144	@ 0x90
 80010a0:	05db      	lsls	r3, r3, #23
 80010a2:	2101      	movs	r1, #1
 80010a4:	0018      	movs	r0, r3
 80010a6:	f001 fb07 	bl	80026b8 <HAL_GPIO_ReadPin>
 80010aa:	0003      	movs	r3, r0
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d0e8      	beq.n	8001082 <main+0xca>
  }


  // Start control cycle timer interrupt
  ctrl_timer_set_rate_hz(10);   // 10 Hz control loop frequency when active
 80010b0:	200a      	movs	r0, #10
 80010b2:	f000 fe2d 	bl	8001d10 <ctrl_timer_set_rate_hz>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (do_control)	// If the timer-interrupt-flag is set (true = 1), start the control cycle
 80010b6:	4b39      	ldr	r3, [pc, #228]	@ (800119c <main+0x1e4>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d063      	beq.n	8001188 <main+0x1d0>
		{
			do_control = 0;	// Reset flag
 80010c0:	4b36      	ldr	r3, [pc, #216]	@ (800119c <main+0x1e4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]

			// Initialise local variables for current sensor readings and PWM outputs
			float gyro_z = 0.0f;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
			float mag_x = 0, mag_z = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
			uint8_t pwm_x = 0, pwm_y = 0;
 80010d2:	1cfb      	adds	r3, r7, #3
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	1cbb      	adds	r3, r7, #2
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]

			if (isSleeping) {
 80010de:	4b30      	ldr	r3, [pc, #192]	@ (80011a0 <main+0x1e8>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d005      	beq.n	80010f2 <main+0x13a>
			    // Activate sensors and read data when sleeping to check viability of sleeping
			    fxas_active(1);
 80010e6:	2001      	movs	r0, #1
 80010e8:	f000 fe52 	bl	8001d90 <fxas_active>
			    fxos_active(1);
 80010ec:	2001      	movs	r0, #1
 80010ee:	f000 fe79 	bl	8001de4 <fxos_active>
			}

			// Read values from gyroscope (FXAS21002C) and magnetometer (FXOS8700CQ)
			read_gyro(&gyro_z);
 80010f2:	230c      	movs	r3, #12
 80010f4:	18fb      	adds	r3, r7, r3
 80010f6:	0018      	movs	r0, r3
 80010f8:	f000 fbc6 	bl	8001888 <read_gyro>
			read_magnetometer(&mag_x, &mag_z);
 80010fc:	1d3a      	adds	r2, r7, #4
 80010fe:	2308      	movs	r3, #8
 8001100:	18fb      	adds	r3, r7, r3
 8001102:	0011      	movs	r1, r2
 8001104:	0018      	movs	r0, r3
 8001106:	f000 fc37 	bl	8001978 <read_magnetometer>

			// Evaluate sleep logic (set isSleeping-flag if necessary conditions are met)
			handle_sleep_logic(gyro_z);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	1c18      	adds	r0, r3, #0
 800110e:	f000 fdad 	bl	8001c6c <handle_sleep_logic>

			static uint8_t prevSleeping = 0;
			if (isSleeping != prevSleeping) {
 8001112:	4b23      	ldr	r3, [pc, #140]	@ (80011a0 <main+0x1e8>)
 8001114:	781a      	ldrb	r2, [r3, #0]
 8001116:	4b23      	ldr	r3, [pc, #140]	@ (80011a4 <main+0x1ec>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	429a      	cmp	r2, r3
 800111c:	d01a      	beq.n	8001154 <main+0x19c>
				prevSleeping = isSleeping;
 800111e:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <main+0x1e8>)
 8001120:	781a      	ldrb	r2, [r3, #0]
 8001122:	4b20      	ldr	r3, [pc, #128]	@ (80011a4 <main+0x1ec>)
 8001124:	701a      	strb	r2, [r3, #0]
				if (isSleeping) {
 8001126:	4b1e      	ldr	r3, [pc, #120]	@ (80011a0 <main+0x1e8>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d009      	beq.n	8001142 <main+0x18a>
					fxas_active(0);          // Change sensor state to ready
 800112e:	2000      	movs	r0, #0
 8001130:	f000 fe2e 	bl	8001d90 <fxas_active>
					fxos_active(0);
 8001134:	2000      	movs	r0, #0
 8001136:	f000 fe55 	bl	8001de4 <fxos_active>
					ctrl_timer_set_rate_hz(1);   // 1 Hz while sleeping
 800113a:	2001      	movs	r0, #1
 800113c:	f000 fde8 	bl	8001d10 <ctrl_timer_set_rate_hz>
 8001140:	e008      	b.n	8001154 <main+0x19c>
				} else {
					fxas_active(1);          // Change sensor state to active
 8001142:	2001      	movs	r0, #1
 8001144:	f000 fe24 	bl	8001d90 <fxas_active>
					fxos_active(1);
 8001148:	2001      	movs	r0, #1
 800114a:	f000 fe4b 	bl	8001de4 <fxos_active>
					ctrl_timer_set_rate_hz(10); // Change timer rate to 10 Hz (active control rate)
 800114e:	200a      	movs	r0, #10
 8001150:	f000 fdde 	bl	8001d10 <ctrl_timer_set_rate_hz>
				}
			}

			if (!isSleeping) {
 8001154:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <main+0x1e8>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d111      	bne.n	8001180 <main+0x1c8>
				// If not sleeping, calculate and set new PWM values for detumbling control
				compute_torque(gyro_z, mag_x, mag_z, &pwm_x, &pwm_y);
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	68b9      	ldr	r1, [r7, #8]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	1cfc      	adds	r4, r7, #3
 8001164:	1cbb      	adds	r3, r7, #2
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	0023      	movs	r3, r4
 800116a:	f000 fca3 	bl	8001ab4 <compute_torque>
				set_pwm(pwm_x, pwm_y);
 800116e:	1cfb      	adds	r3, r7, #3
 8001170:	781a      	ldrb	r2, [r3, #0]
 8001172:	1cbb      	adds	r3, r7, #2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	0019      	movs	r1, r3
 8001178:	0010      	movs	r0, r2
 800117a:	f000 fd5d 	bl	8001c38 <set_pwm>
 800117e:	e003      	b.n	8001188 <main+0x1d0>
			} else {
				// If sleeping, set PWM to PWM_SLEEP
				set_pwm(PWM_SLEEP, PWM_SLEEP);
 8001180:	2101      	movs	r1, #1
 8001182:	2001      	movs	r0, #1
 8001184:	f000 fd58 	bl	8001c38 <set_pwm>
			}
		}

		// Enter sleep mode
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001188:	2101      	movs	r1, #1
 800118a:	2000      	movs	r0, #0
 800118c:	f002 f94e 	bl	800342c <HAL_PWR_EnterSLEEPMode>
		if (do_control)	// If the timer-interrupt-flag is set (true = 1), start the control cycle
 8001190:	e791      	b.n	80010b6 <main+0xfe>
 8001192:	46c0      	nop			@ (mov r8, r8)
 8001194:	2000007c 	.word	0x2000007c
 8001198:	20000110 	.word	0x20000110
 800119c:	2000010c 	.word	0x2000010c
 80011a0:	2000010d 	.word	0x2000010d
 80011a4:	20000111 	.word	0x20000111

080011a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b097      	sub	sp, #92	@ 0x5c
 80011ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ae:	2428      	movs	r4, #40	@ 0x28
 80011b0:	193b      	adds	r3, r7, r4
 80011b2:	0018      	movs	r0, r3
 80011b4:	2330      	movs	r3, #48	@ 0x30
 80011b6:	001a      	movs	r2, r3
 80011b8:	2100      	movs	r1, #0
 80011ba:	f003 fd09 	bl	8004bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011be:	2318      	movs	r3, #24
 80011c0:	18fb      	adds	r3, r7, r3
 80011c2:	0018      	movs	r0, r3
 80011c4:	2310      	movs	r3, #16
 80011c6:	001a      	movs	r2, r3
 80011c8:	2100      	movs	r1, #0
 80011ca:	f003 fd01 	bl	8004bd0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	0018      	movs	r0, r3
 80011d2:	2314      	movs	r3, #20
 80011d4:	001a      	movs	r2, r3
 80011d6:	2100      	movs	r1, #0
 80011d8:	f003 fcfa 	bl	8004bd0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011dc:	0021      	movs	r1, r4
 80011de:	187b      	adds	r3, r7, r1
 80011e0:	2202      	movs	r2, #2
 80011e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e4:	187b      	adds	r3, r7, r1
 80011e6:	2201      	movs	r2, #1
 80011e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ea:	187b      	adds	r3, r7, r1
 80011ec:	2210      	movs	r2, #16
 80011ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f0:	187b      	adds	r3, r7, r1
 80011f2:	2202      	movs	r2, #2
 80011f4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80011fc:	187b      	adds	r3, r7, r1
 80011fe:	22a0      	movs	r2, #160	@ 0xa0
 8001200:	0392      	lsls	r2, r2, #14
 8001202:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001204:	187b      	adds	r3, r7, r1
 8001206:	2200      	movs	r2, #0
 8001208:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120a:	187b      	adds	r3, r7, r1
 800120c:	0018      	movs	r0, r3
 800120e:	f002 f929 	bl	8003464 <HAL_RCC_OscConfig>
 8001212:	1e03      	subs	r3, r0, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001216:	f000 fe0f 	bl	8001e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121a:	2118      	movs	r1, #24
 800121c:	187b      	adds	r3, r7, r1
 800121e:	2207      	movs	r2, #7
 8001220:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001222:	187b      	adds	r3, r7, r1
 8001224:	2202      	movs	r2, #2
 8001226:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001228:	187b      	adds	r3, r7, r1
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800122e:	187b      	adds	r3, r7, r1
 8001230:	2200      	movs	r2, #0
 8001232:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001234:	187b      	adds	r3, r7, r1
 8001236:	2101      	movs	r1, #1
 8001238:	0018      	movs	r0, r3
 800123a:	f002 fc2d 	bl	8003a98 <HAL_RCC_ClockConfig>
 800123e:	1e03      	subs	r3, r0, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001242:	f000 fdf9 	bl	8001e38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2220      	movs	r2, #32
 800124a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	0018      	movs	r0, r3
 8001256:	f002 fd43 	bl	8003ce0 <HAL_RCCEx_PeriphCLKConfig>
 800125a:	1e03      	subs	r3, r0, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800125e:	f000 fdeb 	bl	8001e38 <Error_Handler>
  }
}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	46bd      	mov	sp, r7
 8001266:	b017      	add	sp, #92	@ 0x5c
 8001268:	bd90      	pop	{r4, r7, pc}
	...

0800126c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001270:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <MX_I2C1_Init+0x74>)
 8001272:	4a1c      	ldr	r2, [pc, #112]	@ (80012e4 <MX_I2C1_Init+0x78>)
 8001274:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8001276:	4b1a      	ldr	r3, [pc, #104]	@ (80012e0 <MX_I2C1_Init+0x74>)
 8001278:	4a1b      	ldr	r2, [pc, #108]	@ (80012e8 <MX_I2C1_Init+0x7c>)
 800127a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800127c:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <MX_I2C1_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001282:	4b17      	ldr	r3, [pc, #92]	@ (80012e0 <MX_I2C1_Init+0x74>)
 8001284:	2201      	movs	r2, #1
 8001286:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001288:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <MX_I2C1_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800128e:	4b14      	ldr	r3, [pc, #80]	@ (80012e0 <MX_I2C1_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001294:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <MX_I2C1_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129a:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <MX_I2C1_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <MX_I2C1_Init+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a6:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <MX_I2C1_Init+0x74>)
 80012a8:	0018      	movs	r0, r3
 80012aa:	f001 fa23 	bl	80026f4 <HAL_I2C_Init>
 80012ae:	1e03      	subs	r3, r0, #0
 80012b0:	d001      	beq.n	80012b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012b2:	f000 fdc1 	bl	8001e38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b6:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <MX_I2C1_Init+0x74>)
 80012b8:	2100      	movs	r1, #0
 80012ba:	0018      	movs	r0, r3
 80012bc:	f002 f81e 	bl	80032fc <HAL_I2CEx_ConfigAnalogFilter>
 80012c0:	1e03      	subs	r3, r0, #0
 80012c2:	d001      	beq.n	80012c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012c4:	f000 fdb8 	bl	8001e38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <MX_I2C1_Init+0x74>)
 80012ca:	2100      	movs	r1, #0
 80012cc:	0018      	movs	r0, r3
 80012ce:	f002 f861 	bl	8003394 <HAL_I2CEx_ConfigDigitalFilter>
 80012d2:	1e03      	subs	r3, r0, #0
 80012d4:	d001      	beq.n	80012da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012d6:	f000 fdaf 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000028 	.word	0x20000028
 80012e4:	40005400 	.word	0x40005400
 80012e8:	00201d2b 	.word	0x00201d2b

080012ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	@ 0x28
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f2:	2320      	movs	r3, #32
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	0018      	movs	r0, r3
 80012f8:	2308      	movs	r3, #8
 80012fa:	001a      	movs	r2, r3
 80012fc:	2100      	movs	r1, #0
 80012fe:	f003 fc67 	bl	8004bd0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	0018      	movs	r0, r3
 8001306:	231c      	movs	r3, #28
 8001308:	001a      	movs	r2, r3
 800130a:	2100      	movs	r1, #0
 800130c:	f003 fc60 	bl	8004bd0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  PWM_TIMER.Instance = TIM3;
 8001310:	4b29      	ldr	r3, [pc, #164]	@ (80013b8 <MX_TIM3_Init+0xcc>)
 8001312:	4a2a      	ldr	r2, [pc, #168]	@ (80013bc <MX_TIM3_Init+0xd0>)
 8001314:	601a      	str	r2, [r3, #0]
  PWM_TIMER.Init.Prescaler = 479;
 8001316:	4b28      	ldr	r3, [pc, #160]	@ (80013b8 <MX_TIM3_Init+0xcc>)
 8001318:	22e0      	movs	r2, #224	@ 0xe0
 800131a:	32ff      	adds	r2, #255	@ 0xff
 800131c:	605a      	str	r2, [r3, #4]
  PWM_TIMER.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131e:	4b26      	ldr	r3, [pc, #152]	@ (80013b8 <MX_TIM3_Init+0xcc>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  PWM_TIMER.Init.Period = 100;
 8001324:	4b24      	ldr	r3, [pc, #144]	@ (80013b8 <MX_TIM3_Init+0xcc>)
 8001326:	2264      	movs	r2, #100	@ 0x64
 8001328:	60da      	str	r2, [r3, #12]
  PWM_TIMER.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132a:	4b23      	ldr	r3, [pc, #140]	@ (80013b8 <MX_TIM3_Init+0xcc>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  PWM_TIMER.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001330:	4b21      	ldr	r3, [pc, #132]	@ (80013b8 <MX_TIM3_Init+0xcc>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&PWM_TIMER) != HAL_OK)
 8001336:	4b20      	ldr	r3, [pc, #128]	@ (80013b8 <MX_TIM3_Init+0xcc>)
 8001338:	0018      	movs	r0, r3
 800133a:	f002 fe51 	bl	8003fe0 <HAL_TIM_PWM_Init>
 800133e:	1e03      	subs	r3, r0, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001342:	f000 fd79 	bl	8001e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001346:	2120      	movs	r1, #32
 8001348:	187b      	adds	r3, r7, r1
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	187b      	adds	r3, r7, r1
 8001350:	2200      	movs	r2, #0
 8001352:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&PWM_TIMER, &sMasterConfig) != HAL_OK)
 8001354:	187a      	adds	r2, r7, r1
 8001356:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <MX_TIM3_Init+0xcc>)
 8001358:	0011      	movs	r1, r2
 800135a:	0018      	movs	r0, r3
 800135c:	f003 fbca 	bl	8004af4 <HAL_TIMEx_MasterConfigSynchronization>
 8001360:	1e03      	subs	r3, r0, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001364:	f000 fd68 	bl	8001e38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2260      	movs	r2, #96	@ 0x60
 800136c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2232      	movs	r2, #50	@ 0x32
 8001372:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&PWM_TIMER, &sConfigOC, PWM_BLUE_LED) != HAL_OK)
 8001380:	1d39      	adds	r1, r7, #4
 8001382:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <MX_TIM3_Init+0xcc>)
 8001384:	2208      	movs	r2, #8
 8001386:	0018      	movs	r0, r3
 8001388:	f003 f820 	bl	80043cc <HAL_TIM_PWM_ConfigChannel>
 800138c:	1e03      	subs	r3, r0, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8001390:	f000 fd52 	bl	8001e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&PWM_TIMER, &sConfigOC, PWM_GREEN_LED) != HAL_OK)
 8001394:	1d39      	adds	r1, r7, #4
 8001396:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <MX_TIM3_Init+0xcc>)
 8001398:	220c      	movs	r2, #12
 800139a:	0018      	movs	r0, r3
 800139c:	f003 f816 	bl	80043cc <HAL_TIM_PWM_ConfigChannel>
 80013a0:	1e03      	subs	r3, r0, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 80013a4:	f000 fd48 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&PWM_TIMER);
 80013a8:	4b03      	ldr	r3, [pc, #12]	@ (80013b8 <MX_TIM3_Init+0xcc>)
 80013aa:	0018      	movs	r0, r3
 80013ac:	f000 fe02 	bl	8001fb4 <HAL_TIM_MspPostInit>

}
 80013b0:	46c0      	nop			@ (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b00a      	add	sp, #40	@ 0x28
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000007c 	.word	0x2000007c
 80013bc:	40000400 	.word	0x40000400

080013c0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80013c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <MX_TIM14_Init+0x40>)
 80013c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001404 <MX_TIM14_Init+0x44>)
 80013c8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 47999;
 80013ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <MX_TIM14_Init+0x40>)
 80013cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001408 <MX_TIM14_Init+0x48>)
 80013ce:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <MX_TIM14_Init+0x40>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 80013d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <MX_TIM14_Init+0x40>)
 80013d8:	2263      	movs	r2, #99	@ 0x63
 80013da:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013dc:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <MX_TIM14_Init+0x40>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e2:	4b07      	ldr	r3, [pc, #28]	@ (8001400 <MX_TIM14_Init+0x40>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80013e8:	4b05      	ldr	r3, [pc, #20]	@ (8001400 <MX_TIM14_Init+0x40>)
 80013ea:	0018      	movs	r0, r3
 80013ec:	f002 fd56 	bl	8003e9c <HAL_TIM_Base_Init>
 80013f0:	1e03      	subs	r3, r0, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80013f4:	f000 fd20 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80013f8:	46c0      	nop			@ (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	46c0      	nop			@ (mov r8, r8)
 8001400:	200000c4 	.word	0x200000c4
 8001404:	40002000 	.word	0x40002000
 8001408:	0000bb7f 	.word	0x0000bb7f

0800140c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b089      	sub	sp, #36	@ 0x24
 8001410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	240c      	movs	r4, #12
 8001414:	193b      	adds	r3, r7, r4
 8001416:	0018      	movs	r0, r3
 8001418:	2314      	movs	r3, #20
 800141a:	001a      	movs	r2, r3
 800141c:	2100      	movs	r1, #0
 800141e:	f003 fbd7 	bl	8004bd0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <MX_GPIO_Init+0x94>)
 8001424:	695a      	ldr	r2, [r3, #20]
 8001426:	4b1e      	ldr	r3, [pc, #120]	@ (80014a0 <MX_GPIO_Init+0x94>)
 8001428:	2180      	movs	r1, #128	@ 0x80
 800142a:	0289      	lsls	r1, r1, #10
 800142c:	430a      	orrs	r2, r1
 800142e:	615a      	str	r2, [r3, #20]
 8001430:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <MX_GPIO_Init+0x94>)
 8001432:	695a      	ldr	r2, [r3, #20]
 8001434:	2380      	movs	r3, #128	@ 0x80
 8001436:	029b      	lsls	r3, r3, #10
 8001438:	4013      	ands	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <MX_GPIO_Init+0x94>)
 8001440:	695a      	ldr	r2, [r3, #20]
 8001442:	4b17      	ldr	r3, [pc, #92]	@ (80014a0 <MX_GPIO_Init+0x94>)
 8001444:	2180      	movs	r1, #128	@ 0x80
 8001446:	0309      	lsls	r1, r1, #12
 8001448:	430a      	orrs	r2, r1
 800144a:	615a      	str	r2, [r3, #20]
 800144c:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <MX_GPIO_Init+0x94>)
 800144e:	695a      	ldr	r2, [r3, #20]
 8001450:	2380      	movs	r3, #128	@ 0x80
 8001452:	031b      	lsls	r3, r3, #12
 8001454:	4013      	ands	r3, r2
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <MX_GPIO_Init+0x94>)
 800145c:	695a      	ldr	r2, [r3, #20]
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <MX_GPIO_Init+0x94>)
 8001460:	2180      	movs	r1, #128	@ 0x80
 8001462:	02c9      	lsls	r1, r1, #11
 8001464:	430a      	orrs	r2, r1
 8001466:	615a      	str	r2, [r3, #20]
 8001468:	4b0d      	ldr	r3, [pc, #52]	@ (80014a0 <MX_GPIO_Init+0x94>)
 800146a:	695a      	ldr	r2, [r3, #20]
 800146c:	2380      	movs	r3, #128	@ 0x80
 800146e:	02db      	lsls	r3, r3, #11
 8001470:	4013      	ands	r3, r2
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : blue_switch_Pin */
  GPIO_InitStruct.Pin = blue_switch_Pin;
 8001476:	193b      	adds	r3, r7, r4
 8001478:	2201      	movs	r2, #1
 800147a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147c:	193b      	adds	r3, r7, r4
 800147e:	2200      	movs	r2, #0
 8001480:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001482:	193b      	adds	r3, r7, r4
 8001484:	2202      	movs	r2, #2
 8001486:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(blue_switch_GPIO_Port, &GPIO_InitStruct);
 8001488:	193a      	adds	r2, r7, r4
 800148a:	2390      	movs	r3, #144	@ 0x90
 800148c:	05db      	lsls	r3, r3, #23
 800148e:	0011      	movs	r1, r2
 8001490:	0018      	movs	r0, r3
 8001492:	f000 ffa1 	bl	80023d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  	  	  // GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001496:	46c0      	nop			@ (mov r8, r8)
 8001498:	46bd      	mov	sp, r7
 800149a:	b009      	add	sp, #36	@ 0x24
 800149c:	bd90      	pop	{r4, r7, pc}
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	40021000 	.word	0x40021000

080014a4 <blink_sos_pwm>:

/* USER CODE BEGIN 4 */

// Blink "SOS" on a PWM channel in Morse code
void blink_sos_pwm(TIM_HandleTypeDef* htim, uint32_t channel)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
	// Blink "S"
  for (int i = 0; i < 3; i++) {
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	e040      	b.n	8001536 <blink_sos_pwm+0x92>
    __HAL_TIM_SET_COMPARE(htim, channel, PWM_MAX);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d104      	bne.n	80014c4 <blink_sos_pwm+0x20>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2264      	movs	r2, #100	@ 0x64
 80014c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80014c2:	e013      	b.n	80014ec <blink_sos_pwm+0x48>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d104      	bne.n	80014d4 <blink_sos_pwm+0x30>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	2364      	movs	r3, #100	@ 0x64
 80014d0:	6393      	str	r3, [r2, #56]	@ 0x38
 80014d2:	e00b      	b.n	80014ec <blink_sos_pwm+0x48>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d104      	bne.n	80014e4 <blink_sos_pwm+0x40>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	2364      	movs	r3, #100	@ 0x64
 80014e0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80014e2:	e003      	b.n	80014ec <blink_sos_pwm+0x48>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2364      	movs	r3, #100	@ 0x64
 80014ea:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_Delay(150);
 80014ec:	2096      	movs	r0, #150	@ 0x96
 80014ee:	f000 fe71 	bl	80021d4 <HAL_Delay>
    __HAL_TIM_SET_COMPARE(htim, channel, PWM_MIN);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d104      	bne.n	8001502 <blink_sos_pwm+0x5e>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2200      	movs	r2, #0
 80014fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001500:	e013      	b.n	800152a <blink_sos_pwm+0x86>
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2b04      	cmp	r3, #4
 8001506:	d104      	bne.n	8001512 <blink_sos_pwm+0x6e>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	2300      	movs	r3, #0
 800150e:	6393      	str	r3, [r2, #56]	@ 0x38
 8001510:	e00b      	b.n	800152a <blink_sos_pwm+0x86>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	2b08      	cmp	r3, #8
 8001516:	d104      	bne.n	8001522 <blink_sos_pwm+0x7e>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2300      	movs	r3, #0
 800151e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001520:	e003      	b.n	800152a <blink_sos_pwm+0x86>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	2300      	movs	r3, #0
 8001528:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_Delay(150);
 800152a:	2096      	movs	r0, #150	@ 0x96
 800152c:	f000 fe52 	bl	80021d4 <HAL_Delay>
  for (int i = 0; i < 3; i++) {
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3301      	adds	r3, #1
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2b02      	cmp	r3, #2
 800153a:	ddbb      	ble.n	80014b4 <blink_sos_pwm+0x10>
  }

  HAL_Delay(300);	// Pause between S and O
 800153c:	2396      	movs	r3, #150	@ 0x96
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	0018      	movs	r0, r3
 8001542:	f000 fe47 	bl	80021d4 <HAL_Delay>

  // Blink "O"
  for (int i = 0; i < 3; i++) {
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	e042      	b.n	80015d2 <blink_sos_pwm+0x12e>
    __HAL_TIM_SET_COMPARE(htim, channel, PWM_MAX);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d104      	bne.n	800155c <blink_sos_pwm+0xb8>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2264      	movs	r2, #100	@ 0x64
 8001558:	635a      	str	r2, [r3, #52]	@ 0x34
 800155a:	e013      	b.n	8001584 <blink_sos_pwm+0xe0>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2b04      	cmp	r3, #4
 8001560:	d104      	bne.n	800156c <blink_sos_pwm+0xc8>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	2364      	movs	r3, #100	@ 0x64
 8001568:	6393      	str	r3, [r2, #56]	@ 0x38
 800156a:	e00b      	b.n	8001584 <blink_sos_pwm+0xe0>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2b08      	cmp	r3, #8
 8001570:	d104      	bne.n	800157c <blink_sos_pwm+0xd8>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	2364      	movs	r3, #100	@ 0x64
 8001578:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800157a:	e003      	b.n	8001584 <blink_sos_pwm+0xe0>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	2364      	movs	r3, #100	@ 0x64
 8001582:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_Delay(450);
 8001584:	23e1      	movs	r3, #225	@ 0xe1
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	0018      	movs	r0, r3
 800158a:	f000 fe23 	bl	80021d4 <HAL_Delay>
    __HAL_TIM_SET_COMPARE(htim, channel, PWM_MIN);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d104      	bne.n	800159e <blink_sos_pwm+0xfa>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2200      	movs	r2, #0
 800159a:	635a      	str	r2, [r3, #52]	@ 0x34
 800159c:	e013      	b.n	80015c6 <blink_sos_pwm+0x122>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d104      	bne.n	80015ae <blink_sos_pwm+0x10a>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	2300      	movs	r3, #0
 80015aa:	6393      	str	r3, [r2, #56]	@ 0x38
 80015ac:	e00b      	b.n	80015c6 <blink_sos_pwm+0x122>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2b08      	cmp	r3, #8
 80015b2:	d104      	bne.n	80015be <blink_sos_pwm+0x11a>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	2300      	movs	r3, #0
 80015ba:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80015bc:	e003      	b.n	80015c6 <blink_sos_pwm+0x122>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	2300      	movs	r3, #0
 80015c4:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_Delay(150);
 80015c6:	2096      	movs	r0, #150	@ 0x96
 80015c8:	f000 fe04 	bl	80021d4 <HAL_Delay>
  for (int i = 0; i < 3; i++) {
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	3301      	adds	r3, #1
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	ddb9      	ble.n	800154c <blink_sos_pwm+0xa8>
  }

  HAL_Delay(300);	// Pause between O and final S
 80015d8:	2396      	movs	r3, #150	@ 0x96
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	0018      	movs	r0, r3
 80015de:	f000 fdf9 	bl	80021d4 <HAL_Delay>

  // Blink "S"
  for (int i = 0; i < 3; i++) {
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	e040      	b.n	800166a <blink_sos_pwm+0x1c6>
    __HAL_TIM_SET_COMPARE(htim, channel, PWM_MAX);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d104      	bne.n	80015f8 <blink_sos_pwm+0x154>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2264      	movs	r2, #100	@ 0x64
 80015f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80015f6:	e013      	b.n	8001620 <blink_sos_pwm+0x17c>
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	d104      	bne.n	8001608 <blink_sos_pwm+0x164>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	2364      	movs	r3, #100	@ 0x64
 8001604:	6393      	str	r3, [r2, #56]	@ 0x38
 8001606:	e00b      	b.n	8001620 <blink_sos_pwm+0x17c>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	2b08      	cmp	r3, #8
 800160c:	d104      	bne.n	8001618 <blink_sos_pwm+0x174>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	2364      	movs	r3, #100	@ 0x64
 8001614:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001616:	e003      	b.n	8001620 <blink_sos_pwm+0x17c>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	2364      	movs	r3, #100	@ 0x64
 800161e:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_Delay(150);
 8001620:	2096      	movs	r0, #150	@ 0x96
 8001622:	f000 fdd7 	bl	80021d4 <HAL_Delay>
    __HAL_TIM_SET_COMPARE(htim, channel, PWM_MIN);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d104      	bne.n	8001636 <blink_sos_pwm+0x192>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2200      	movs	r2, #0
 8001632:	635a      	str	r2, [r3, #52]	@ 0x34
 8001634:	e013      	b.n	800165e <blink_sos_pwm+0x1ba>
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	2b04      	cmp	r3, #4
 800163a:	d104      	bne.n	8001646 <blink_sos_pwm+0x1a2>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2300      	movs	r3, #0
 8001642:	6393      	str	r3, [r2, #56]	@ 0x38
 8001644:	e00b      	b.n	800165e <blink_sos_pwm+0x1ba>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	2b08      	cmp	r3, #8
 800164a:	d104      	bne.n	8001656 <blink_sos_pwm+0x1b2>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	2300      	movs	r3, #0
 8001652:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001654:	e003      	b.n	800165e <blink_sos_pwm+0x1ba>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	2300      	movs	r3, #0
 800165c:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_Delay(150);
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	f000 fdb8 	bl	80021d4 <HAL_Delay>
  for (int i = 0; i < 3; i++) {
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	3301      	adds	r3, #1
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2b02      	cmp	r3, #2
 800166e:	ddbb      	ble.n	80015e8 <blink_sos_pwm+0x144>
  }

  // Set channel back to PWM_NEUTRAL
  __HAL_TIM_SET_COMPARE(htim, channel, PWM_NEUTRAL);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d104      	bne.n	8001680 <blink_sos_pwm+0x1dc>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2232      	movs	r2, #50	@ 0x32
 800167c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800167e:	e013      	b.n	80016a8 <blink_sos_pwm+0x204>
  __HAL_TIM_SET_COMPARE(htim, channel, PWM_NEUTRAL);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b04      	cmp	r3, #4
 8001684:	d104      	bne.n	8001690 <blink_sos_pwm+0x1ec>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	2332      	movs	r3, #50	@ 0x32
 800168c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800168e:	e00b      	b.n	80016a8 <blink_sos_pwm+0x204>
  __HAL_TIM_SET_COMPARE(htim, channel, PWM_NEUTRAL);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	2b08      	cmp	r3, #8
 8001694:	d104      	bne.n	80016a0 <blink_sos_pwm+0x1fc>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2332      	movs	r3, #50	@ 0x32
 800169c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800169e:	e003      	b.n	80016a8 <blink_sos_pwm+0x204>
  __HAL_TIM_SET_COMPARE(htim, channel, PWM_NEUTRAL);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	2332      	movs	r3, #50	@ 0x32
 80016a6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80016a8:	46c0      	nop			@ (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b006      	add	sp, #24
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <check_gyro>:


// Checks if the FXAS21002 gyroscope sensor is connected and responding correctly over I2C
// Returns 1 if the correct sensor is detected, 0 otherwise
uint8_t check_gyro(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af04      	add	r7, sp, #16
  uint8_t fxas_addr = 0x21 << 1;	// I2C address for FXAS21002 (SA0 = HIGH), shifted left for HAL
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	2242      	movs	r2, #66	@ 0x42
 80016ba:	701a      	strb	r2, [r3, #0]
  uint8_t reg_addr = 0x0C;			// WHO_AM_I register address
 80016bc:	1dbb      	adds	r3, r7, #6
 80016be:	220c      	movs	r2, #12
 80016c0:	701a      	strb	r2, [r3, #0]
  uint8_t id = 0;					// Variable to store sensor ID
 80016c2:	1d7b      	adds	r3, r7, #5
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]

  // Read 1 byte from the WHO_AM_I register of the sensor
  if (HAL_I2C_Mem_Read(&hi2c1, fxas_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, &id, 1, 100) != HAL_OK)
 80016c8:	1dfb      	adds	r3, r7, #7
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b299      	uxth	r1, r3
 80016ce:	1dbb      	adds	r3, r7, #6
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	480c      	ldr	r0, [pc, #48]	@ (8001708 <check_gyro+0x58>)
 80016d6:	2364      	movs	r3, #100	@ 0x64
 80016d8:	9302      	str	r3, [sp, #8]
 80016da:	2301      	movs	r3, #1
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	1d7b      	adds	r3, r7, #5
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	2301      	movs	r3, #1
 80016e4:	f001 f9da 	bl	8002a9c <HAL_I2C_Mem_Read>
 80016e8:	1e03      	subs	r3, r0, #0
 80016ea:	d001      	beq.n	80016f0 <check_gyro+0x40>
  {
    return 0;  // I2C read failed (no response or bus error)
 80016ec:	2300      	movs	r3, #0
 80016ee:	e006      	b.n	80016fe <check_gyro+0x4e>
  }

  // Check if the returned ID matches the expected value for FXAS21002 (0xD7)
  if (id == 0xD7)
 80016f0:	1d7b      	adds	r3, r7, #5
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2bd7      	cmp	r3, #215	@ 0xd7
 80016f6:	d101      	bne.n	80016fc <check_gyro+0x4c>
  {
    return 1;  // Sensor is present and correct
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <check_gyro+0x4e>
  }

  return 0;  // Received a different ID; wrong device or communication error
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	0018      	movs	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	b002      	add	sp, #8
 8001704:	bd80      	pop	{r7, pc}
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	20000028 	.word	0x20000028

0800170c <check_magnetometer>:


// Checks if the FXOS8700 sensor is connected and responding correctly over I2C
// Returns 1 if the correct sensor is detected, 0 otherwise
uint8_t check_magnetometer(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af04      	add	r7, sp, #16
  uint8_t fxos_addr = 0x1F << 1;  	// I2C address of FXOS8700 (SA0 = 1), shifted left for HAL
 8001712:	1dfb      	adds	r3, r7, #7
 8001714:	223e      	movs	r2, #62	@ 0x3e
 8001716:	701a      	strb	r2, [r3, #0]
  uint8_t reg_addr = 0x0D;      	// Address of the WHO_AM_I register
 8001718:	1dbb      	adds	r3, r7, #6
 800171a:	220d      	movs	r2, #13
 800171c:	701a      	strb	r2, [r3, #0]
  uint8_t id = 0;					// Variable to store the sensor ID
 800171e:	1d7b      	adds	r3, r7, #5
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]

  // Read 1 byte from the WHO_AM_I register of the sensor
  if (HAL_I2C_Mem_Read(&hi2c1, fxos_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, &id, 1, 100) != HAL_OK)
 8001724:	1dfb      	adds	r3, r7, #7
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b299      	uxth	r1, r3
 800172a:	1dbb      	adds	r3, r7, #6
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b29a      	uxth	r2, r3
 8001730:	480c      	ldr	r0, [pc, #48]	@ (8001764 <check_magnetometer+0x58>)
 8001732:	2364      	movs	r3, #100	@ 0x64
 8001734:	9302      	str	r3, [sp, #8]
 8001736:	2301      	movs	r3, #1
 8001738:	9301      	str	r3, [sp, #4]
 800173a:	1d7b      	adds	r3, r7, #5
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	2301      	movs	r3, #1
 8001740:	f001 f9ac 	bl	8002a9c <HAL_I2C_Mem_Read>
 8001744:	1e03      	subs	r3, r0, #0
 8001746:	d001      	beq.n	800174c <check_magnetometer+0x40>
  {
    return 0;  // I2C read failed (no response or bus error)
 8001748:	2300      	movs	r3, #0
 800174a:	e006      	b.n	800175a <check_magnetometer+0x4e>
  }

  // Check if the received ID matches the expected value for FXOS8700 (0xC7)
  if (id == 0xC7)
 800174c:	1d7b      	adds	r3, r7, #5
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2bc7      	cmp	r3, #199	@ 0xc7
 8001752:	d101      	bne.n	8001758 <check_magnetometer+0x4c>
  {
    return 1;  // Sensor is present and correct
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <check_magnetometer+0x4e>
  }

  return 0;  // Received a different ID; wrong device or communication error
 8001758:	2300      	movs	r3, #0
}
 800175a:	0018      	movs	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	b002      	add	sp, #8
 8001760:	bd80      	pop	{r7, pc}
 8001762:	46c0      	nop			@ (mov r8, r8)
 8001764:	20000028 	.word	0x20000028

08001768 <init_gyro>:


// Initialises the FXAS21002 gyroscope sensor via I2C
// Configures sensor in standby mode, sets measurement range and activates the sensor
void init_gyro(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af04      	add	r7, sp, #16
    const uint8_t fxas_addr = 0x21 << 1;  // I2C address of FXAS21002 (SA0 = HIGH)
 800176e:	1dfb      	adds	r3, r7, #7
 8001770:	2242      	movs	r2, #66	@ 0x42
 8001772:	701a      	strb	r2, [r3, #0]

    // Set gyroscope to standby mode with a data rate of 50 Hz (DR=100), ACTIVE=0.
    // Value 0x10 = 0b00010000 written to CTRL_REG1 (0x13)
    uint8_t ctrl_reg1_standby = 0x10;
 8001774:	1dbb      	adds	r3, r7, #6
 8001776:	2210      	movs	r2, #16
 8001778:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, fxas_addr, 0x13, I2C_MEMADD_SIZE_8BIT, &ctrl_reg1_standby, 1, 100);
 800177a:	1dfb      	adds	r3, r7, #7
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b299      	uxth	r1, r3
 8001780:	481c      	ldr	r0, [pc, #112]	@ (80017f4 <init_gyro+0x8c>)
 8001782:	2364      	movs	r3, #100	@ 0x64
 8001784:	9302      	str	r3, [sp, #8]
 8001786:	2301      	movs	r3, #1
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	1dbb      	adds	r3, r7, #6
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2301      	movs	r3, #1
 8001790:	2213      	movs	r2, #19
 8001792:	f001 f855 	bl	8002840 <HAL_I2C_Mem_Write>
    HAL_Delay(5); // Delay for register update
 8001796:	2005      	movs	r0, #5
 8001798:	f000 fd1c 	bl	80021d4 <HAL_Delay>

    // Set measurement range to +-250 dps and enable BW=01 for ~8 Hz LPF at 50 Hz ODR
    // Value 0x43 = 0b00000011 written to CTRL_REG0 (0x0D), FS1 = 1, FS0 = 1
    uint8_t ctrl_reg0 = 0x43;
 800179c:	1d7b      	adds	r3, r7, #5
 800179e:	2243      	movs	r2, #67	@ 0x43
 80017a0:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, fxas_addr, 0x0D, I2C_MEMADD_SIZE_8BIT, &ctrl_reg0, 1, 100);
 80017a2:	1dfb      	adds	r3, r7, #7
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	b299      	uxth	r1, r3
 80017a8:	4812      	ldr	r0, [pc, #72]	@ (80017f4 <init_gyro+0x8c>)
 80017aa:	2364      	movs	r3, #100	@ 0x64
 80017ac:	9302      	str	r3, [sp, #8]
 80017ae:	2301      	movs	r3, #1
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	1d7b      	adds	r3, r7, #5
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2301      	movs	r3, #1
 80017b8:	220d      	movs	r2, #13
 80017ba:	f001 f841 	bl	8002840 <HAL_I2C_Mem_Write>
    HAL_Delay(5);
 80017be:	2005      	movs	r0, #5
 80017c0:	f000 fd08 	bl	80021d4 <HAL_Delay>


    // Activate the sensor by setting ACTIVE=1 with the same data rate (DR=100)
    // Value 0x12 = 0b00010010 written to CTRL_REG1 (0x13)
    uint8_t ctrl_reg1_active = 0x12;
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	2212      	movs	r2, #18
 80017c8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, fxas_addr, 0x13, I2C_MEMADD_SIZE_8BIT, &ctrl_reg1_active, 1, 100);
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b299      	uxth	r1, r3
 80017d0:	4808      	ldr	r0, [pc, #32]	@ (80017f4 <init_gyro+0x8c>)
 80017d2:	2364      	movs	r3, #100	@ 0x64
 80017d4:	9302      	str	r3, [sp, #8]
 80017d6:	2301      	movs	r3, #1
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	2301      	movs	r3, #1
 80017e0:	2213      	movs	r2, #19
 80017e2:	f001 f82d 	bl	8002840 <HAL_I2C_Mem_Write>

    // Allow time for first valid sample after activation
    HAL_Delay(80);
 80017e6:	2050      	movs	r0, #80	@ 0x50
 80017e8:	f000 fcf4 	bl	80021d4 <HAL_Delay>
}
 80017ec:	46c0      	nop			@ (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b002      	add	sp, #8
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000028 	.word	0x20000028

080017f8 <init_magnetometer>:


// Initialises the FXOS8700 sensor via I2C
// Configures sensor in standby, enables MAG-only mode with high OSR, and activates at 12.5 Hz (low-noise).
void init_magnetometer(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af04      	add	r7, sp, #16
    uint8_t fxos_addr = 0x1F << 1;  // I2C address of FXOS8700 (SA0 = HIGH)
 80017fe:	1dfb      	adds	r3, r7, #7
 8001800:	223e      	movs	r2, #62	@ 0x3e
 8001802:	701a      	strb	r2, [r3, #0]

    // Set standby mode (CTRL_REG1 = 0x00)
    // Value 0x00 = 0b00000000 disables all activity.
    uint8_t standby = 0x00;
 8001804:	1dbb      	adds	r3, r7, #6
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, fxos_addr, 0x2A, I2C_MEMADD_SIZE_8BIT, &standby, 1, 100);
 800180a:	1dfb      	adds	r3, r7, #7
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	b299      	uxth	r1, r3
 8001810:	481c      	ldr	r0, [pc, #112]	@ (8001884 <init_magnetometer+0x8c>)
 8001812:	2364      	movs	r3, #100	@ 0x64
 8001814:	9302      	str	r3, [sp, #8]
 8001816:	2301      	movs	r3, #1
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	1dbb      	adds	r3, r7, #6
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2301      	movs	r3, #1
 8001820:	222a      	movs	r2, #42	@ 0x2a
 8001822:	f001 f80d 	bl	8002840 <HAL_I2C_Mem_Write>
    HAL_Delay(100); // Conservative delay to allow settings to take effect
 8001826:	2064      	movs	r0, #100	@ 0x64
 8001828:	f000 fcd4 	bl	80021d4 <HAL_Delay>

    // Configure magnetometer: M_CTRL_REG1 = 0x1D
    // Value 0x1D = 0b00011101, HMS=01 (MAG-only mode), OSR=111 (8x oversampling) for lower noise.
    uint8_t mctrl1 = 0x1D;
 800182c:	1d7b      	adds	r3, r7, #5
 800182e:	221d      	movs	r2, #29
 8001830:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, fxos_addr, 0x5B, I2C_MEMADD_SIZE_8BIT, &mctrl1, 1, 100);
 8001832:	1dfb      	adds	r3, r7, #7
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b299      	uxth	r1, r3
 8001838:	4812      	ldr	r0, [pc, #72]	@ (8001884 <init_magnetometer+0x8c>)
 800183a:	2364      	movs	r3, #100	@ 0x64
 800183c:	9302      	str	r3, [sp, #8]
 800183e:	2301      	movs	r3, #1
 8001840:	9301      	str	r3, [sp, #4]
 8001842:	1d7b      	adds	r3, r7, #5
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	2301      	movs	r3, #1
 8001848:	225b      	movs	r2, #91	@ 0x5b
 800184a:	f000 fff9 	bl	8002840 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 800184e:	2064      	movs	r0, #100	@ 0x64
 8001850:	f000 fcc0 	bl	80021d4 <HAL_Delay>

    // Set to active mode: CTRL_REG1 = 0x2D
    // Value 0x2D = 0b00101101, DR=101 (12.5 Hz in MAG-only), LNOISE=1 (low noise), ACTIVE=1.
    uint8_t active = 0x2D;
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	222d      	movs	r2, #45	@ 0x2d
 8001858:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, fxos_addr, 0x2A, I2C_MEMADD_SIZE_8BIT, &active, 1, 100);
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	b299      	uxth	r1, r3
 8001860:	4808      	ldr	r0, [pc, #32]	@ (8001884 <init_magnetometer+0x8c>)
 8001862:	2364      	movs	r3, #100	@ 0x64
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	2301      	movs	r3, #1
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2301      	movs	r3, #1
 8001870:	222a      	movs	r2, #42	@ 0x2a
 8001872:	f000 ffe5 	bl	8002840 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8001876:	2064      	movs	r0, #100	@ 0x64
 8001878:	f000 fcac 	bl	80021d4 <HAL_Delay>
}
 800187c:	46c0      	nop			@ (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	b002      	add	sp, #8
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000028 	.word	0x20000028

08001888 <read_gyro>:

// Reads the Z-axis angular rate from the FXAS21002 gyroscope via I2C
// Stores the angular rate in degrees per second in the variable pointed to by gyro_z
// Returns 0.0f if there is a communication error or if no new data is available
void read_gyro(float* gyro_z) // FXAS21002C
{
 8001888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188a:	b08b      	sub	sp, #44	@ 0x2c
 800188c:	af04      	add	r7, sp, #16
 800188e:	6078      	str	r0, [r7, #4]
    const uint8_t fxas_addr = 0x21 << 1;	// I2C address of FXAS21002 (SA0 = HIGH)
 8001890:	2417      	movs	r4, #23
 8001892:	193b      	adds	r3, r7, r4
 8001894:	2242      	movs	r2, #66	@ 0x42
 8001896:	701a      	strb	r2, [r3, #0]
    const uint8_t reg_status = 0x00;		// Address of the STATUS register
 8001898:	2516      	movs	r5, #22
 800189a:	197b      	adds	r3, r7, r5
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
    const uint8_t reg_gyro_x_msb = 0x01;	// Address of the first gyro data register (X_MSB)
 80018a0:	2315      	movs	r3, #21
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]

    uint8_t status = 0;			// Variable to store the STATUS register value
 80018a8:	2611      	movs	r6, #17
 80018aa:	19bb      	adds	r3, r7, r6
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
    uint8_t data[6] = {0};  	// Buffer for 6 bytes: X_MSB, X_LSB, Y_MSB, Y_LSB, Z_MSB, Z_LSB
 80018b0:	2308      	movs	r3, #8
 80018b2:	18fb      	adds	r3, r7, r3
 80018b4:	0018      	movs	r0, r3
 80018b6:	2306      	movs	r3, #6
 80018b8:	001a      	movs	r2, r3
 80018ba:	2100      	movs	r1, #0
 80018bc:	f003 f988 	bl	8004bd0 <memset>

    // Read the STATUS register to check if new data is available
    if (HAL_I2C_Mem_Read(&hi2c1, fxas_addr, reg_status, I2C_MEMADD_SIZE_8BIT, &status, 1, 100) != HAL_OK)
 80018c0:	193b      	adds	r3, r7, r4
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	b299      	uxth	r1, r3
 80018c6:	197b      	adds	r3, r7, r5
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	4829      	ldr	r0, [pc, #164]	@ (8001974 <read_gyro+0xec>)
 80018ce:	2364      	movs	r3, #100	@ 0x64
 80018d0:	9302      	str	r3, [sp, #8]
 80018d2:	2301      	movs	r3, #1
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	19bb      	adds	r3, r7, r6
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2301      	movs	r3, #1
 80018dc:	f001 f8de 	bl	8002a9c <HAL_I2C_Mem_Read>
 80018e0:	1e03      	subs	r3, r0, #0
 80018e2:	d003      	beq.n	80018ec <read_gyro+0x64>
    {
        *gyro_z = 0.0f;		// I2C read failed
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
        return;
 80018ea:	e040      	b.n	800196e <read_gyro+0xe6>
    }

    // Check if new data for all axes is available (ZYXDR bit, bit 3 must be set)
    if ((status & 0x08) == 0)
 80018ec:	2311      	movs	r3, #17
 80018ee:	18fb      	adds	r3, r7, r3
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	001a      	movs	r2, r3
 80018f4:	2308      	movs	r3, #8
 80018f6:	4013      	ands	r3, r2
 80018f8:	d103      	bne.n	8001902 <read_gyro+0x7a>
    {
        *gyro_z = 0.0f;		// No new data available
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
        return;
 8001900:	e035      	b.n	800196e <read_gyro+0xe6>
    }

    // Read 6 bytes of gyro data (X_MSB, X_LSB, Y_MSB, Y_LSB, Z_MSB, Z_LSB)
    if (HAL_I2C_Mem_Read(&hi2c1, fxas_addr, reg_gyro_x_msb, I2C_MEMADD_SIZE_8BIT, data, 6, 100) != HAL_OK)
 8001902:	2317      	movs	r3, #23
 8001904:	18fb      	adds	r3, r7, r3
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	b299      	uxth	r1, r3
 800190a:	2315      	movs	r3, #21
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b29a      	uxth	r2, r3
 8001912:	4818      	ldr	r0, [pc, #96]	@ (8001974 <read_gyro+0xec>)
 8001914:	2364      	movs	r3, #100	@ 0x64
 8001916:	9302      	str	r3, [sp, #8]
 8001918:	2306      	movs	r3, #6
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	2308      	movs	r3, #8
 800191e:	18fb      	adds	r3, r7, r3
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2301      	movs	r3, #1
 8001924:	f001 f8ba 	bl	8002a9c <HAL_I2C_Mem_Read>
 8001928:	1e03      	subs	r3, r0, #0
 800192a:	d003      	beq.n	8001934 <read_gyro+0xac>
    {
        *gyro_z = 0.0f;		// I2C read failed
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
        return;
 8001932:	e01c      	b.n	800196e <read_gyro+0xe6>
    }

    // Combine Z_MSB and Z_LSB to get the raw Z-axis value (16-bit signed integer)
    int16_t raw_z = (int16_t)((data[4] << 8) | data[5]);
 8001934:	2208      	movs	r2, #8
 8001936:	18bb      	adds	r3, r7, r2
 8001938:	791b      	ldrb	r3, [r3, #4]
 800193a:	b21b      	sxth	r3, r3
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	b219      	sxth	r1, r3
 8001940:	18bb      	adds	r3, r7, r2
 8001942:	795b      	ldrb	r3, [r3, #5]
 8001944:	b21a      	sxth	r2, r3
 8001946:	2012      	movs	r0, #18
 8001948:	183b      	adds	r3, r7, r0
 800194a:	430a      	orrs	r2, r1
 800194c:	801a      	strh	r2, [r3, #0]

    // Convert the raw value to degrees per second (7.8125 mdps/LSB = 0.0078125 dps/LSB)
    *gyro_z = raw_z * 0.0078125f;
 800194e:	183b      	adds	r3, r7, r0
 8001950:	2200      	movs	r2, #0
 8001952:	5e9b      	ldrsh	r3, [r3, r2]
 8001954:	0018      	movs	r0, r3
 8001956:	f7ff fac1 	bl	8000edc <__aeabi_i2f>
 800195a:	1c03      	adds	r3, r0, #0
 800195c:	21f0      	movs	r1, #240	@ 0xf0
 800195e:	0589      	lsls	r1, r1, #22
 8001960:	1c18      	adds	r0, r3, #0
 8001962:	f7ff f941 	bl	8000be8 <__aeabi_fmul>
 8001966:	1c03      	adds	r3, r0, #0
 8001968:	1c1a      	adds	r2, r3, #0
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	601a      	str	r2, [r3, #0]
}
 800196e:	46bd      	mov	sp, r7
 8001970:	b007      	add	sp, #28
 8001972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001974:	20000028 	.word	0x20000028

08001978 <read_magnetometer>:

// Reads the X and Z components of the magnetic field from the FXOS8700 sensor via I2C
// Stores the 16-bit signed values in mag_x and mag_z (LSB units)
// Sets both to 0 if no new data is available or if a communication error occurs
void read_magnetometer(float* mag_x, float* mag_z) // fxos8700
{
 8001978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197a:	b08b      	sub	sp, #44	@ 0x2c
 800197c:	af04      	add	r7, sp, #16
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
    const uint8_t fxos_addr = 0x1F << 1;	// I2C address of FXOS8700 (SA0 = HIGH)
 8001982:	2417      	movs	r4, #23
 8001984:	193b      	adds	r3, r7, r4
 8001986:	223e      	movs	r2, #62	@ 0x3e
 8001988:	701a      	strb	r2, [r3, #0]
    const uint8_t reg_status = 0x32;		// Address of the STATUS register
 800198a:	2516      	movs	r5, #22
 800198c:	197b      	adds	r3, r7, r5
 800198e:	2232      	movs	r2, #50	@ 0x32
 8001990:	701a      	strb	r2, [r3, #0]
    const uint8_t reg_mag_x_msb = 0x33;		// Address of the first magnetometer data register (X_MSB)
 8001992:	2315      	movs	r3, #21
 8001994:	18fb      	adds	r3, r7, r3
 8001996:	2233      	movs	r2, #51	@ 0x33
 8001998:	701a      	strb	r2, [r3, #0]

    uint8_t status = 0;			// Variable to store the STATUS register value
 800199a:	260f      	movs	r6, #15
 800199c:	19bb      	adds	r3, r7, r6
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
    uint8_t data[6] = {0};  	// Buffer for 6 bytes: X_MSB, X_LSB, Y_MSB, Y_LSB, Z_MSB, Z_LSB
 80019a2:	2308      	movs	r3, #8
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	0018      	movs	r0, r3
 80019a8:	2306      	movs	r3, #6
 80019aa:	001a      	movs	r2, r3
 80019ac:	2100      	movs	r1, #0
 80019ae:	f003 f90f 	bl	8004bd0 <memset>

    // Read the STATUS register to check if new data is available
    if (HAL_I2C_Mem_Read(&hi2c1, fxos_addr, reg_status, I2C_MEMADD_SIZE_8BIT, &status, 1, 100) != HAL_OK)
 80019b2:	193b      	adds	r3, r7, r4
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b299      	uxth	r1, r3
 80019b8:	197b      	adds	r3, r7, r5
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b29a      	uxth	r2, r3
 80019be:	483b      	ldr	r0, [pc, #236]	@ (8001aac <read_magnetometer+0x134>)
 80019c0:	2364      	movs	r3, #100	@ 0x64
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	2301      	movs	r3, #1
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	19bb      	adds	r3, r7, r6
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2301      	movs	r3, #1
 80019ce:	f001 f865 	bl	8002a9c <HAL_I2C_Mem_Read>
 80019d2:	1e03      	subs	r3, r0, #0
 80019d4:	d006      	beq.n	80019e4 <read_magnetometer+0x6c>
    {
        *mag_x = 0;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
        *mag_z = 0;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
        return;		// I2C read failed
 80019e2:	e060      	b.n	8001aa6 <read_magnetometer+0x12e>
    }

    // Check if new magnetometer data for all axes is available (ZYXDR bit, bit 3 must be set)
    if ((status & 0x08) == 0)
 80019e4:	230f      	movs	r3, #15
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	001a      	movs	r2, r3
 80019ec:	2308      	movs	r3, #8
 80019ee:	4013      	ands	r3, r2
 80019f0:	d106      	bne.n	8001a00 <read_magnetometer+0x88>
    {
        *mag_x = 0;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
        *mag_z = 0;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
        return;		// No new data available
 80019fe:	e052      	b.n	8001aa6 <read_magnetometer+0x12e>
    }

    // Read 6 bytes of magnetometer data (X_MSB, X_LSB, Y_MSB, Y_LSB, Z_MSB, Z_LSB)
    if (HAL_I2C_Mem_Read(&hi2c1, fxos_addr, reg_mag_x_msb, I2C_MEMADD_SIZE_8BIT, data, 6, 100) != HAL_OK)
 8001a00:	2317      	movs	r3, #23
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	b299      	uxth	r1, r3
 8001a08:	2315      	movs	r3, #21
 8001a0a:	18fb      	adds	r3, r7, r3
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	4826      	ldr	r0, [pc, #152]	@ (8001aac <read_magnetometer+0x134>)
 8001a12:	2364      	movs	r3, #100	@ 0x64
 8001a14:	9302      	str	r3, [sp, #8]
 8001a16:	2306      	movs	r3, #6
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	2308      	movs	r3, #8
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2301      	movs	r3, #1
 8001a22:	f001 f83b 	bl	8002a9c <HAL_I2C_Mem_Read>
 8001a26:	1e03      	subs	r3, r0, #0
 8001a28:	d006      	beq.n	8001a38 <read_magnetometer+0xc0>
    {
        *mag_x = 0;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
        *mag_z = 0;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
        return;		// I2C read failed
 8001a36:	e036      	b.n	8001aa6 <read_magnetometer+0x12e>
    }

    // Combine MSB/LSB to raw data
    int16_t raw_x = (int16_t)((data[0] << 8) | data[1]);
 8001a38:	2008      	movs	r0, #8
 8001a3a:	183b      	adds	r3, r7, r0
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	b219      	sxth	r1, r3
 8001a44:	183b      	adds	r3, r7, r0
 8001a46:	785b      	ldrb	r3, [r3, #1]
 8001a48:	b21a      	sxth	r2, r3
 8001a4a:	2412      	movs	r4, #18
 8001a4c:	193b      	adds	r3, r7, r4
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	801a      	strh	r2, [r3, #0]
    int16_t raw_z = (int16_t)((data[4] << 8) | data[5]);
 8001a52:	183b      	adds	r3, r7, r0
 8001a54:	791b      	ldrb	r3, [r3, #4]
 8001a56:	b21b      	sxth	r3, r3
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	b219      	sxth	r1, r3
 8001a5c:	183b      	adds	r3, r7, r0
 8001a5e:	795b      	ldrb	r3, [r3, #5]
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	2510      	movs	r5, #16
 8001a64:	197b      	adds	r3, r7, r5
 8001a66:	430a      	orrs	r2, r1
 8001a68:	801a      	strh	r2, [r3, #0]

    *mag_x = raw_x * 0.1f;	// [muT/LSB]
 8001a6a:	193b      	adds	r3, r7, r4
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	5e9b      	ldrsh	r3, [r3, r2]
 8001a70:	0018      	movs	r0, r3
 8001a72:	f7ff fa33 	bl	8000edc <__aeabi_i2f>
 8001a76:	1c03      	adds	r3, r0, #0
 8001a78:	490d      	ldr	r1, [pc, #52]	@ (8001ab0 <read_magnetometer+0x138>)
 8001a7a:	1c18      	adds	r0, r3, #0
 8001a7c:	f7ff f8b4 	bl	8000be8 <__aeabi_fmul>
 8001a80:	1c03      	adds	r3, r0, #0
 8001a82:	1c1a      	adds	r2, r3, #0
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	601a      	str	r2, [r3, #0]
    *mag_z = raw_z * 0.1f;
 8001a88:	197b      	adds	r3, r7, r5
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	5e9b      	ldrsh	r3, [r3, r2]
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f7ff fa24 	bl	8000edc <__aeabi_i2f>
 8001a94:	1c03      	adds	r3, r0, #0
 8001a96:	4906      	ldr	r1, [pc, #24]	@ (8001ab0 <read_magnetometer+0x138>)
 8001a98:	1c18      	adds	r0, r3, #0
 8001a9a:	f7ff f8a5 	bl	8000be8 <__aeabi_fmul>
 8001a9e:	1c03      	adds	r3, r0, #0
 8001aa0:	1c1a      	adds	r2, r3, #0
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	601a      	str	r2, [r3, #0]

}
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b007      	add	sp, #28
 8001aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aac:	20000028 	.word	0x20000028
 8001ab0:	3dcccccd 	.word	0x3dcccccd

08001ab4 <compute_torque>:

// Computes PWM commands for 2D detumbling using a PI controller.
// Input:  gyro_z [deg/s], magnetic field values mag_x, mag_z.
// Output: pwm_x, pwm_y in [0,100] with neutral at PWM_NEUTRAL.
void compute_torque(float gyro_z, float mag_x, float mag_z, uint8_t* pwm_x, uint8_t* pwm_y)
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b091      	sub	sp, #68	@ 0x44
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
    // Deadband to ignore gyro noise
    const float threshold = 0.1f;        // [deg/s]
 8001ac2:	4b57      	ldr	r3, [pc, #348]	@ (8001c20 <compute_torque+0x16c>)
 8001ac4:	637b      	str	r3, [r7, #52]	@ 0x34

    // Controller parameters
    const float Ts = 0.1f;               // [s] control loop sample time (10 Hz)
 8001ac6:	4b56      	ldr	r3, [pc, #344]	@ (8001c20 <compute_torque+0x16c>)
 8001ac8:	633b      	str	r3, [r7, #48]	@ 0x30
    const float Kp = 0.05f;              // proportional gain
 8001aca:	4b56      	ldr	r3, [pc, #344]	@ (8001c24 <compute_torque+0x170>)
 8001acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const float Ti = 8.0f;               // [s] integral time constant (tunable)
 8001ace:	2382      	movs	r3, #130	@ 0x82
 8001ad0:	05db      	lsls	r3, r3, #23
 8001ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
    const float Ki = Kp / Ti;    		 // integral gain
 8001ad4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ad6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001ad8:	f7fe feb8 	bl	800084c <__aeabi_fdiv>
 8001adc:	1c03      	adds	r3, r0, #0
 8001ade:	627b      	str	r3, [r7, #36]	@ 0x24

    // Integrator state
    static float e_int = 0.0f;

    // If below noise threshold, command neutral PWM (no actuation)
    if (fabsf(gyro_z) < threshold) {
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	085b      	lsrs	r3, r3, #1
 8001ae6:	1c19      	adds	r1, r3, #0
 8001ae8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001aea:	f7fe fca9 	bl	8000440 <__aeabi_fcmpgt>
 8001aee:	1e03      	subs	r3, r0, #0
 8001af0:	d006      	beq.n	8001b00 <compute_torque+0x4c>
        *pwm_x = PWM_NEUTRAL;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2232      	movs	r2, #50	@ 0x32
 8001af6:	701a      	strb	r2, [r3, #0]
        *pwm_y = PWM_NEUTRAL;
 8001af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001afa:	2232      	movs	r2, #50	@ 0x32
 8001afc:	701a      	strb	r2, [r3, #0]
        return;
 8001afe:	e08b      	b.n	8001c18 <compute_torque+0x164>
    }

    // PI control on z-rate (target omega_z = 0): e = -gyro_z
    const float e = -gyro_z;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2280      	movs	r2, #128	@ 0x80
 8001b04:	0612      	lsls	r2, r2, #24
 8001b06:	4053      	eors	r3, r2
 8001b08:	623b      	str	r3, [r7, #32]

    // Integrator with simple clamping (anti-windup)
    e_int += e * Ts;
 8001b0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001b0c:	6a38      	ldr	r0, [r7, #32]
 8001b0e:	f7ff f86b 	bl	8000be8 <__aeabi_fmul>
 8001b12:	1c03      	adds	r3, r0, #0
 8001b14:	1c1a      	adds	r2, r3, #0
 8001b16:	4b44      	ldr	r3, [pc, #272]	@ (8001c28 <compute_torque+0x174>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	1c19      	adds	r1, r3, #0
 8001b1c:	1c10      	adds	r0, r2, #0
 8001b1e:	f7fe fca3 	bl	8000468 <__aeabi_fadd>
 8001b22:	1c03      	adds	r3, r0, #0
 8001b24:	1c1a      	adds	r2, r3, #0
 8001b26:	4b40      	ldr	r3, [pc, #256]	@ (8001c28 <compute_torque+0x174>)
 8001b28:	601a      	str	r2, [r3, #0]
    if (e_int > 500.0f) e_int = 500.0f;
 8001b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c28 <compute_torque+0x174>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	493f      	ldr	r1, [pc, #252]	@ (8001c2c <compute_torque+0x178>)
 8001b30:	1c18      	adds	r0, r3, #0
 8001b32:	f7fe fc85 	bl	8000440 <__aeabi_fcmpgt>
 8001b36:	1e03      	subs	r3, r0, #0
 8001b38:	d002      	beq.n	8001b40 <compute_torque+0x8c>
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c28 <compute_torque+0x174>)
 8001b3c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c2c <compute_torque+0x178>)
 8001b3e:	601a      	str	r2, [r3, #0]
    if (e_int < -500.0f) e_int = -500.0f;
 8001b40:	4b39      	ldr	r3, [pc, #228]	@ (8001c28 <compute_torque+0x174>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	493a      	ldr	r1, [pc, #232]	@ (8001c30 <compute_torque+0x17c>)
 8001b46:	1c18      	adds	r0, r3, #0
 8001b48:	f7fe fc66 	bl	8000418 <__aeabi_fcmplt>
 8001b4c:	1e03      	subs	r3, r0, #0
 8001b4e:	d002      	beq.n	8001b56 <compute_torque+0xa2>
 8001b50:	4b35      	ldr	r3, [pc, #212]	@ (8001c28 <compute_torque+0x174>)
 8001b52:	4a37      	ldr	r2, [pc, #220]	@ (8001c30 <compute_torque+0x17c>)
 8001b54:	601a      	str	r2, [r3, #0]

    // Control effort
    const float u = Kp * e + Ki * e_int;
 8001b56:	6a39      	ldr	r1, [r7, #32]
 8001b58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001b5a:	f7ff f845 	bl	8000be8 <__aeabi_fmul>
 8001b5e:	1c03      	adds	r3, r0, #0
 8001b60:	1c1c      	adds	r4, r3, #0
 8001b62:	4b31      	ldr	r3, [pc, #196]	@ (8001c28 <compute_torque+0x174>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b68:	1c18      	adds	r0, r3, #0
 8001b6a:	f7ff f83d 	bl	8000be8 <__aeabi_fmul>
 8001b6e:	1c03      	adds	r3, r0, #0
 8001b70:	1c19      	adds	r1, r3, #0
 8001b72:	1c20      	adds	r0, r4, #0
 8001b74:	f7fe fc78 	bl	8000468 <__aeabi_fadd>
 8001b78:	1c03      	adds	r3, r0, #0
 8001b7a:	61fb      	str	r3, [r7, #28]

    // Magnetic control: m = -u * (w × B)
    // For w=[0,0,wz], B=[Bx,0,Bz] -> w×B=[-w_z*B_z, w_z*B_x, 0]^T
    const float m_x = -u * mag_z; // commanded moment along X
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	2280      	movs	r2, #128	@ 0x80
 8001b80:	0612      	lsls	r2, r2, #24
 8001b82:	4053      	eors	r3, r2
 8001b84:	1c19      	adds	r1, r3, #0
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff f82e 	bl	8000be8 <__aeabi_fmul>
 8001b8c:	1c03      	adds	r3, r0, #0
 8001b8e:	61bb      	str	r3, [r7, #24]
    const float m_y =  u * mag_x; // commanded moment along Y
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	69f8      	ldr	r0, [r7, #28]
 8001b94:	f7ff f828 	bl	8000be8 <__aeabi_fmul>
 8001b98:	1c03      	adds	r3, r0, #0
 8001b9a:	617b      	str	r3, [r7, #20]

    // Map commanded moment to PWM duty cycle (0–100, neutral at 50)
    int p_x = (int)(50.0f + m_x * 0.5f);
 8001b9c:	21fc      	movs	r1, #252	@ 0xfc
 8001b9e:	0589      	lsls	r1, r1, #22
 8001ba0:	69b8      	ldr	r0, [r7, #24]
 8001ba2:	f7ff f821 	bl	8000be8 <__aeabi_fmul>
 8001ba6:	1c03      	adds	r3, r0, #0
 8001ba8:	4922      	ldr	r1, [pc, #136]	@ (8001c34 <compute_torque+0x180>)
 8001baa:	1c18      	adds	r0, r3, #0
 8001bac:	f7fe fc5c 	bl	8000468 <__aeabi_fadd>
 8001bb0:	1c03      	adds	r3, r0, #0
 8001bb2:	1c18      	adds	r0, r3, #0
 8001bb4:	f7ff f972 	bl	8000e9c <__aeabi_f2iz>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int p_y = (int)(50.0f + m_y * 0.5f);
 8001bbc:	21fc      	movs	r1, #252	@ 0xfc
 8001bbe:	0589      	lsls	r1, r1, #22
 8001bc0:	6978      	ldr	r0, [r7, #20]
 8001bc2:	f7ff f811 	bl	8000be8 <__aeabi_fmul>
 8001bc6:	1c03      	adds	r3, r0, #0
 8001bc8:	491a      	ldr	r1, [pc, #104]	@ (8001c34 <compute_torque+0x180>)
 8001bca:	1c18      	adds	r0, r3, #0
 8001bcc:	f7fe fc4c 	bl	8000468 <__aeabi_fadd>
 8001bd0:	1c03      	adds	r3, r0, #0
 8001bd2:	1c18      	adds	r0, r3, #0
 8001bd4:	f7ff f962 	bl	8000e9c <__aeabi_f2iz>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Clamp to valid range
    if (p_x < 0) p_x = 0; else if (p_x > 100) p_x = 100;
 8001bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	da02      	bge.n	8001be8 <compute_torque+0x134>
 8001be2:	2300      	movs	r3, #0
 8001be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001be6:	e004      	b.n	8001bf2 <compute_torque+0x13e>
 8001be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bea:	2b64      	cmp	r3, #100	@ 0x64
 8001bec:	dd01      	ble.n	8001bf2 <compute_torque+0x13e>
 8001bee:	2364      	movs	r3, #100	@ 0x64
 8001bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (p_y < 0) p_y = 0; else if (p_y > 100) p_y = 100;
 8001bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	da02      	bge.n	8001bfe <compute_torque+0x14a>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bfc:	e004      	b.n	8001c08 <compute_torque+0x154>
 8001bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c00:	2b64      	cmp	r3, #100	@ 0x64
 8001c02:	dd01      	ble.n	8001c08 <compute_torque+0x154>
 8001c04:	2364      	movs	r3, #100	@ 0x64
 8001c06:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Outputs
    *pwm_x = (uint8_t)p_x;
 8001c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	701a      	strb	r2, [r3, #0]
    *pwm_y = (uint8_t)p_y;
 8001c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c16:	701a      	strb	r2, [r3, #0]
}
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b011      	add	sp, #68	@ 0x44
 8001c1c:	bd90      	pop	{r4, r7, pc}
 8001c1e:	46c0      	nop			@ (mov r8, r8)
 8001c20:	3dcccccd 	.word	0x3dcccccd
 8001c24:	3d4ccccd 	.word	0x3d4ccccd
 8001c28:	20000114 	.word	0x20000114
 8001c2c:	43fa0000 	.word	0x43fa0000
 8001c30:	c3fa0000 	.word	0xc3fa0000
 8001c34:	42480000 	.word	0x42480000

08001c38 <set_pwm>:


// Sets the PWM output values for the X and Y channels (green LED (PC9) and blue LED (PC8))
void set_pwm(uint8_t pwm_x, uint8_t pwm_y)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	0002      	movs	r2, r0
 8001c40:	1dfb      	adds	r3, r7, #7
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	1dbb      	adds	r3, r7, #6
 8001c46:	1c0a      	adds	r2, r1, #0
 8001c48:	701a      	strb	r2, [r3, #0]
	// Set the PWM value for the X axis (connected to PC9, TIM3 Channel 4)
    __HAL_TIM_SET_COMPARE(&PWM_TIMER, PWM_GREEN_LED, pwm_x);
 8001c4a:	4b07      	ldr	r3, [pc, #28]	@ (8001c68 <set_pwm+0x30>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	1dfa      	adds	r2, r7, #7
 8001c50:	7812      	ldrb	r2, [r2, #0]
 8001c52:	641a      	str	r2, [r3, #64]	@ 0x40

    // Set the PWM value for the Y axis (connected to PC8, TIM3 Channel 3)
    __HAL_TIM_SET_COMPARE(&PWM_TIMER, PWM_BLUE_LED, pwm_y);
 8001c54:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <set_pwm+0x30>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	1dba      	adds	r2, r7, #6
 8001c5a:	7812      	ldrb	r2, [r2, #0]
 8001c5c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001c5e:	46c0      	nop			@ (mov r8, r8)
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b002      	add	sp, #8
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	46c0      	nop			@ (mov r8, r8)
 8001c68:	2000007c 	.word	0x2000007c

08001c6c <handle_sleep_logic>:

// Handles the sleep and wakeup logic based on the current rotational rate (gyro_z)
// If the absolute gyro_z stays below SLEEP_THRESHOLD for IDLE_CYCLES, the system enters sleep mode (isSleeping = 1)
// If, during sleep, gyro_z exceeds WAKEUP_THRESHOLD, the system wakes up
void handle_sleep_logic(float gyro_z)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    if (!isSleeping) {
 8001c74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce0 <handle_sleep_logic+0x74>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d11b      	bne.n	8001cb4 <handle_sleep_logic+0x48>
    	// If not sleeping, check if rotational rate is below the threshold
        if (fabsf(gyro_z) < SLEEP_THRESHOLD) {
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	085b      	lsrs	r3, r3, #1
 8001c82:	21fe      	movs	r1, #254	@ 0xfe
 8001c84:	0589      	lsls	r1, r1, #22
 8001c86:	1c18      	adds	r0, r3, #0
 8001c88:	f7fe fbc6 	bl	8000418 <__aeabi_fcmplt>
 8001c8c:	1e03      	subs	r3, r0, #0
 8001c8e:	d00d      	beq.n	8001cac <handle_sleep_logic+0x40>
            quietCounter++;
 8001c90:	4b14      	ldr	r3, [pc, #80]	@ (8001ce4 <handle_sleep_logic+0x78>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	3301      	adds	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	4b12      	ldr	r3, [pc, #72]	@ (8001ce4 <handle_sleep_logic+0x78>)
 8001c9a:	801a      	strh	r2, [r3, #0]
            // If below SLEEP_THRESHOLD long enough (IDLE_CYCLES), enter sleep mode
            if (quietCounter >= IDLE_CYCLES) {
 8001c9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <handle_sleep_logic+0x78>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	2b31      	cmp	r3, #49	@ 0x31
 8001ca2:	d918      	bls.n	8001cd6 <handle_sleep_logic+0x6a>
                isSleeping = 1;
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <handle_sleep_logic+0x74>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]
        if (fabsf(gyro_z) > WAKEUP_THRESHOLD) {
            isSleeping = 0;
            quietCounter = 0;
        }
    }
}
 8001caa:	e014      	b.n	8001cd6 <handle_sleep_logic+0x6a>
            quietCounter = 0;
 8001cac:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce4 <handle_sleep_logic+0x78>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	801a      	strh	r2, [r3, #0]
}
 8001cb2:	e010      	b.n	8001cd6 <handle_sleep_logic+0x6a>
        if (fabsf(gyro_z) > WAKEUP_THRESHOLD) {
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	085b      	lsrs	r3, r3, #1
 8001cba:	2180      	movs	r1, #128	@ 0x80
 8001cbc:	05c9      	lsls	r1, r1, #23
 8001cbe:	1c18      	adds	r0, r3, #0
 8001cc0:	f7fe fbbe 	bl	8000440 <__aeabi_fcmpgt>
 8001cc4:	1e03      	subs	r3, r0, #0
 8001cc6:	d100      	bne.n	8001cca <handle_sleep_logic+0x5e>
}
 8001cc8:	e005      	b.n	8001cd6 <handle_sleep_logic+0x6a>
            isSleeping = 0;
 8001cca:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <handle_sleep_logic+0x74>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
            quietCounter = 0;
 8001cd0:	4b04      	ldr	r3, [pc, #16]	@ (8001ce4 <handle_sleep_logic+0x78>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	801a      	strh	r2, [r3, #0]
}
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b002      	add	sp, #8
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	2000010d 	.word	0x2000010d
 8001ce4:	2000010e 	.word	0x2000010e

08001ce8 <HAL_TIM_PeriodElapsedCallback>:


// Timer interrupt callback function for STM32 HAL
// This function is called automatically whenever the timer (here TIM14) elapses
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	// Check if the interrupt comes from TIM14 (the control loop timer)
    if (htim->Instance == TIM14)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a04      	ldr	r2, [pc, #16]	@ (8001d08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d102      	bne.n	8001d00 <HAL_TIM_PeriodElapsedCallback+0x18>
        do_control = 1;		// Set flag to indicate that a control cycle should be performed in the main loop
 8001cfa:	4b04      	ldr	r3, [pc, #16]	@ (8001d0c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
}
 8001d00:	46c0      	nop			@ (mov r8, r8)
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b002      	add	sp, #8
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40002000 	.word	0x40002000
 8001d0c:	2000010c 	.word	0x2000010c

08001d10 <ctrl_timer_set_rate_hz>:



// Change timer rate function: Toggle between 10 Hz and 1 Hz
static inline void ctrl_timer_set_rate_hz(uint32_t hz) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
    __HAL_TIM_DISABLE(&htim14);
 8001d18:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <ctrl_timer_set_rate_hz+0x70>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	4a19      	ldr	r2, [pc, #100]	@ (8001d84 <ctrl_timer_set_rate_hz+0x74>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	d10d      	bne.n	8001d40 <ctrl_timer_set_rate_hz+0x30>
 8001d24:	4b16      	ldr	r3, [pc, #88]	@ (8001d80 <ctrl_timer_set_rate_hz+0x70>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	4a17      	ldr	r2, [pc, #92]	@ (8001d88 <ctrl_timer_set_rate_hz+0x78>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d107      	bne.n	8001d40 <ctrl_timer_set_rate_hz+0x30>
 8001d30:	4b13      	ldr	r3, [pc, #76]	@ (8001d80 <ctrl_timer_set_rate_hz+0x70>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <ctrl_timer_set_rate_hz+0x70>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	438a      	bics	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]
    htim14.Init.Prescaler = 47999;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	@ (8001d80 <ctrl_timer_set_rate_hz+0x70>)
 8001d42:	4a12      	ldr	r2, [pc, #72]	@ (8001d8c <ctrl_timer_set_rate_hz+0x7c>)
 8001d44:	605a      	str	r2, [r3, #4]
    htim14.Init.Period    = (1000 / hz) - 1;
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	23fa      	movs	r3, #250	@ 0xfa
 8001d4a:	0098      	lsls	r0, r3, #2
 8001d4c:	f7fe f9dc 	bl	8000108 <__udivsi3>
 8001d50:	0003      	movs	r3, r0
 8001d52:	1e5a      	subs	r2, r3, #1
 8001d54:	4b0a      	ldr	r3, [pc, #40]	@ (8001d80 <ctrl_timer_set_rate_hz+0x70>)
 8001d56:	60da      	str	r2, [r3, #12]
    HAL_TIM_Base_Init(&htim14);
 8001d58:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <ctrl_timer_set_rate_hz+0x70>)
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f002 f89e 	bl	8003e9c <HAL_TIM_Base_Init>
    __HAL_TIM_ENABLE_IT(&htim14, TIM_IT_UPDATE);
 8001d60:	4b07      	ldr	r3, [pc, #28]	@ (8001d80 <ctrl_timer_set_rate_hz+0x70>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <ctrl_timer_set_rate_hz+0x70>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	60da      	str	r2, [r3, #12]
    HAL_TIM_Base_Start_IT(&htim14);
 8001d70:	4b03      	ldr	r3, [pc, #12]	@ (8001d80 <ctrl_timer_set_rate_hz+0x70>)
 8001d72:	0018      	movs	r0, r3
 8001d74:	f002 f8e2 	bl	8003f3c <HAL_TIM_Base_Start_IT>
}
 8001d78:	46c0      	nop			@ (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b002      	add	sp, #8
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	200000c4 	.word	0x200000c4
 8001d84:	00001111 	.word	0x00001111
 8001d88:	00000444 	.word	0x00000444
 8001d8c:	0000bb7f 	.word	0x0000bb7f

08001d90 <fxas_active>:

// Change gyro state function: Toggle between active and ready
static inline void fxas_active(uint8_t on) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af04      	add	r7, sp, #16
 8001d96:	0002      	movs	r2, r0
 8001d98:	1dfb      	adds	r3, r7, #7
 8001d9a:	701a      	strb	r2, [r3, #0]
    uint8_t v = on ? 0x12 : 0x10;   // DR=100 (50 Hz), ACTIVE=1/0 (as in init_gyro)
 8001d9c:	1dfb      	adds	r3, r7, #7
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <fxas_active+0x18>
 8001da4:	2212      	movs	r2, #18
 8001da6:	e000      	b.n	8001daa <fxas_active+0x1a>
 8001da8:	2210      	movs	r2, #16
 8001daa:	210f      	movs	r1, #15
 8001dac:	187b      	adds	r3, r7, r1
 8001dae:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, 0x21<<1, 0x13, I2C_MEMADD_SIZE_8BIT, &v, 1, 50);
 8001db0:	480b      	ldr	r0, [pc, #44]	@ (8001de0 <fxas_active+0x50>)
 8001db2:	2332      	movs	r3, #50	@ 0x32
 8001db4:	9302      	str	r3, [sp, #8]
 8001db6:	2301      	movs	r3, #1
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	187b      	adds	r3, r7, r1
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	2213      	movs	r2, #19
 8001dc2:	2142      	movs	r1, #66	@ 0x42
 8001dc4:	f000 fd3c 	bl	8002840 <HAL_I2C_Mem_Write>
    if (on) HAL_Delay(80);          // >= 1/ODR + margin
 8001dc8:	1dfb      	adds	r3, r7, #7
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <fxas_active+0x46>
 8001dd0:	2050      	movs	r0, #80	@ 0x50
 8001dd2:	f000 f9ff 	bl	80021d4 <HAL_Delay>
}
 8001dd6:	46c0      	nop			@ (mov r8, r8)
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b004      	add	sp, #16
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	46c0      	nop			@ (mov r8, r8)
 8001de0:	20000028 	.word	0x20000028

08001de4 <fxos_active>:

// Change magnetometer state function: Toggle between active and ready
static inline void fxos_active(uint8_t on) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af04      	add	r7, sp, #16
 8001dea:	0002      	movs	r2, r0
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	701a      	strb	r2, [r3, #0]
    uint8_t v = on ? 0x2D : 0x00;   // CTRL_REG1 ACTIVE=1/0, DR=101 (12.5 Hz), LNOISE=1 (as in init_magnetometer)
 8001df0:	1dfb      	adds	r3, r7, #7
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <fxos_active+0x18>
 8001df8:	222d      	movs	r2, #45	@ 0x2d
 8001dfa:	e000      	b.n	8001dfe <fxos_active+0x1a>
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	210f      	movs	r1, #15
 8001e00:	187b      	adds	r3, r7, r1
 8001e02:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, 0x1F<<1, 0x2A, I2C_MEMADD_SIZE_8BIT, &v, 1, 50);
 8001e04:	480b      	ldr	r0, [pc, #44]	@ (8001e34 <fxos_active+0x50>)
 8001e06:	2332      	movs	r3, #50	@ 0x32
 8001e08:	9302      	str	r3, [sp, #8]
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	9301      	str	r3, [sp, #4]
 8001e0e:	187b      	adds	r3, r7, r1
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	2301      	movs	r3, #1
 8001e14:	222a      	movs	r2, #42	@ 0x2a
 8001e16:	213e      	movs	r1, #62	@ 0x3e
 8001e18:	f000 fd12 	bl	8002840 <HAL_I2C_Mem_Write>
    if (on) HAL_Delay(100);         // >= 1/ODR + margin
 8001e1c:	1dfb      	adds	r3, r7, #7
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <fxos_active+0x46>
 8001e24:	2064      	movs	r0, #100	@ 0x64
 8001e26:	f000 f9d5 	bl	80021d4 <HAL_Delay>
}
 8001e2a:	46c0      	nop			@ (mov r8, r8)
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b004      	add	sp, #16
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			@ (mov r8, r8)
 8001e34:	20000028 	.word	0x20000028

08001e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e3c:	b672      	cpsid	i
}
 8001e3e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e40:	46c0      	nop			@ (mov r8, r8)
 8001e42:	e7fd      	b.n	8001e40 <Error_Handler+0x8>

08001e44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e88 <HAL_MspInit+0x44>)
 8001e4c:	699a      	ldr	r2, [r3, #24]
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <HAL_MspInit+0x44>)
 8001e50:	2101      	movs	r1, #1
 8001e52:	430a      	orrs	r2, r1
 8001e54:	619a      	str	r2, [r3, #24]
 8001e56:	4b0c      	ldr	r3, [pc, #48]	@ (8001e88 <HAL_MspInit+0x44>)
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e62:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <HAL_MspInit+0x44>)
 8001e64:	69da      	ldr	r2, [r3, #28]
 8001e66:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <HAL_MspInit+0x44>)
 8001e68:	2180      	movs	r1, #128	@ 0x80
 8001e6a:	0549      	lsls	r1, r1, #21
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	61da      	str	r2, [r3, #28]
 8001e70:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <HAL_MspInit+0x44>)
 8001e72:	69da      	ldr	r2, [r3, #28]
 8001e74:	2380      	movs	r3, #128	@ 0x80
 8001e76:	055b      	lsls	r3, r3, #21
 8001e78:	4013      	ands	r3, r2
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e7e:	46c0      	nop			@ (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b002      	add	sp, #8
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	46c0      	nop			@ (mov r8, r8)
 8001e88:	40021000 	.word	0x40021000

08001e8c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b08b      	sub	sp, #44	@ 0x2c
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	2414      	movs	r4, #20
 8001e96:	193b      	adds	r3, r7, r4
 8001e98:	0018      	movs	r0, r3
 8001e9a:	2314      	movs	r3, #20
 8001e9c:	001a      	movs	r2, r3
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	f002 fe96 	bl	8004bd0 <memset>
  if(hi2c->Instance==I2C1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f1c <HAL_I2C_MspInit+0x90>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d131      	bne.n	8001f12 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	4b1c      	ldr	r3, [pc, #112]	@ (8001f20 <HAL_I2C_MspInit+0x94>)
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f20 <HAL_I2C_MspInit+0x94>)
 8001eb4:	2180      	movs	r1, #128	@ 0x80
 8001eb6:	02c9      	lsls	r1, r1, #11
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	615a      	str	r2, [r3, #20]
 8001ebc:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <HAL_I2C_MspInit+0x94>)
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	2380      	movs	r3, #128	@ 0x80
 8001ec2:	02db      	lsls	r3, r3, #11
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eca:	0021      	movs	r1, r4
 8001ecc:	187b      	adds	r3, r7, r1
 8001ece:	22c0      	movs	r2, #192	@ 0xc0
 8001ed0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ed2:	187b      	adds	r3, r7, r1
 8001ed4:	2212      	movs	r2, #18
 8001ed6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	187b      	adds	r3, r7, r1
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ede:	187b      	adds	r3, r7, r1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001ee4:	187b      	adds	r3, r7, r1
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eea:	187b      	adds	r3, r7, r1
 8001eec:	4a0d      	ldr	r2, [pc, #52]	@ (8001f24 <HAL_I2C_MspInit+0x98>)
 8001eee:	0019      	movs	r1, r3
 8001ef0:	0010      	movs	r0, r2
 8001ef2:	f000 fa71 	bl	80023d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <HAL_I2C_MspInit+0x94>)
 8001ef8:	69da      	ldr	r2, [r3, #28]
 8001efa:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <HAL_I2C_MspInit+0x94>)
 8001efc:	2180      	movs	r1, #128	@ 0x80
 8001efe:	0389      	lsls	r1, r1, #14
 8001f00:	430a      	orrs	r2, r1
 8001f02:	61da      	str	r2, [r3, #28]
 8001f04:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <HAL_I2C_MspInit+0x94>)
 8001f06:	69da      	ldr	r2, [r3, #28]
 8001f08:	2380      	movs	r3, #128	@ 0x80
 8001f0a:	039b      	lsls	r3, r3, #14
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f12:	46c0      	nop			@ (mov r8, r8)
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b00b      	add	sp, #44	@ 0x2c
 8001f18:	bd90      	pop	{r4, r7, pc}
 8001f1a:	46c0      	nop			@ (mov r8, r8)
 8001f1c:	40005400 	.word	0x40005400
 8001f20:	40021000 	.word	0x40021000
 8001f24:	48000400 	.word	0x48000400

08001f28 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a09      	ldr	r2, [pc, #36]	@ (8001f5c <HAL_TIM_PWM_MspInit+0x34>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d10b      	bne.n	8001f52 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f3a:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <HAL_TIM_PWM_MspInit+0x38>)
 8001f3c:	69da      	ldr	r2, [r3, #28]
 8001f3e:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <HAL_TIM_PWM_MspInit+0x38>)
 8001f40:	2102      	movs	r1, #2
 8001f42:	430a      	orrs	r2, r1
 8001f44:	61da      	str	r2, [r3, #28]
 8001f46:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_TIM_PWM_MspInit+0x38>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001f52:	46c0      	nop			@ (mov r8, r8)
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b004      	add	sp, #16
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	40000400 	.word	0x40000400
 8001f60:	40021000 	.word	0x40021000

08001f64 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0e      	ldr	r2, [pc, #56]	@ (8001fac <HAL_TIM_Base_MspInit+0x48>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d115      	bne.n	8001fa2 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001f76:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <HAL_TIM_Base_MspInit+0x4c>)
 8001f78:	69da      	ldr	r2, [r3, #28]
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb0 <HAL_TIM_Base_MspInit+0x4c>)
 8001f7c:	2180      	movs	r1, #128	@ 0x80
 8001f7e:	0049      	lsls	r1, r1, #1
 8001f80:	430a      	orrs	r2, r1
 8001f82:	61da      	str	r2, [r3, #28]
 8001f84:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb0 <HAL_TIM_Base_MspInit+0x4c>)
 8001f86:	69da      	ldr	r2, [r3, #28]
 8001f88:	2380      	movs	r3, #128	@ 0x80
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2100      	movs	r1, #0
 8001f96:	2013      	movs	r0, #19
 8001f98:	f000 f9ec 	bl	8002374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001f9c:	2013      	movs	r0, #19
 8001f9e:	f000 f9fe 	bl	800239e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001fa2:	46c0      	nop			@ (mov r8, r8)
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b004      	add	sp, #16
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			@ (mov r8, r8)
 8001fac:	40002000 	.word	0x40002000
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b089      	sub	sp, #36	@ 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	240c      	movs	r4, #12
 8001fbe:	193b      	adds	r3, r7, r4
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	2314      	movs	r3, #20
 8001fc4:	001a      	movs	r2, r3
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	f002 fe02 	bl	8004bd0 <memset>
  if(htim->Instance==TIM3)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a20      	ldr	r2, [pc, #128]	@ (8002054 <HAL_TIM_MspPostInit+0xa0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d13a      	bne.n	800204c <HAL_TIM_MspPostInit+0x98>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd6:	4b20      	ldr	r3, [pc, #128]	@ (8002058 <HAL_TIM_MspPostInit+0xa4>)
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <HAL_TIM_MspPostInit+0xa4>)
 8001fdc:	2180      	movs	r1, #128	@ 0x80
 8001fde:	0309      	lsls	r1, r1, #12
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	615a      	str	r2, [r3, #20]
 8001fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8002058 <HAL_TIM_MspPostInit+0xa4>)
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	2380      	movs	r3, #128	@ 0x80
 8001fea:	031b      	lsls	r3, r3, #12
 8001fec:	4013      	ands	r3, r2
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ff2:	193b      	adds	r3, r7, r4
 8001ff4:	2280      	movs	r2, #128	@ 0x80
 8001ff6:	0052      	lsls	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	193b      	adds	r3, r7, r4
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	193b      	adds	r3, r7, r4
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002006:	193b      	adds	r3, r7, r4
 8002008:	2200      	movs	r2, #0
 800200a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800200c:	193b      	adds	r3, r7, r4
 800200e:	2201      	movs	r2, #1
 8002010:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002012:	193b      	adds	r3, r7, r4
 8002014:	4a11      	ldr	r2, [pc, #68]	@ (800205c <HAL_TIM_MspPostInit+0xa8>)
 8002016:	0019      	movs	r1, r3
 8002018:	0010      	movs	r0, r2
 800201a:	f000 f9dd 	bl	80023d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800201e:	0021      	movs	r1, r4
 8002020:	187b      	adds	r3, r7, r1
 8002022:	2280      	movs	r2, #128	@ 0x80
 8002024:	0092      	lsls	r2, r2, #2
 8002026:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	187b      	adds	r3, r7, r1
 800202a:	2202      	movs	r2, #2
 800202c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	187b      	adds	r3, r7, r1
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002034:	187b      	adds	r3, r7, r1
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800203a:	187b      	adds	r3, r7, r1
 800203c:	2201      	movs	r2, #1
 800203e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002040:	187b      	adds	r3, r7, r1
 8002042:	4a06      	ldr	r2, [pc, #24]	@ (800205c <HAL_TIM_MspPostInit+0xa8>)
 8002044:	0019      	movs	r1, r3
 8002046:	0010      	movs	r0, r2
 8002048:	f000 f9c6 	bl	80023d8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */
    	// GPIO_InitStruct.Alternate = GPIO_AF0_MCO; -> GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800204c:	46c0      	nop			@ (mov r8, r8)
 800204e:	46bd      	mov	sp, r7
 8002050:	b009      	add	sp, #36	@ 0x24
 8002052:	bd90      	pop	{r4, r7, pc}
 8002054:	40000400 	.word	0x40000400
 8002058:	40021000 	.word	0x40021000
 800205c:	48000800 	.word	0x48000800

08002060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002064:	46c0      	nop			@ (mov r8, r8)
 8002066:	e7fd      	b.n	8002064 <NMI_Handler+0x4>

08002068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206c:	46c0      	nop			@ (mov r8, r8)
 800206e:	e7fd      	b.n	800206c <HardFault_Handler+0x4>

08002070 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002074:	46c0      	nop			@ (mov r8, r8)
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002088:	f000 f888 	bl	800219c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800208c:	46c0      	nop			@ (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002098:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <TIM14_IRQHandler+0x14>)
 800209a:	0018      	movs	r0, r3
 800209c:	f002 f8a8 	bl	80041f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80020a0:	46c0      	nop			@ (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			@ (mov r8, r8)
 80020a8:	200000c4 	.word	0x200000c4

080020ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80020b0:	46c0      	nop			@ (mov r8, r8)
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020b8:	480d      	ldr	r0, [pc, #52]	@ (80020f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020ba:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 80020bc:	f7ff fff6 	bl	80020ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020c0:	480c      	ldr	r0, [pc, #48]	@ (80020f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80020c2:	490d      	ldr	r1, [pc, #52]	@ (80020f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020c4:	4a0d      	ldr	r2, [pc, #52]	@ (80020fc <LoopForever+0xe>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c8:	e002      	b.n	80020d0 <LoopCopyDataInit>

080020ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ce:	3304      	adds	r3, #4

080020d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d4:	d3f9      	bcc.n	80020ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002100 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002104 <LoopForever+0x16>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020dc:	e001      	b.n	80020e2 <LoopFillZerobss>

080020de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e0:	3204      	adds	r2, #4

080020e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e4:	d3fb      	bcc.n	80020de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020e6:	f002 fd7b 	bl	8004be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020ea:	f7fe ff65 	bl	8000fb8 <main>

080020ee <LoopForever>:

LoopForever:
    b LoopForever
 80020ee:	e7fe      	b.n	80020ee <LoopForever>
  ldr   r0, =_estack
 80020f0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80020f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80020fc:	08004cf4 	.word	0x08004cf4
  ldr r2, =_sbss
 8002100:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002104:	2000011c 	.word	0x2000011c

08002108 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002108:	e7fe      	b.n	8002108 <ADC1_COMP_IRQHandler>
	...

0800210c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002110:	4b07      	ldr	r3, [pc, #28]	@ (8002130 <HAL_Init+0x24>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <HAL_Init+0x24>)
 8002116:	2110      	movs	r1, #16
 8002118:	430a      	orrs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800211c:	2000      	movs	r0, #0
 800211e:	f000 f809 	bl	8002134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002122:	f7ff fe8f 	bl	8001e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	0018      	movs	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	46c0      	nop			@ (mov r8, r8)
 8002130:	40022000 	.word	0x40022000

08002134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800213c:	4b14      	ldr	r3, [pc, #80]	@ (8002190 <HAL_InitTick+0x5c>)
 800213e:	681c      	ldr	r4, [r3, #0]
 8002140:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <HAL_InitTick+0x60>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	0019      	movs	r1, r3
 8002146:	23fa      	movs	r3, #250	@ 0xfa
 8002148:	0098      	lsls	r0, r3, #2
 800214a:	f7fd ffdd 	bl	8000108 <__udivsi3>
 800214e:	0003      	movs	r3, r0
 8002150:	0019      	movs	r1, r3
 8002152:	0020      	movs	r0, r4
 8002154:	f7fd ffd8 	bl	8000108 <__udivsi3>
 8002158:	0003      	movs	r3, r0
 800215a:	0018      	movs	r0, r3
 800215c:	f000 f92f 	bl	80023be <HAL_SYSTICK_Config>
 8002160:	1e03      	subs	r3, r0, #0
 8002162:	d001      	beq.n	8002168 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e00f      	b.n	8002188 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b03      	cmp	r3, #3
 800216c:	d80b      	bhi.n	8002186 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	2301      	movs	r3, #1
 8002172:	425b      	negs	r3, r3
 8002174:	2200      	movs	r2, #0
 8002176:	0018      	movs	r0, r3
 8002178:	f000 f8fc 	bl	8002374 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800217c:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_InitTick+0x64>)
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	e000      	b.n	8002188 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
}
 8002188:	0018      	movs	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	b003      	add	sp, #12
 800218e:	bd90      	pop	{r4, r7, pc}
 8002190:	20000000 	.word	0x20000000
 8002194:	20000008 	.word	0x20000008
 8002198:	20000004 	.word	0x20000004

0800219c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a0:	4b05      	ldr	r3, [pc, #20]	@ (80021b8 <HAL_IncTick+0x1c>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	001a      	movs	r2, r3
 80021a6:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <HAL_IncTick+0x20>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	18d2      	adds	r2, r2, r3
 80021ac:	4b03      	ldr	r3, [pc, #12]	@ (80021bc <HAL_IncTick+0x20>)
 80021ae:	601a      	str	r2, [r3, #0]
}
 80021b0:	46c0      	nop			@ (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			@ (mov r8, r8)
 80021b8:	20000008 	.word	0x20000008
 80021bc:	20000118 	.word	0x20000118

080021c0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  return uwTick;
 80021c4:	4b02      	ldr	r3, [pc, #8]	@ (80021d0 <HAL_GetTick+0x10>)
 80021c6:	681b      	ldr	r3, [r3, #0]
}
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	46c0      	nop			@ (mov r8, r8)
 80021d0:	20000118 	.word	0x20000118

080021d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021dc:	f7ff fff0 	bl	80021c0 <HAL_GetTick>
 80021e0:	0003      	movs	r3, r0
 80021e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3301      	adds	r3, #1
 80021ec:	d005      	beq.n	80021fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <HAL_Delay+0x44>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	001a      	movs	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	189b      	adds	r3, r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80021fa:	46c0      	nop			@ (mov r8, r8)
 80021fc:	f7ff ffe0 	bl	80021c0 <HAL_GetTick>
 8002200:	0002      	movs	r2, r0
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	429a      	cmp	r2, r3
 800220a:	d8f7      	bhi.n	80021fc <HAL_Delay+0x28>
  {
  }
}
 800220c:	46c0      	nop			@ (mov r8, r8)
 800220e:	46c0      	nop			@ (mov r8, r8)
 8002210:	46bd      	mov	sp, r7
 8002212:	b004      	add	sp, #16
 8002214:	bd80      	pop	{r7, pc}
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	20000008 	.word	0x20000008

0800221c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	0002      	movs	r2, r0
 8002224:	1dfb      	adds	r3, r7, #7
 8002226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002228:	1dfb      	adds	r3, r7, #7
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b7f      	cmp	r3, #127	@ 0x7f
 800222e:	d809      	bhi.n	8002244 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002230:	1dfb      	adds	r3, r7, #7
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	001a      	movs	r2, r3
 8002236:	231f      	movs	r3, #31
 8002238:	401a      	ands	r2, r3
 800223a:	4b04      	ldr	r3, [pc, #16]	@ (800224c <__NVIC_EnableIRQ+0x30>)
 800223c:	2101      	movs	r1, #1
 800223e:	4091      	lsls	r1, r2
 8002240:	000a      	movs	r2, r1
 8002242:	601a      	str	r2, [r3, #0]
  }
}
 8002244:	46c0      	nop			@ (mov r8, r8)
 8002246:	46bd      	mov	sp, r7
 8002248:	b002      	add	sp, #8
 800224a:	bd80      	pop	{r7, pc}
 800224c:	e000e100 	.word	0xe000e100

08002250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	0002      	movs	r2, r0
 8002258:	6039      	str	r1, [r7, #0]
 800225a:	1dfb      	adds	r3, r7, #7
 800225c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800225e:	1dfb      	adds	r3, r7, #7
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b7f      	cmp	r3, #127	@ 0x7f
 8002264:	d828      	bhi.n	80022b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002266:	4a2f      	ldr	r2, [pc, #188]	@ (8002324 <__NVIC_SetPriority+0xd4>)
 8002268:	1dfb      	adds	r3, r7, #7
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b25b      	sxtb	r3, r3
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	33c0      	adds	r3, #192	@ 0xc0
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	589b      	ldr	r3, [r3, r2]
 8002276:	1dfa      	adds	r2, r7, #7
 8002278:	7812      	ldrb	r2, [r2, #0]
 800227a:	0011      	movs	r1, r2
 800227c:	2203      	movs	r2, #3
 800227e:	400a      	ands	r2, r1
 8002280:	00d2      	lsls	r2, r2, #3
 8002282:	21ff      	movs	r1, #255	@ 0xff
 8002284:	4091      	lsls	r1, r2
 8002286:	000a      	movs	r2, r1
 8002288:	43d2      	mvns	r2, r2
 800228a:	401a      	ands	r2, r3
 800228c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	019b      	lsls	r3, r3, #6
 8002292:	22ff      	movs	r2, #255	@ 0xff
 8002294:	401a      	ands	r2, r3
 8002296:	1dfb      	adds	r3, r7, #7
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	0018      	movs	r0, r3
 800229c:	2303      	movs	r3, #3
 800229e:	4003      	ands	r3, r0
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022a4:	481f      	ldr	r0, [pc, #124]	@ (8002324 <__NVIC_SetPriority+0xd4>)
 80022a6:	1dfb      	adds	r3, r7, #7
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	b25b      	sxtb	r3, r3
 80022ac:	089b      	lsrs	r3, r3, #2
 80022ae:	430a      	orrs	r2, r1
 80022b0:	33c0      	adds	r3, #192	@ 0xc0
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80022b6:	e031      	b.n	800231c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002328 <__NVIC_SetPriority+0xd8>)
 80022ba:	1dfb      	adds	r3, r7, #7
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	0019      	movs	r1, r3
 80022c0:	230f      	movs	r3, #15
 80022c2:	400b      	ands	r3, r1
 80022c4:	3b08      	subs	r3, #8
 80022c6:	089b      	lsrs	r3, r3, #2
 80022c8:	3306      	adds	r3, #6
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	18d3      	adds	r3, r2, r3
 80022ce:	3304      	adds	r3, #4
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	1dfa      	adds	r2, r7, #7
 80022d4:	7812      	ldrb	r2, [r2, #0]
 80022d6:	0011      	movs	r1, r2
 80022d8:	2203      	movs	r2, #3
 80022da:	400a      	ands	r2, r1
 80022dc:	00d2      	lsls	r2, r2, #3
 80022de:	21ff      	movs	r1, #255	@ 0xff
 80022e0:	4091      	lsls	r1, r2
 80022e2:	000a      	movs	r2, r1
 80022e4:	43d2      	mvns	r2, r2
 80022e6:	401a      	ands	r2, r3
 80022e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	019b      	lsls	r3, r3, #6
 80022ee:	22ff      	movs	r2, #255	@ 0xff
 80022f0:	401a      	ands	r2, r3
 80022f2:	1dfb      	adds	r3, r7, #7
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	0018      	movs	r0, r3
 80022f8:	2303      	movs	r3, #3
 80022fa:	4003      	ands	r3, r0
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002300:	4809      	ldr	r0, [pc, #36]	@ (8002328 <__NVIC_SetPriority+0xd8>)
 8002302:	1dfb      	adds	r3, r7, #7
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	001c      	movs	r4, r3
 8002308:	230f      	movs	r3, #15
 800230a:	4023      	ands	r3, r4
 800230c:	3b08      	subs	r3, #8
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	430a      	orrs	r2, r1
 8002312:	3306      	adds	r3, #6
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	18c3      	adds	r3, r0, r3
 8002318:	3304      	adds	r3, #4
 800231a:	601a      	str	r2, [r3, #0]
}
 800231c:	46c0      	nop			@ (mov r8, r8)
 800231e:	46bd      	mov	sp, r7
 8002320:	b003      	add	sp, #12
 8002322:	bd90      	pop	{r4, r7, pc}
 8002324:	e000e100 	.word	0xe000e100
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	1e5a      	subs	r2, r3, #1
 8002338:	2380      	movs	r3, #128	@ 0x80
 800233a:	045b      	lsls	r3, r3, #17
 800233c:	429a      	cmp	r2, r3
 800233e:	d301      	bcc.n	8002344 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002340:	2301      	movs	r3, #1
 8002342:	e010      	b.n	8002366 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002344:	4b0a      	ldr	r3, [pc, #40]	@ (8002370 <SysTick_Config+0x44>)
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	3a01      	subs	r2, #1
 800234a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800234c:	2301      	movs	r3, #1
 800234e:	425b      	negs	r3, r3
 8002350:	2103      	movs	r1, #3
 8002352:	0018      	movs	r0, r3
 8002354:	f7ff ff7c 	bl	8002250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002358:	4b05      	ldr	r3, [pc, #20]	@ (8002370 <SysTick_Config+0x44>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800235e:	4b04      	ldr	r3, [pc, #16]	@ (8002370 <SysTick_Config+0x44>)
 8002360:	2207      	movs	r2, #7
 8002362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002364:	2300      	movs	r3, #0
}
 8002366:	0018      	movs	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	b002      	add	sp, #8
 800236c:	bd80      	pop	{r7, pc}
 800236e:	46c0      	nop			@ (mov r8, r8)
 8002370:	e000e010 	.word	0xe000e010

08002374 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
 800237e:	210f      	movs	r1, #15
 8002380:	187b      	adds	r3, r7, r1
 8002382:	1c02      	adds	r2, r0, #0
 8002384:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	187b      	adds	r3, r7, r1
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	b25b      	sxtb	r3, r3
 800238e:	0011      	movs	r1, r2
 8002390:	0018      	movs	r0, r3
 8002392:	f7ff ff5d 	bl	8002250 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002396:	46c0      	nop			@ (mov r8, r8)
 8002398:	46bd      	mov	sp, r7
 800239a:	b004      	add	sp, #16
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	0002      	movs	r2, r0
 80023a6:	1dfb      	adds	r3, r7, #7
 80023a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023aa:	1dfb      	adds	r3, r7, #7
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	b25b      	sxtb	r3, r3
 80023b0:	0018      	movs	r0, r3
 80023b2:	f7ff ff33 	bl	800221c <__NVIC_EnableIRQ>
}
 80023b6:	46c0      	nop			@ (mov r8, r8)
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b002      	add	sp, #8
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	0018      	movs	r0, r3
 80023ca:	f7ff ffaf 	bl	800232c <SysTick_Config>
 80023ce:	0003      	movs	r3, r0
}
 80023d0:	0018      	movs	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b002      	add	sp, #8
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023e6:	e14f      	b.n	8002688 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2101      	movs	r1, #1
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4091      	lsls	r1, r2
 80023f2:	000a      	movs	r2, r1
 80023f4:	4013      	ands	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d100      	bne.n	8002400 <HAL_GPIO_Init+0x28>
 80023fe:	e140      	b.n	8002682 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2203      	movs	r2, #3
 8002406:	4013      	ands	r3, r2
 8002408:	2b01      	cmp	r3, #1
 800240a:	d005      	beq.n	8002418 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2203      	movs	r2, #3
 8002412:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002414:	2b02      	cmp	r3, #2
 8002416:	d130      	bne.n	800247a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	2203      	movs	r2, #3
 8002424:	409a      	lsls	r2, r3
 8002426:	0013      	movs	r3, r2
 8002428:	43da      	mvns	r2, r3
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	409a      	lsls	r2, r3
 800243a:	0013      	movs	r3, r2
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800244e:	2201      	movs	r2, #1
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	409a      	lsls	r2, r3
 8002454:	0013      	movs	r3, r2
 8002456:	43da      	mvns	r2, r3
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4013      	ands	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	091b      	lsrs	r3, r3, #4
 8002464:	2201      	movs	r2, #1
 8002466:	401a      	ands	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	409a      	lsls	r2, r3
 800246c:	0013      	movs	r3, r2
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2203      	movs	r2, #3
 8002480:	4013      	ands	r3, r2
 8002482:	2b03      	cmp	r3, #3
 8002484:	d017      	beq.n	80024b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	2203      	movs	r2, #3
 8002492:	409a      	lsls	r2, r3
 8002494:	0013      	movs	r3, r2
 8002496:	43da      	mvns	r2, r3
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	409a      	lsls	r2, r3
 80024a8:	0013      	movs	r3, r2
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2203      	movs	r2, #3
 80024bc:	4013      	ands	r3, r2
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d123      	bne.n	800250a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	08da      	lsrs	r2, r3, #3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3208      	adds	r2, #8
 80024ca:	0092      	lsls	r2, r2, #2
 80024cc:	58d3      	ldr	r3, [r2, r3]
 80024ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2207      	movs	r2, #7
 80024d4:	4013      	ands	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	220f      	movs	r2, #15
 80024da:	409a      	lsls	r2, r3
 80024dc:	0013      	movs	r3, r2
 80024de:	43da      	mvns	r2, r3
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	691a      	ldr	r2, [r3, #16]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2107      	movs	r1, #7
 80024ee:	400b      	ands	r3, r1
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	409a      	lsls	r2, r3
 80024f4:	0013      	movs	r3, r2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	08da      	lsrs	r2, r3, #3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3208      	adds	r2, #8
 8002504:	0092      	lsls	r2, r2, #2
 8002506:	6939      	ldr	r1, [r7, #16]
 8002508:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	2203      	movs	r2, #3
 8002516:	409a      	lsls	r2, r3
 8002518:	0013      	movs	r3, r2
 800251a:	43da      	mvns	r2, r3
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4013      	ands	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2203      	movs	r2, #3
 8002528:	401a      	ands	r2, r3
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	409a      	lsls	r2, r3
 8002530:	0013      	movs	r3, r2
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	23c0      	movs	r3, #192	@ 0xc0
 8002544:	029b      	lsls	r3, r3, #10
 8002546:	4013      	ands	r3, r2
 8002548:	d100      	bne.n	800254c <HAL_GPIO_Init+0x174>
 800254a:	e09a      	b.n	8002682 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254c:	4b54      	ldr	r3, [pc, #336]	@ (80026a0 <HAL_GPIO_Init+0x2c8>)
 800254e:	699a      	ldr	r2, [r3, #24]
 8002550:	4b53      	ldr	r3, [pc, #332]	@ (80026a0 <HAL_GPIO_Init+0x2c8>)
 8002552:	2101      	movs	r1, #1
 8002554:	430a      	orrs	r2, r1
 8002556:	619a      	str	r2, [r3, #24]
 8002558:	4b51      	ldr	r3, [pc, #324]	@ (80026a0 <HAL_GPIO_Init+0x2c8>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	2201      	movs	r2, #1
 800255e:	4013      	ands	r3, r2
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002564:	4a4f      	ldr	r2, [pc, #316]	@ (80026a4 <HAL_GPIO_Init+0x2cc>)
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	089b      	lsrs	r3, r3, #2
 800256a:	3302      	adds	r3, #2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	589b      	ldr	r3, [r3, r2]
 8002570:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2203      	movs	r2, #3
 8002576:	4013      	ands	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	220f      	movs	r2, #15
 800257c:	409a      	lsls	r2, r3
 800257e:	0013      	movs	r3, r2
 8002580:	43da      	mvns	r2, r3
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	2390      	movs	r3, #144	@ 0x90
 800258c:	05db      	lsls	r3, r3, #23
 800258e:	429a      	cmp	r2, r3
 8002590:	d013      	beq.n	80025ba <HAL_GPIO_Init+0x1e2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a44      	ldr	r2, [pc, #272]	@ (80026a8 <HAL_GPIO_Init+0x2d0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00d      	beq.n	80025b6 <HAL_GPIO_Init+0x1de>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a43      	ldr	r2, [pc, #268]	@ (80026ac <HAL_GPIO_Init+0x2d4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d007      	beq.n	80025b2 <HAL_GPIO_Init+0x1da>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a42      	ldr	r2, [pc, #264]	@ (80026b0 <HAL_GPIO_Init+0x2d8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_GPIO_Init+0x1d6>
 80025aa:	2303      	movs	r3, #3
 80025ac:	e006      	b.n	80025bc <HAL_GPIO_Init+0x1e4>
 80025ae:	2305      	movs	r3, #5
 80025b0:	e004      	b.n	80025bc <HAL_GPIO_Init+0x1e4>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e002      	b.n	80025bc <HAL_GPIO_Init+0x1e4>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_GPIO_Init+0x1e4>
 80025ba:	2300      	movs	r3, #0
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	2103      	movs	r1, #3
 80025c0:	400a      	ands	r2, r1
 80025c2:	0092      	lsls	r2, r2, #2
 80025c4:	4093      	lsls	r3, r2
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025cc:	4935      	ldr	r1, [pc, #212]	@ (80026a4 <HAL_GPIO_Init+0x2cc>)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	3302      	adds	r3, #2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025da:	4b36      	ldr	r3, [pc, #216]	@ (80026b4 <HAL_GPIO_Init+0x2dc>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	43da      	mvns	r2, r3
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4013      	ands	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	2380      	movs	r3, #128	@ 0x80
 80025f0:	035b      	lsls	r3, r3, #13
 80025f2:	4013      	ands	r3, r2
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025fe:	4b2d      	ldr	r3, [pc, #180]	@ (80026b4 <HAL_GPIO_Init+0x2dc>)
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002604:	4b2b      	ldr	r3, [pc, #172]	@ (80026b4 <HAL_GPIO_Init+0x2dc>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	43da      	mvns	r2, r3
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	2380      	movs	r3, #128	@ 0x80
 800261a:	039b      	lsls	r3, r3, #14
 800261c:	4013      	ands	r3, r2
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002628:	4b22      	ldr	r3, [pc, #136]	@ (80026b4 <HAL_GPIO_Init+0x2dc>)
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800262e:	4b21      	ldr	r3, [pc, #132]	@ (80026b4 <HAL_GPIO_Init+0x2dc>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	43da      	mvns	r2, r3
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4013      	ands	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	2380      	movs	r3, #128	@ 0x80
 8002644:	029b      	lsls	r3, r3, #10
 8002646:	4013      	ands	r3, r2
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002652:	4b18      	ldr	r3, [pc, #96]	@ (80026b4 <HAL_GPIO_Init+0x2dc>)
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002658:	4b16      	ldr	r3, [pc, #88]	@ (80026b4 <HAL_GPIO_Init+0x2dc>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	43da      	mvns	r2, r3
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4013      	ands	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	2380      	movs	r3, #128	@ 0x80
 800266e:	025b      	lsls	r3, r3, #9
 8002670:	4013      	ands	r3, r2
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800267c:	4b0d      	ldr	r3, [pc, #52]	@ (80026b4 <HAL_GPIO_Init+0x2dc>)
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	3301      	adds	r3, #1
 8002686:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	40da      	lsrs	r2, r3
 8002690:	1e13      	subs	r3, r2, #0
 8002692:	d000      	beq.n	8002696 <HAL_GPIO_Init+0x2be>
 8002694:	e6a8      	b.n	80023e8 <HAL_GPIO_Init+0x10>
  } 
}
 8002696:	46c0      	nop			@ (mov r8, r8)
 8002698:	46c0      	nop			@ (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	b006      	add	sp, #24
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40010000 	.word	0x40010000
 80026a8:	48000400 	.word	0x48000400
 80026ac:	48000800 	.word	0x48000800
 80026b0:	48000c00 	.word	0x48000c00
 80026b4:	40010400 	.word	0x40010400

080026b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	000a      	movs	r2, r1
 80026c2:	1cbb      	adds	r3, r7, #2
 80026c4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	1cba      	adds	r2, r7, #2
 80026cc:	8812      	ldrh	r2, [r2, #0]
 80026ce:	4013      	ands	r3, r2
 80026d0:	d004      	beq.n	80026dc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80026d2:	230f      	movs	r3, #15
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	e003      	b.n	80026e4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026dc:	230f      	movs	r3, #15
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80026e4:	230f      	movs	r3, #15
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	781b      	ldrb	r3, [r3, #0]
  }
 80026ea:	0018      	movs	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b004      	add	sp, #16
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e08f      	b.n	8002826 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2241      	movs	r2, #65	@ 0x41
 800270a:	5c9b      	ldrb	r3, [r3, r2]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d107      	bne.n	8002722 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2240      	movs	r2, #64	@ 0x40
 8002716:	2100      	movs	r1, #0
 8002718:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	0018      	movs	r0, r3
 800271e:	f7ff fbb5 	bl	8001e8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2241      	movs	r2, #65	@ 0x41
 8002726:	2124      	movs	r1, #36	@ 0x24
 8002728:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2101      	movs	r1, #1
 8002736:	438a      	bics	r2, r1
 8002738:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	493b      	ldr	r1, [pc, #236]	@ (8002830 <HAL_I2C_Init+0x13c>)
 8002744:	400a      	ands	r2, r1
 8002746:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4938      	ldr	r1, [pc, #224]	@ (8002834 <HAL_I2C_Init+0x140>)
 8002754:	400a      	ands	r2, r1
 8002756:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d108      	bne.n	8002772 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2180      	movs	r1, #128	@ 0x80
 800276a:	0209      	lsls	r1, r1, #8
 800276c:	430a      	orrs	r2, r1
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	e007      	b.n	8002782 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2184      	movs	r1, #132	@ 0x84
 800277c:	0209      	lsls	r1, r1, #8
 800277e:	430a      	orrs	r2, r1
 8002780:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d109      	bne.n	800279e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2180      	movs	r1, #128	@ 0x80
 8002796:	0109      	lsls	r1, r1, #4
 8002798:	430a      	orrs	r2, r1
 800279a:	605a      	str	r2, [r3, #4]
 800279c:	e007      	b.n	80027ae <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4923      	ldr	r1, [pc, #140]	@ (8002838 <HAL_I2C_Init+0x144>)
 80027aa:	400a      	ands	r2, r1
 80027ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4920      	ldr	r1, [pc, #128]	@ (800283c <HAL_I2C_Init+0x148>)
 80027ba:	430a      	orrs	r2, r1
 80027bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	491a      	ldr	r1, [pc, #104]	@ (8002834 <HAL_I2C_Init+0x140>)
 80027ca:	400a      	ands	r2, r1
 80027cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69d9      	ldr	r1, [r3, #28]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1a      	ldr	r2, [r3, #32]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2101      	movs	r1, #1
 8002804:	430a      	orrs	r2, r1
 8002806:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2241      	movs	r2, #65	@ 0x41
 8002812:	2120      	movs	r1, #32
 8002814:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2242      	movs	r2, #66	@ 0x42
 8002820:	2100      	movs	r1, #0
 8002822:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	0018      	movs	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	b002      	add	sp, #8
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	f0ffffff 	.word	0xf0ffffff
 8002834:	ffff7fff 	.word	0xffff7fff
 8002838:	fffff7ff 	.word	0xfffff7ff
 800283c:	02008000 	.word	0x02008000

08002840 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b089      	sub	sp, #36	@ 0x24
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	000c      	movs	r4, r1
 800284a:	0010      	movs	r0, r2
 800284c:	0019      	movs	r1, r3
 800284e:	230a      	movs	r3, #10
 8002850:	18fb      	adds	r3, r7, r3
 8002852:	1c22      	adds	r2, r4, #0
 8002854:	801a      	strh	r2, [r3, #0]
 8002856:	2308      	movs	r3, #8
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	1c02      	adds	r2, r0, #0
 800285c:	801a      	strh	r2, [r3, #0]
 800285e:	1dbb      	adds	r3, r7, #6
 8002860:	1c0a      	adds	r2, r1, #0
 8002862:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2241      	movs	r2, #65	@ 0x41
 8002868:	5c9b      	ldrb	r3, [r3, r2]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b20      	cmp	r3, #32
 800286e:	d000      	beq.n	8002872 <HAL_I2C_Mem_Write+0x32>
 8002870:	e10c      	b.n	8002a8c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002874:	2b00      	cmp	r3, #0
 8002876:	d004      	beq.n	8002882 <HAL_I2C_Mem_Write+0x42>
 8002878:	232c      	movs	r3, #44	@ 0x2c
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d105      	bne.n	800288e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2280      	movs	r2, #128	@ 0x80
 8002886:	0092      	lsls	r2, r2, #2
 8002888:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0ff      	b.n	8002a8e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2240      	movs	r2, #64	@ 0x40
 8002892:	5c9b      	ldrb	r3, [r3, r2]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_I2C_Mem_Write+0x5c>
 8002898:	2302      	movs	r3, #2
 800289a:	e0f8      	b.n	8002a8e <HAL_I2C_Mem_Write+0x24e>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2240      	movs	r2, #64	@ 0x40
 80028a0:	2101      	movs	r1, #1
 80028a2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028a4:	f7ff fc8c 	bl	80021c0 <HAL_GetTick>
 80028a8:	0003      	movs	r3, r0
 80028aa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028ac:	2380      	movs	r3, #128	@ 0x80
 80028ae:	0219      	lsls	r1, r3, #8
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	2319      	movs	r3, #25
 80028b8:	2201      	movs	r2, #1
 80028ba:	f000 fb0b 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 80028be:	1e03      	subs	r3, r0, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0e3      	b.n	8002a8e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2241      	movs	r2, #65	@ 0x41
 80028ca:	2121      	movs	r1, #33	@ 0x21
 80028cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2242      	movs	r2, #66	@ 0x42
 80028d2:	2140      	movs	r1, #64	@ 0x40
 80028d4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	222c      	movs	r2, #44	@ 0x2c
 80028e6:	18ba      	adds	r2, r7, r2
 80028e8:	8812      	ldrh	r2, [r2, #0]
 80028ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028f2:	1dbb      	adds	r3, r7, #6
 80028f4:	881c      	ldrh	r4, [r3, #0]
 80028f6:	2308      	movs	r3, #8
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	881a      	ldrh	r2, [r3, #0]
 80028fc:	230a      	movs	r3, #10
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	8819      	ldrh	r1, [r3, #0]
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	9301      	str	r3, [sp, #4]
 8002908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	0023      	movs	r3, r4
 800290e:	f000 f9f9 	bl	8002d04 <I2C_RequestMemoryWrite>
 8002912:	1e03      	subs	r3, r0, #0
 8002914:	d005      	beq.n	8002922 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2240      	movs	r2, #64	@ 0x40
 800291a:	2100      	movs	r1, #0
 800291c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e0b5      	b.n	8002a8e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	2bff      	cmp	r3, #255	@ 0xff
 800292a:	d911      	bls.n	8002950 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	22ff      	movs	r2, #255	@ 0xff
 8002930:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002936:	b2da      	uxtb	r2, r3
 8002938:	2380      	movs	r3, #128	@ 0x80
 800293a:	045c      	lsls	r4, r3, #17
 800293c:	230a      	movs	r3, #10
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	8819      	ldrh	r1, [r3, #0]
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	2300      	movs	r3, #0
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	0023      	movs	r3, r4
 800294a:	f000 fc9d 	bl	8003288 <I2C_TransferConfig>
 800294e:	e012      	b.n	8002976 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295e:	b2da      	uxtb	r2, r3
 8002960:	2380      	movs	r3, #128	@ 0x80
 8002962:	049c      	lsls	r4, r3, #18
 8002964:	230a      	movs	r3, #10
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	8819      	ldrh	r1, [r3, #0]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	2300      	movs	r3, #0
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	0023      	movs	r3, r4
 8002972:	f000 fc89 	bl	8003288 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	0018      	movs	r0, r3
 800297e:	f000 fb01 	bl	8002f84 <I2C_WaitOnTXISFlagUntilTimeout>
 8002982:	1e03      	subs	r3, r0, #0
 8002984:	d001      	beq.n	800298a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e081      	b.n	8002a8e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298e:	781a      	ldrb	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d03a      	beq.n	8002a3a <HAL_I2C_Mem_Write+0x1fa>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d136      	bne.n	8002a3a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	0013      	movs	r3, r2
 80029d6:	2200      	movs	r2, #0
 80029d8:	2180      	movs	r1, #128	@ 0x80
 80029da:	f000 fa7b 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 80029de:	1e03      	subs	r3, r0, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e053      	b.n	8002a8e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2bff      	cmp	r3, #255	@ 0xff
 80029ee:	d911      	bls.n	8002a14 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	22ff      	movs	r2, #255	@ 0xff
 80029f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	2380      	movs	r3, #128	@ 0x80
 80029fe:	045c      	lsls	r4, r3, #17
 8002a00:	230a      	movs	r3, #10
 8002a02:	18fb      	adds	r3, r7, r3
 8002a04:	8819      	ldrh	r1, [r3, #0]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	0023      	movs	r3, r4
 8002a0e:	f000 fc3b 	bl	8003288 <I2C_TransferConfig>
 8002a12:	e012      	b.n	8002a3a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	2380      	movs	r3, #128	@ 0x80
 8002a26:	049c      	lsls	r4, r3, #18
 8002a28:	230a      	movs	r3, #10
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	8819      	ldrh	r1, [r3, #0]
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	2300      	movs	r3, #0
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	0023      	movs	r3, r4
 8002a36:	f000 fc27 	bl	8003288 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d198      	bne.n	8002976 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f000 fae0 	bl	8003010 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a50:	1e03      	subs	r3, r0, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e01a      	b.n	8002a8e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	490b      	ldr	r1, [pc, #44]	@ (8002a98 <HAL_I2C_Mem_Write+0x258>)
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2241      	movs	r2, #65	@ 0x41
 8002a74:	2120      	movs	r1, #32
 8002a76:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2242      	movs	r2, #66	@ 0x42
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2240      	movs	r2, #64	@ 0x40
 8002a84:	2100      	movs	r1, #0
 8002a86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e000      	b.n	8002a8e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002a8c:	2302      	movs	r3, #2
  }
}
 8002a8e:	0018      	movs	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b007      	add	sp, #28
 8002a94:	bd90      	pop	{r4, r7, pc}
 8002a96:	46c0      	nop			@ (mov r8, r8)
 8002a98:	fe00e800 	.word	0xfe00e800

08002a9c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b089      	sub	sp, #36	@ 0x24
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	000c      	movs	r4, r1
 8002aa6:	0010      	movs	r0, r2
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	230a      	movs	r3, #10
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	1c22      	adds	r2, r4, #0
 8002ab0:	801a      	strh	r2, [r3, #0]
 8002ab2:	2308      	movs	r3, #8
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	1c02      	adds	r2, r0, #0
 8002ab8:	801a      	strh	r2, [r3, #0]
 8002aba:	1dbb      	adds	r3, r7, #6
 8002abc:	1c0a      	adds	r2, r1, #0
 8002abe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2241      	movs	r2, #65	@ 0x41
 8002ac4:	5c9b      	ldrb	r3, [r3, r2]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b20      	cmp	r3, #32
 8002aca:	d000      	beq.n	8002ace <HAL_I2C_Mem_Read+0x32>
 8002acc:	e110      	b.n	8002cf0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d004      	beq.n	8002ade <HAL_I2C_Mem_Read+0x42>
 8002ad4:	232c      	movs	r3, #44	@ 0x2c
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d105      	bne.n	8002aea <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2280      	movs	r2, #128	@ 0x80
 8002ae2:	0092      	lsls	r2, r2, #2
 8002ae4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e103      	b.n	8002cf2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2240      	movs	r2, #64	@ 0x40
 8002aee:	5c9b      	ldrb	r3, [r3, r2]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_I2C_Mem_Read+0x5c>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e0fc      	b.n	8002cf2 <HAL_I2C_Mem_Read+0x256>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2240      	movs	r2, #64	@ 0x40
 8002afc:	2101      	movs	r1, #1
 8002afe:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b00:	f7ff fb5e 	bl	80021c0 <HAL_GetTick>
 8002b04:	0003      	movs	r3, r0
 8002b06:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b08:	2380      	movs	r3, #128	@ 0x80
 8002b0a:	0219      	lsls	r1, r3, #8
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	2319      	movs	r3, #25
 8002b14:	2201      	movs	r2, #1
 8002b16:	f000 f9dd 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002b1a:	1e03      	subs	r3, r0, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e0e7      	b.n	8002cf2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2241      	movs	r2, #65	@ 0x41
 8002b26:	2122      	movs	r1, #34	@ 0x22
 8002b28:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2242      	movs	r2, #66	@ 0x42
 8002b2e:	2140      	movs	r1, #64	@ 0x40
 8002b30:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	222c      	movs	r2, #44	@ 0x2c
 8002b42:	18ba      	adds	r2, r7, r2
 8002b44:	8812      	ldrh	r2, [r2, #0]
 8002b46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b4e:	1dbb      	adds	r3, r7, #6
 8002b50:	881c      	ldrh	r4, [r3, #0]
 8002b52:	2308      	movs	r3, #8
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	881a      	ldrh	r2, [r3, #0]
 8002b58:	230a      	movs	r3, #10
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	8819      	ldrh	r1, [r3, #0]
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	0023      	movs	r3, r4
 8002b6a:	f000 f92f 	bl	8002dcc <I2C_RequestMemoryRead>
 8002b6e:	1e03      	subs	r3, r0, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2240      	movs	r2, #64	@ 0x40
 8002b76:	2100      	movs	r1, #0
 8002b78:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0b9      	b.n	8002cf2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2bff      	cmp	r3, #255	@ 0xff
 8002b86:	d911      	bls.n	8002bac <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	2380      	movs	r3, #128	@ 0x80
 8002b96:	045c      	lsls	r4, r3, #17
 8002b98:	230a      	movs	r3, #10
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	8819      	ldrh	r1, [r3, #0]
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	4b56      	ldr	r3, [pc, #344]	@ (8002cfc <HAL_I2C_Mem_Read+0x260>)
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	0023      	movs	r3, r4
 8002ba6:	f000 fb6f 	bl	8003288 <I2C_TransferConfig>
 8002baa:	e012      	b.n	8002bd2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	2380      	movs	r3, #128	@ 0x80
 8002bbe:	049c      	lsls	r4, r3, #18
 8002bc0:	230a      	movs	r3, #10
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	8819      	ldrh	r1, [r3, #0]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	4b4c      	ldr	r3, [pc, #304]	@ (8002cfc <HAL_I2C_Mem_Read+0x260>)
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	0023      	movs	r3, r4
 8002bce:	f000 fb5b 	bl	8003288 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002bd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	0013      	movs	r3, r2
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2104      	movs	r1, #4
 8002be0:	f000 f978 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002be4:	1e03      	subs	r3, r0, #0
 8002be6:	d001      	beq.n	8002bec <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e082      	b.n	8002cf2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d03a      	beq.n	8002c9e <HAL_I2C_Mem_Read+0x202>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d136      	bne.n	8002c9e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	0013      	movs	r3, r2
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2180      	movs	r1, #128	@ 0x80
 8002c3e:	f000 f949 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002c42:	1e03      	subs	r3, r0, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e053      	b.n	8002cf2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2bff      	cmp	r3, #255	@ 0xff
 8002c52:	d911      	bls.n	8002c78 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2201      	movs	r2, #1
 8002c58:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	2380      	movs	r3, #128	@ 0x80
 8002c62:	045c      	lsls	r4, r3, #17
 8002c64:	230a      	movs	r3, #10
 8002c66:	18fb      	adds	r3, r7, r3
 8002c68:	8819      	ldrh	r1, [r3, #0]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	0023      	movs	r3, r4
 8002c72:	f000 fb09 	bl	8003288 <I2C_TransferConfig>
 8002c76:	e012      	b.n	8002c9e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	2380      	movs	r3, #128	@ 0x80
 8002c8a:	049c      	lsls	r4, r3, #18
 8002c8c:	230a      	movs	r3, #10
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	8819      	ldrh	r1, [r3, #0]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	2300      	movs	r3, #0
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	0023      	movs	r3, r4
 8002c9a:	f000 faf5 	bl	8003288 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d194      	bne.n	8002bd2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f000 f9ae 	bl	8003010 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cb4:	1e03      	subs	r3, r0, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e01a      	b.n	8002cf2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	490c      	ldr	r1, [pc, #48]	@ (8002d00 <HAL_I2C_Mem_Read+0x264>)
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2241      	movs	r2, #65	@ 0x41
 8002cd8:	2120      	movs	r1, #32
 8002cda:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2242      	movs	r2, #66	@ 0x42
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2240      	movs	r2, #64	@ 0x40
 8002ce8:	2100      	movs	r1, #0
 8002cea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	e000      	b.n	8002cf2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002cf0:	2302      	movs	r3, #2
  }
}
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	b007      	add	sp, #28
 8002cf8:	bd90      	pop	{r4, r7, pc}
 8002cfa:	46c0      	nop			@ (mov r8, r8)
 8002cfc:	80002400 	.word	0x80002400
 8002d00:	fe00e800 	.word	0xfe00e800

08002d04 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d04:	b5b0      	push	{r4, r5, r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	000c      	movs	r4, r1
 8002d0e:	0010      	movs	r0, r2
 8002d10:	0019      	movs	r1, r3
 8002d12:	250a      	movs	r5, #10
 8002d14:	197b      	adds	r3, r7, r5
 8002d16:	1c22      	adds	r2, r4, #0
 8002d18:	801a      	strh	r2, [r3, #0]
 8002d1a:	2308      	movs	r3, #8
 8002d1c:	18fb      	adds	r3, r7, r3
 8002d1e:	1c02      	adds	r2, r0, #0
 8002d20:	801a      	strh	r2, [r3, #0]
 8002d22:	1dbb      	adds	r3, r7, #6
 8002d24:	1c0a      	adds	r2, r1, #0
 8002d26:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d28:	1dbb      	adds	r3, r7, #6
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	2380      	movs	r3, #128	@ 0x80
 8002d30:	045c      	lsls	r4, r3, #17
 8002d32:	197b      	adds	r3, r7, r5
 8002d34:	8819      	ldrh	r1, [r3, #0]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	4b23      	ldr	r3, [pc, #140]	@ (8002dc8 <I2C_RequestMemoryWrite+0xc4>)
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	0023      	movs	r3, r4
 8002d3e:	f000 faa3 	bl	8003288 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d44:	6a39      	ldr	r1, [r7, #32]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 f91b 	bl	8002f84 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d4e:	1e03      	subs	r3, r0, #0
 8002d50:	d001      	beq.n	8002d56 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e033      	b.n	8002dbe <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d56:	1dbb      	adds	r3, r7, #6
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d107      	bne.n	8002d6e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d5e:	2308      	movs	r3, #8
 8002d60:	18fb      	adds	r3, r7, r3
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d6c:	e019      	b.n	8002da2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d6e:	2308      	movs	r3, #8
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	0a1b      	lsrs	r3, r3, #8
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d82:	6a39      	ldr	r1, [r7, #32]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	0018      	movs	r0, r3
 8002d88:	f000 f8fc 	bl	8002f84 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d8c:	1e03      	subs	r3, r0, #0
 8002d8e:	d001      	beq.n	8002d94 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e014      	b.n	8002dbe <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d94:	2308      	movs	r3, #8
 8002d96:	18fb      	adds	r3, r7, r3
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002da2:	6a3a      	ldr	r2, [r7, #32]
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	0013      	movs	r3, r2
 8002dac:	2200      	movs	r2, #0
 8002dae:	2180      	movs	r1, #128	@ 0x80
 8002db0:	f000 f890 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002db4:	1e03      	subs	r3, r0, #0
 8002db6:	d001      	beq.n	8002dbc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b004      	add	sp, #16
 8002dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8002dc6:	46c0      	nop			@ (mov r8, r8)
 8002dc8:	80002000 	.word	0x80002000

08002dcc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002dcc:	b5b0      	push	{r4, r5, r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	000c      	movs	r4, r1
 8002dd6:	0010      	movs	r0, r2
 8002dd8:	0019      	movs	r1, r3
 8002dda:	250a      	movs	r5, #10
 8002ddc:	197b      	adds	r3, r7, r5
 8002dde:	1c22      	adds	r2, r4, #0
 8002de0:	801a      	strh	r2, [r3, #0]
 8002de2:	2308      	movs	r3, #8
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	1c02      	adds	r2, r0, #0
 8002de8:	801a      	strh	r2, [r3, #0]
 8002dea:	1dbb      	adds	r3, r7, #6
 8002dec:	1c0a      	adds	r2, r1, #0
 8002dee:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002df0:	1dbb      	adds	r3, r7, #6
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	197b      	adds	r3, r7, r5
 8002df8:	8819      	ldrh	r1, [r3, #0]
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	4b23      	ldr	r3, [pc, #140]	@ (8002e8c <I2C_RequestMemoryRead+0xc0>)
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	2300      	movs	r3, #0
 8002e02:	f000 fa41 	bl	8003288 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e08:	6a39      	ldr	r1, [r7, #32]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f000 f8b9 	bl	8002f84 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e12:	1e03      	subs	r3, r0, #0
 8002e14:	d001      	beq.n	8002e1a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e033      	b.n	8002e82 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e1a:	1dbb      	adds	r3, r7, #6
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d107      	bne.n	8002e32 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e22:	2308      	movs	r3, #8
 8002e24:	18fb      	adds	r3, r7, r3
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e30:	e019      	b.n	8002e66 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e32:	2308      	movs	r3, #8
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	0a1b      	lsrs	r3, r3, #8
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e46:	6a39      	ldr	r1, [r7, #32]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f000 f89a 	bl	8002f84 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e50:	1e03      	subs	r3, r0, #0
 8002e52:	d001      	beq.n	8002e58 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e014      	b.n	8002e82 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e58:	2308      	movs	r3, #8
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e66:	6a3a      	ldr	r2, [r7, #32]
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	0013      	movs	r3, r2
 8002e70:	2200      	movs	r2, #0
 8002e72:	2140      	movs	r1, #64	@ 0x40
 8002e74:	f000 f82e 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002e78:	1e03      	subs	r3, r0, #0
 8002e7a:	d001      	beq.n	8002e80 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	0018      	movs	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b004      	add	sp, #16
 8002e88:	bdb0      	pop	{r4, r5, r7, pc}
 8002e8a:	46c0      	nop			@ (mov r8, r8)
 8002e8c:	80002000 	.word	0x80002000

08002e90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d103      	bne.n	8002eae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d007      	beq.n	8002ecc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	619a      	str	r2, [r3, #24]
  }
}
 8002ecc:	46c0      	nop			@ (mov r8, r8)
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b002      	add	sp, #8
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	1dfb      	adds	r3, r7, #7
 8002ee2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ee4:	e03a      	b.n	8002f5c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	6839      	ldr	r1, [r7, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	0018      	movs	r0, r3
 8002eee:	f000 f8d3 	bl	8003098 <I2C_IsErrorOccurred>
 8002ef2:	1e03      	subs	r3, r0, #0
 8002ef4:	d001      	beq.n	8002efa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e040      	b.n	8002f7c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	3301      	adds	r3, #1
 8002efe:	d02d      	beq.n	8002f5c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f00:	f7ff f95e 	bl	80021c0 <HAL_GetTick>
 8002f04:	0002      	movs	r2, r0
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d302      	bcc.n	8002f16 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d122      	bne.n	8002f5c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	425a      	negs	r2, r3
 8002f26:	4153      	adcs	r3, r2
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	001a      	movs	r2, r3
 8002f2c:	1dfb      	adds	r3, r7, #7
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d113      	bne.n	8002f5c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f38:	2220      	movs	r2, #32
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2241      	movs	r2, #65	@ 0x41
 8002f44:	2120      	movs	r1, #32
 8002f46:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2242      	movs	r2, #66	@ 0x42
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2240      	movs	r2, #64	@ 0x40
 8002f54:	2100      	movs	r1, #0
 8002f56:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e00f      	b.n	8002f7c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	4013      	ands	r3, r2
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	425a      	negs	r2, r3
 8002f6c:	4153      	adcs	r3, r2
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	001a      	movs	r2, r3
 8002f72:	1dfb      	adds	r3, r7, #7
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d0b5      	beq.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b004      	add	sp, #16
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f90:	e032      	b.n	8002ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f000 f87d 	bl	8003098 <I2C_IsErrorOccurred>
 8002f9e:	1e03      	subs	r3, r0, #0
 8002fa0:	d001      	beq.n	8002fa6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e030      	b.n	8003008 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	d025      	beq.n	8002ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fac:	f7ff f908 	bl	80021c0 <HAL_GetTick>
 8002fb0:	0002      	movs	r2, r0
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d302      	bcc.n	8002fc2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d11a      	bne.n	8002ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d013      	beq.n	8002ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2241      	movs	r2, #65	@ 0x41
 8002fe0:	2120      	movs	r1, #32
 8002fe2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2242      	movs	r2, #66	@ 0x42
 8002fe8:	2100      	movs	r1, #0
 8002fea:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2240      	movs	r2, #64	@ 0x40
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e007      	b.n	8003008 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	2202      	movs	r2, #2
 8003000:	4013      	ands	r3, r2
 8003002:	2b02      	cmp	r3, #2
 8003004:	d1c5      	bne.n	8002f92 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	0018      	movs	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	b004      	add	sp, #16
 800300e:	bd80      	pop	{r7, pc}

08003010 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800301c:	e02f      	b.n	800307e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	0018      	movs	r0, r3
 8003026:	f000 f837 	bl	8003098 <I2C_IsErrorOccurred>
 800302a:	1e03      	subs	r3, r0, #0
 800302c:	d001      	beq.n	8003032 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e02d      	b.n	800308e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003032:	f7ff f8c5 	bl	80021c0 <HAL_GetTick>
 8003036:	0002      	movs	r2, r0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	429a      	cmp	r2, r3
 8003040:	d302      	bcc.n	8003048 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d11a      	bne.n	800307e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2220      	movs	r2, #32
 8003050:	4013      	ands	r3, r2
 8003052:	2b20      	cmp	r3, #32
 8003054:	d013      	beq.n	800307e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305a:	2220      	movs	r2, #32
 800305c:	431a      	orrs	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2241      	movs	r2, #65	@ 0x41
 8003066:	2120      	movs	r1, #32
 8003068:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2242      	movs	r2, #66	@ 0x42
 800306e:	2100      	movs	r1, #0
 8003070:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2240      	movs	r2, #64	@ 0x40
 8003076:	2100      	movs	r1, #0
 8003078:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e007      	b.n	800308e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	2220      	movs	r2, #32
 8003086:	4013      	ands	r3, r2
 8003088:	2b20      	cmp	r3, #32
 800308a:	d1c8      	bne.n	800301e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	0018      	movs	r0, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	b004      	add	sp, #16
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	@ 0x28
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030a4:	2327      	movs	r3, #39	@ 0x27
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	2210      	movs	r2, #16
 80030c0:	4013      	ands	r3, r2
 80030c2:	d100      	bne.n	80030c6 <I2C_IsErrorOccurred+0x2e>
 80030c4:	e079      	b.n	80031ba <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2210      	movs	r2, #16
 80030cc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030ce:	e057      	b.n	8003180 <I2C_IsErrorOccurred+0xe8>
 80030d0:	2227      	movs	r2, #39	@ 0x27
 80030d2:	18bb      	adds	r3, r7, r2
 80030d4:	18ba      	adds	r2, r7, r2
 80030d6:	7812      	ldrb	r2, [r2, #0]
 80030d8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	3301      	adds	r3, #1
 80030de:	d04f      	beq.n	8003180 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030e0:	f7ff f86e 	bl	80021c0 <HAL_GetTick>
 80030e4:	0002      	movs	r2, r0
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d302      	bcc.n	80030f6 <I2C_IsErrorOccurred+0x5e>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d144      	bne.n	8003180 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	2380      	movs	r3, #128	@ 0x80
 80030fe:	01db      	lsls	r3, r3, #7
 8003100:	4013      	ands	r3, r2
 8003102:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003104:	2013      	movs	r0, #19
 8003106:	183b      	adds	r3, r7, r0
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	2142      	movs	r1, #66	@ 0x42
 800310c:	5c52      	ldrb	r2, [r2, r1]
 800310e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	2380      	movs	r3, #128	@ 0x80
 8003118:	021b      	lsls	r3, r3, #8
 800311a:	401a      	ands	r2, r3
 800311c:	2380      	movs	r3, #128	@ 0x80
 800311e:	021b      	lsls	r3, r3, #8
 8003120:	429a      	cmp	r2, r3
 8003122:	d126      	bne.n	8003172 <I2C_IsErrorOccurred+0xda>
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	2380      	movs	r3, #128	@ 0x80
 8003128:	01db      	lsls	r3, r3, #7
 800312a:	429a      	cmp	r2, r3
 800312c:	d021      	beq.n	8003172 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800312e:	183b      	adds	r3, r7, r0
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b20      	cmp	r3, #32
 8003134:	d01d      	beq.n	8003172 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2180      	movs	r1, #128	@ 0x80
 8003142:	01c9      	lsls	r1, r1, #7
 8003144:	430a      	orrs	r2, r1
 8003146:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003148:	f7ff f83a 	bl	80021c0 <HAL_GetTick>
 800314c:	0003      	movs	r3, r0
 800314e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003150:	e00f      	b.n	8003172 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003152:	f7ff f835 	bl	80021c0 <HAL_GetTick>
 8003156:	0002      	movs	r2, r0
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b19      	cmp	r3, #25
 800315e:	d908      	bls.n	8003172 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	2220      	movs	r2, #32
 8003164:	4313      	orrs	r3, r2
 8003166:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003168:	2327      	movs	r3, #39	@ 0x27
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	2201      	movs	r2, #1
 800316e:	701a      	strb	r2, [r3, #0]

              break;
 8003170:	e006      	b.n	8003180 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	2220      	movs	r2, #32
 800317a:	4013      	ands	r3, r2
 800317c:	2b20      	cmp	r3, #32
 800317e:	d1e8      	bne.n	8003152 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	2220      	movs	r2, #32
 8003188:	4013      	ands	r3, r2
 800318a:	2b20      	cmp	r3, #32
 800318c:	d004      	beq.n	8003198 <I2C_IsErrorOccurred+0x100>
 800318e:	2327      	movs	r3, #39	@ 0x27
 8003190:	18fb      	adds	r3, r7, r3
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d09b      	beq.n	80030d0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003198:	2327      	movs	r3, #39	@ 0x27
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d103      	bne.n	80031aa <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2220      	movs	r2, #32
 80031a8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	2204      	movs	r2, #4
 80031ae:	4313      	orrs	r3, r2
 80031b0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031b2:	2327      	movs	r3, #39	@ 0x27
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	2201      	movs	r2, #1
 80031b8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	2380      	movs	r3, #128	@ 0x80
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4013      	ands	r3, r2
 80031ca:	d00c      	beq.n	80031e6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	2201      	movs	r2, #1
 80031d0:	4313      	orrs	r3, r2
 80031d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2280      	movs	r2, #128	@ 0x80
 80031da:	0052      	lsls	r2, r2, #1
 80031dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031de:	2327      	movs	r3, #39	@ 0x27
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	2201      	movs	r2, #1
 80031e4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	2380      	movs	r3, #128	@ 0x80
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4013      	ands	r3, r2
 80031ee:	d00c      	beq.n	800320a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	2208      	movs	r2, #8
 80031f4:	4313      	orrs	r3, r2
 80031f6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2280      	movs	r2, #128	@ 0x80
 80031fe:	00d2      	lsls	r2, r2, #3
 8003200:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003202:	2327      	movs	r3, #39	@ 0x27
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	2201      	movs	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	2380      	movs	r3, #128	@ 0x80
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4013      	ands	r3, r2
 8003212:	d00c      	beq.n	800322e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	2202      	movs	r2, #2
 8003218:	4313      	orrs	r3, r2
 800321a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2280      	movs	r2, #128	@ 0x80
 8003222:	0092      	lsls	r2, r2, #2
 8003224:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003226:	2327      	movs	r3, #39	@ 0x27
 8003228:	18fb      	adds	r3, r7, r3
 800322a:	2201      	movs	r2, #1
 800322c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800322e:	2327      	movs	r3, #39	@ 0x27
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d01d      	beq.n	8003274 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	0018      	movs	r0, r3
 800323c:	f7ff fe28 	bl	8002e90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	490e      	ldr	r1, [pc, #56]	@ (8003284 <I2C_IsErrorOccurred+0x1ec>)
 800324c:	400a      	ands	r2, r1
 800324e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	431a      	orrs	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2241      	movs	r2, #65	@ 0x41
 8003260:	2120      	movs	r1, #32
 8003262:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2242      	movs	r2, #66	@ 0x42
 8003268:	2100      	movs	r1, #0
 800326a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2240      	movs	r2, #64	@ 0x40
 8003270:	2100      	movs	r1, #0
 8003272:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003274:	2327      	movs	r3, #39	@ 0x27
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	781b      	ldrb	r3, [r3, #0]
}
 800327a:	0018      	movs	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	b00a      	add	sp, #40	@ 0x28
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			@ (mov r8, r8)
 8003284:	fe00e800 	.word	0xfe00e800

08003288 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	0008      	movs	r0, r1
 8003292:	0011      	movs	r1, r2
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	240a      	movs	r4, #10
 8003298:	193b      	adds	r3, r7, r4
 800329a:	1c02      	adds	r2, r0, #0
 800329c:	801a      	strh	r2, [r3, #0]
 800329e:	2009      	movs	r0, #9
 80032a0:	183b      	adds	r3, r7, r0
 80032a2:	1c0a      	adds	r2, r1, #0
 80032a4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032a6:	193b      	adds	r3, r7, r4
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	059b      	lsls	r3, r3, #22
 80032ac:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032ae:	183b      	adds	r3, r7, r0
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	0419      	lsls	r1, r3, #16
 80032b4:	23ff      	movs	r3, #255	@ 0xff
 80032b6:	041b      	lsls	r3, r3, #16
 80032b8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ba:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c2:	4313      	orrs	r3, r2
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	085b      	lsrs	r3, r3, #1
 80032c8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032d2:	0d51      	lsrs	r1, r2, #21
 80032d4:	2280      	movs	r2, #128	@ 0x80
 80032d6:	00d2      	lsls	r2, r2, #3
 80032d8:	400a      	ands	r2, r1
 80032da:	4907      	ldr	r1, [pc, #28]	@ (80032f8 <I2C_TransferConfig+0x70>)
 80032dc:	430a      	orrs	r2, r1
 80032de:	43d2      	mvns	r2, r2
 80032e0:	401a      	ands	r2, r3
 80032e2:	0011      	movs	r1, r2
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032ee:	46c0      	nop			@ (mov r8, r8)
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b007      	add	sp, #28
 80032f4:	bd90      	pop	{r4, r7, pc}
 80032f6:	46c0      	nop			@ (mov r8, r8)
 80032f8:	03ff63ff 	.word	0x03ff63ff

080032fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2241      	movs	r2, #65	@ 0x41
 800330a:	5c9b      	ldrb	r3, [r3, r2]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b20      	cmp	r3, #32
 8003310:	d138      	bne.n	8003384 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2240      	movs	r2, #64	@ 0x40
 8003316:	5c9b      	ldrb	r3, [r3, r2]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800331c:	2302      	movs	r3, #2
 800331e:	e032      	b.n	8003386 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2240      	movs	r2, #64	@ 0x40
 8003324:	2101      	movs	r1, #1
 8003326:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2241      	movs	r2, #65	@ 0x41
 800332c:	2124      	movs	r1, #36	@ 0x24
 800332e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2101      	movs	r1, #1
 800333c:	438a      	bics	r2, r1
 800333e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4911      	ldr	r1, [pc, #68]	@ (8003390 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800334c:	400a      	ands	r2, r1
 800334e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6819      	ldr	r1, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2101      	movs	r1, #1
 800336c:	430a      	orrs	r2, r1
 800336e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2241      	movs	r2, #65	@ 0x41
 8003374:	2120      	movs	r1, #32
 8003376:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2240      	movs	r2, #64	@ 0x40
 800337c:	2100      	movs	r1, #0
 800337e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	e000      	b.n	8003386 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003384:	2302      	movs	r3, #2
  }
}
 8003386:	0018      	movs	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	b002      	add	sp, #8
 800338c:	bd80      	pop	{r7, pc}
 800338e:	46c0      	nop			@ (mov r8, r8)
 8003390:	ffffefff 	.word	0xffffefff

08003394 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2241      	movs	r2, #65	@ 0x41
 80033a2:	5c9b      	ldrb	r3, [r3, r2]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	d139      	bne.n	800341e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2240      	movs	r2, #64	@ 0x40
 80033ae:	5c9b      	ldrb	r3, [r3, r2]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e033      	b.n	8003420 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2240      	movs	r2, #64	@ 0x40
 80033bc:	2101      	movs	r1, #1
 80033be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2241      	movs	r2, #65	@ 0x41
 80033c4:	2124      	movs	r1, #36	@ 0x24
 80033c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2101      	movs	r1, #1
 80033d4:	438a      	bics	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4a11      	ldr	r2, [pc, #68]	@ (8003428 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	021b      	lsls	r3, r3, #8
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2101      	movs	r1, #1
 8003406:	430a      	orrs	r2, r1
 8003408:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2241      	movs	r2, #65	@ 0x41
 800340e:	2120      	movs	r1, #32
 8003410:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2240      	movs	r2, #64	@ 0x40
 8003416:	2100      	movs	r1, #0
 8003418:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	e000      	b.n	8003420 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800341e:	2302      	movs	r3, #2
  }
}
 8003420:	0018      	movs	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	b004      	add	sp, #16
 8003426:	bd80      	pop	{r7, pc}
 8003428:	fffff0ff 	.word	0xfffff0ff

0800342c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	000a      	movs	r2, r1
 8003436:	1cfb      	adds	r3, r7, #3
 8003438:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 800343a:	4b09      	ldr	r3, [pc, #36]	@ (8003460 <HAL_PWR_EnterSLEEPMode+0x34>)
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	4b08      	ldr	r3, [pc, #32]	@ (8003460 <HAL_PWR_EnterSLEEPMode+0x34>)
 8003440:	2104      	movs	r1, #4
 8003442:	438a      	bics	r2, r1
 8003444:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003446:	1cfb      	adds	r3, r7, #3
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800344e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8003450:	e002      	b.n	8003458 <HAL_PWR_EnterSLEEPMode+0x2c>
    __SEV();
 8003452:	bf40      	sev
    __WFE();
 8003454:	bf20      	wfe
    __WFE();
 8003456:	bf20      	wfe
}
 8003458:	46c0      	nop			@ (mov r8, r8)
 800345a:	46bd      	mov	sp, r7
 800345c:	b002      	add	sp, #8
 800345e:	bd80      	pop	{r7, pc}
 8003460:	e000ed00 	.word	0xe000ed00

08003464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e301      	b.n	8003a7a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2201      	movs	r2, #1
 800347c:	4013      	ands	r3, r2
 800347e:	d100      	bne.n	8003482 <HAL_RCC_OscConfig+0x1e>
 8003480:	e08d      	b.n	800359e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003482:	4bc3      	ldr	r3, [pc, #780]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	220c      	movs	r2, #12
 8003488:	4013      	ands	r3, r2
 800348a:	2b04      	cmp	r3, #4
 800348c:	d00e      	beq.n	80034ac <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800348e:	4bc0      	ldr	r3, [pc, #768]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	220c      	movs	r2, #12
 8003494:	4013      	ands	r3, r2
 8003496:	2b08      	cmp	r3, #8
 8003498:	d116      	bne.n	80034c8 <HAL_RCC_OscConfig+0x64>
 800349a:	4bbd      	ldr	r3, [pc, #756]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	2380      	movs	r3, #128	@ 0x80
 80034a0:	025b      	lsls	r3, r3, #9
 80034a2:	401a      	ands	r2, r3
 80034a4:	2380      	movs	r3, #128	@ 0x80
 80034a6:	025b      	lsls	r3, r3, #9
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d10d      	bne.n	80034c8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ac:	4bb8      	ldr	r3, [pc, #736]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	2380      	movs	r3, #128	@ 0x80
 80034b2:	029b      	lsls	r3, r3, #10
 80034b4:	4013      	ands	r3, r2
 80034b6:	d100      	bne.n	80034ba <HAL_RCC_OscConfig+0x56>
 80034b8:	e070      	b.n	800359c <HAL_RCC_OscConfig+0x138>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d000      	beq.n	80034c4 <HAL_RCC_OscConfig+0x60>
 80034c2:	e06b      	b.n	800359c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e2d8      	b.n	8003a7a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d107      	bne.n	80034e0 <HAL_RCC_OscConfig+0x7c>
 80034d0:	4baf      	ldr	r3, [pc, #700]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4bae      	ldr	r3, [pc, #696]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 80034d6:	2180      	movs	r1, #128	@ 0x80
 80034d8:	0249      	lsls	r1, r1, #9
 80034da:	430a      	orrs	r2, r1
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e02f      	b.n	8003540 <HAL_RCC_OscConfig+0xdc>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10c      	bne.n	8003502 <HAL_RCC_OscConfig+0x9e>
 80034e8:	4ba9      	ldr	r3, [pc, #676]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	4ba8      	ldr	r3, [pc, #672]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 80034ee:	49a9      	ldr	r1, [pc, #676]	@ (8003794 <HAL_RCC_OscConfig+0x330>)
 80034f0:	400a      	ands	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	4ba6      	ldr	r3, [pc, #664]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4ba5      	ldr	r3, [pc, #660]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 80034fa:	49a7      	ldr	r1, [pc, #668]	@ (8003798 <HAL_RCC_OscConfig+0x334>)
 80034fc:	400a      	ands	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	e01e      	b.n	8003540 <HAL_RCC_OscConfig+0xdc>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b05      	cmp	r3, #5
 8003508:	d10e      	bne.n	8003528 <HAL_RCC_OscConfig+0xc4>
 800350a:	4ba1      	ldr	r3, [pc, #644]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4ba0      	ldr	r3, [pc, #640]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 8003510:	2180      	movs	r1, #128	@ 0x80
 8003512:	02c9      	lsls	r1, r1, #11
 8003514:	430a      	orrs	r2, r1
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	4b9d      	ldr	r3, [pc, #628]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4b9c      	ldr	r3, [pc, #624]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 800351e:	2180      	movs	r1, #128	@ 0x80
 8003520:	0249      	lsls	r1, r1, #9
 8003522:	430a      	orrs	r2, r1
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	e00b      	b.n	8003540 <HAL_RCC_OscConfig+0xdc>
 8003528:	4b99      	ldr	r3, [pc, #612]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	4b98      	ldr	r3, [pc, #608]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 800352e:	4999      	ldr	r1, [pc, #612]	@ (8003794 <HAL_RCC_OscConfig+0x330>)
 8003530:	400a      	ands	r2, r1
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	4b96      	ldr	r3, [pc, #600]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4b95      	ldr	r3, [pc, #596]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 800353a:	4997      	ldr	r1, [pc, #604]	@ (8003798 <HAL_RCC_OscConfig+0x334>)
 800353c:	400a      	ands	r2, r1
 800353e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d014      	beq.n	8003572 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7fe fe3a 	bl	80021c0 <HAL_GetTick>
 800354c:	0003      	movs	r3, r0
 800354e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003552:	f7fe fe35 	bl	80021c0 <HAL_GetTick>
 8003556:	0002      	movs	r2, r0
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b64      	cmp	r3, #100	@ 0x64
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e28a      	b.n	8003a7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003564:	4b8a      	ldr	r3, [pc, #552]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	2380      	movs	r3, #128	@ 0x80
 800356a:	029b      	lsls	r3, r3, #10
 800356c:	4013      	ands	r3, r2
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0xee>
 8003570:	e015      	b.n	800359e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003572:	f7fe fe25 	bl	80021c0 <HAL_GetTick>
 8003576:	0003      	movs	r3, r0
 8003578:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800357c:	f7fe fe20 	bl	80021c0 <HAL_GetTick>
 8003580:	0002      	movs	r2, r0
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b64      	cmp	r3, #100	@ 0x64
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e275      	b.n	8003a7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358e:	4b80      	ldr	r3, [pc, #512]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	2380      	movs	r3, #128	@ 0x80
 8003594:	029b      	lsls	r3, r3, #10
 8003596:	4013      	ands	r3, r2
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x118>
 800359a:	e000      	b.n	800359e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2202      	movs	r2, #2
 80035a4:	4013      	ands	r3, r2
 80035a6:	d100      	bne.n	80035aa <HAL_RCC_OscConfig+0x146>
 80035a8:	e069      	b.n	800367e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035aa:	4b79      	ldr	r3, [pc, #484]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	220c      	movs	r2, #12
 80035b0:	4013      	ands	r3, r2
 80035b2:	d00b      	beq.n	80035cc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035b4:	4b76      	ldr	r3, [pc, #472]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	220c      	movs	r2, #12
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d11c      	bne.n	80035fa <HAL_RCC_OscConfig+0x196>
 80035c0:	4b73      	ldr	r3, [pc, #460]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	2380      	movs	r3, #128	@ 0x80
 80035c6:	025b      	lsls	r3, r3, #9
 80035c8:	4013      	ands	r3, r2
 80035ca:	d116      	bne.n	80035fa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035cc:	4b70      	ldr	r3, [pc, #448]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2202      	movs	r2, #2
 80035d2:	4013      	ands	r3, r2
 80035d4:	d005      	beq.n	80035e2 <HAL_RCC_OscConfig+0x17e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d001      	beq.n	80035e2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e24b      	b.n	8003a7a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e2:	4b6b      	ldr	r3, [pc, #428]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	22f8      	movs	r2, #248	@ 0xf8
 80035e8:	4393      	bics	r3, r2
 80035ea:	0019      	movs	r1, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	00da      	lsls	r2, r3, #3
 80035f2:	4b67      	ldr	r3, [pc, #412]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 80035f4:	430a      	orrs	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f8:	e041      	b.n	800367e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d024      	beq.n	800364c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003602:	4b63      	ldr	r3, [pc, #396]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	4b62      	ldr	r3, [pc, #392]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 8003608:	2101      	movs	r1, #1
 800360a:	430a      	orrs	r2, r1
 800360c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360e:	f7fe fdd7 	bl	80021c0 <HAL_GetTick>
 8003612:	0003      	movs	r3, r0
 8003614:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003618:	f7fe fdd2 	bl	80021c0 <HAL_GetTick>
 800361c:	0002      	movs	r2, r0
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e227      	b.n	8003a7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362a:	4b59      	ldr	r3, [pc, #356]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2202      	movs	r2, #2
 8003630:	4013      	ands	r3, r2
 8003632:	d0f1      	beq.n	8003618 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003634:	4b56      	ldr	r3, [pc, #344]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	22f8      	movs	r2, #248	@ 0xf8
 800363a:	4393      	bics	r3, r2
 800363c:	0019      	movs	r1, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00da      	lsls	r2, r3, #3
 8003644:	4b52      	ldr	r3, [pc, #328]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 8003646:	430a      	orrs	r2, r1
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	e018      	b.n	800367e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800364c:	4b50      	ldr	r3, [pc, #320]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	4b4f      	ldr	r3, [pc, #316]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 8003652:	2101      	movs	r1, #1
 8003654:	438a      	bics	r2, r1
 8003656:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fe fdb2 	bl	80021c0 <HAL_GetTick>
 800365c:	0003      	movs	r3, r0
 800365e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003662:	f7fe fdad 	bl	80021c0 <HAL_GetTick>
 8003666:	0002      	movs	r2, r0
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e202      	b.n	8003a7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003674:	4b46      	ldr	r3, [pc, #280]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2202      	movs	r2, #2
 800367a:	4013      	ands	r3, r2
 800367c:	d1f1      	bne.n	8003662 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2208      	movs	r2, #8
 8003684:	4013      	ands	r3, r2
 8003686:	d036      	beq.n	80036f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d019      	beq.n	80036c4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003690:	4b3f      	ldr	r3, [pc, #252]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 8003692:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003694:	4b3e      	ldr	r3, [pc, #248]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 8003696:	2101      	movs	r1, #1
 8003698:	430a      	orrs	r2, r1
 800369a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369c:	f7fe fd90 	bl	80021c0 <HAL_GetTick>
 80036a0:	0003      	movs	r3, r0
 80036a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036a6:	f7fe fd8b 	bl	80021c0 <HAL_GetTick>
 80036aa:	0002      	movs	r2, r0
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e1e0      	b.n	8003a7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b8:	4b35      	ldr	r3, [pc, #212]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	2202      	movs	r2, #2
 80036be:	4013      	ands	r3, r2
 80036c0:	d0f1      	beq.n	80036a6 <HAL_RCC_OscConfig+0x242>
 80036c2:	e018      	b.n	80036f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036c4:	4b32      	ldr	r3, [pc, #200]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 80036c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036c8:	4b31      	ldr	r3, [pc, #196]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 80036ca:	2101      	movs	r1, #1
 80036cc:	438a      	bics	r2, r1
 80036ce:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d0:	f7fe fd76 	bl	80021c0 <HAL_GetTick>
 80036d4:	0003      	movs	r3, r0
 80036d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036da:	f7fe fd71 	bl	80021c0 <HAL_GetTick>
 80036de:	0002      	movs	r2, r0
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e1c6      	b.n	8003a7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ec:	4b28      	ldr	r3, [pc, #160]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 80036ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f0:	2202      	movs	r2, #2
 80036f2:	4013      	ands	r3, r2
 80036f4:	d1f1      	bne.n	80036da <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2204      	movs	r2, #4
 80036fc:	4013      	ands	r3, r2
 80036fe:	d100      	bne.n	8003702 <HAL_RCC_OscConfig+0x29e>
 8003700:	e0b4      	b.n	800386c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003702:	201f      	movs	r0, #31
 8003704:	183b      	adds	r3, r7, r0
 8003706:	2200      	movs	r2, #0
 8003708:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800370a:	4b21      	ldr	r3, [pc, #132]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 800370c:	69da      	ldr	r2, [r3, #28]
 800370e:	2380      	movs	r3, #128	@ 0x80
 8003710:	055b      	lsls	r3, r3, #21
 8003712:	4013      	ands	r3, r2
 8003714:	d110      	bne.n	8003738 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003716:	4b1e      	ldr	r3, [pc, #120]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 8003718:	69da      	ldr	r2, [r3, #28]
 800371a:	4b1d      	ldr	r3, [pc, #116]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 800371c:	2180      	movs	r1, #128	@ 0x80
 800371e:	0549      	lsls	r1, r1, #21
 8003720:	430a      	orrs	r2, r1
 8003722:	61da      	str	r2, [r3, #28]
 8003724:	4b1a      	ldr	r3, [pc, #104]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 8003726:	69da      	ldr	r2, [r3, #28]
 8003728:	2380      	movs	r3, #128	@ 0x80
 800372a:	055b      	lsls	r3, r3, #21
 800372c:	4013      	ands	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003732:	183b      	adds	r3, r7, r0
 8003734:	2201      	movs	r2, #1
 8003736:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003738:	4b18      	ldr	r3, [pc, #96]	@ (800379c <HAL_RCC_OscConfig+0x338>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	2380      	movs	r3, #128	@ 0x80
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	4013      	ands	r3, r2
 8003742:	d11a      	bne.n	800377a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003744:	4b15      	ldr	r3, [pc, #84]	@ (800379c <HAL_RCC_OscConfig+0x338>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b14      	ldr	r3, [pc, #80]	@ (800379c <HAL_RCC_OscConfig+0x338>)
 800374a:	2180      	movs	r1, #128	@ 0x80
 800374c:	0049      	lsls	r1, r1, #1
 800374e:	430a      	orrs	r2, r1
 8003750:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003752:	f7fe fd35 	bl	80021c0 <HAL_GetTick>
 8003756:	0003      	movs	r3, r0
 8003758:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375c:	f7fe fd30 	bl	80021c0 <HAL_GetTick>
 8003760:	0002      	movs	r2, r0
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	@ 0x64
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e185      	b.n	8003a7a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376e:	4b0b      	ldr	r3, [pc, #44]	@ (800379c <HAL_RCC_OscConfig+0x338>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	2380      	movs	r3, #128	@ 0x80
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	4013      	ands	r3, r2
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d10e      	bne.n	80037a0 <HAL_RCC_OscConfig+0x33c>
 8003782:	4b03      	ldr	r3, [pc, #12]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 8003784:	6a1a      	ldr	r2, [r3, #32]
 8003786:	4b02      	ldr	r3, [pc, #8]	@ (8003790 <HAL_RCC_OscConfig+0x32c>)
 8003788:	2101      	movs	r1, #1
 800378a:	430a      	orrs	r2, r1
 800378c:	621a      	str	r2, [r3, #32]
 800378e:	e035      	b.n	80037fc <HAL_RCC_OscConfig+0x398>
 8003790:	40021000 	.word	0x40021000
 8003794:	fffeffff 	.word	0xfffeffff
 8003798:	fffbffff 	.word	0xfffbffff
 800379c:	40007000 	.word	0x40007000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10c      	bne.n	80037c2 <HAL_RCC_OscConfig+0x35e>
 80037a8:	4bb6      	ldr	r3, [pc, #728]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80037aa:	6a1a      	ldr	r2, [r3, #32]
 80037ac:	4bb5      	ldr	r3, [pc, #724]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80037ae:	2101      	movs	r1, #1
 80037b0:	438a      	bics	r2, r1
 80037b2:	621a      	str	r2, [r3, #32]
 80037b4:	4bb3      	ldr	r3, [pc, #716]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80037b6:	6a1a      	ldr	r2, [r3, #32]
 80037b8:	4bb2      	ldr	r3, [pc, #712]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80037ba:	2104      	movs	r1, #4
 80037bc:	438a      	bics	r2, r1
 80037be:	621a      	str	r2, [r3, #32]
 80037c0:	e01c      	b.n	80037fc <HAL_RCC_OscConfig+0x398>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b05      	cmp	r3, #5
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x380>
 80037ca:	4bae      	ldr	r3, [pc, #696]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80037cc:	6a1a      	ldr	r2, [r3, #32]
 80037ce:	4bad      	ldr	r3, [pc, #692]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80037d0:	2104      	movs	r1, #4
 80037d2:	430a      	orrs	r2, r1
 80037d4:	621a      	str	r2, [r3, #32]
 80037d6:	4bab      	ldr	r3, [pc, #684]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80037d8:	6a1a      	ldr	r2, [r3, #32]
 80037da:	4baa      	ldr	r3, [pc, #680]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80037dc:	2101      	movs	r1, #1
 80037de:	430a      	orrs	r2, r1
 80037e0:	621a      	str	r2, [r3, #32]
 80037e2:	e00b      	b.n	80037fc <HAL_RCC_OscConfig+0x398>
 80037e4:	4ba7      	ldr	r3, [pc, #668]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80037e6:	6a1a      	ldr	r2, [r3, #32]
 80037e8:	4ba6      	ldr	r3, [pc, #664]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80037ea:	2101      	movs	r1, #1
 80037ec:	438a      	bics	r2, r1
 80037ee:	621a      	str	r2, [r3, #32]
 80037f0:	4ba4      	ldr	r3, [pc, #656]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	4ba3      	ldr	r3, [pc, #652]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80037f6:	2104      	movs	r1, #4
 80037f8:	438a      	bics	r2, r1
 80037fa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d014      	beq.n	800382e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003804:	f7fe fcdc 	bl	80021c0 <HAL_GetTick>
 8003808:	0003      	movs	r3, r0
 800380a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380c:	e009      	b.n	8003822 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800380e:	f7fe fcd7 	bl	80021c0 <HAL_GetTick>
 8003812:	0002      	movs	r2, r0
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	4a9b      	ldr	r2, [pc, #620]	@ (8003a88 <HAL_RCC_OscConfig+0x624>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e12b      	b.n	8003a7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003822:	4b98      	ldr	r3, [pc, #608]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	2202      	movs	r2, #2
 8003828:	4013      	ands	r3, r2
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x3aa>
 800382c:	e013      	b.n	8003856 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382e:	f7fe fcc7 	bl	80021c0 <HAL_GetTick>
 8003832:	0003      	movs	r3, r0
 8003834:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003836:	e009      	b.n	800384c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003838:	f7fe fcc2 	bl	80021c0 <HAL_GetTick>
 800383c:	0002      	movs	r2, r0
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	4a91      	ldr	r2, [pc, #580]	@ (8003a88 <HAL_RCC_OscConfig+0x624>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e116      	b.n	8003a7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384c:	4b8d      	ldr	r3, [pc, #564]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	2202      	movs	r2, #2
 8003852:	4013      	ands	r3, r2
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003856:	231f      	movs	r3, #31
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d105      	bne.n	800386c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003860:	4b88      	ldr	r3, [pc, #544]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 8003862:	69da      	ldr	r2, [r3, #28]
 8003864:	4b87      	ldr	r3, [pc, #540]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 8003866:	4989      	ldr	r1, [pc, #548]	@ (8003a8c <HAL_RCC_OscConfig+0x628>)
 8003868:	400a      	ands	r2, r1
 800386a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2210      	movs	r2, #16
 8003872:	4013      	ands	r3, r2
 8003874:	d063      	beq.n	800393e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d12a      	bne.n	80038d4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800387e:	4b81      	ldr	r3, [pc, #516]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 8003880:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003882:	4b80      	ldr	r3, [pc, #512]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 8003884:	2104      	movs	r1, #4
 8003886:	430a      	orrs	r2, r1
 8003888:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800388a:	4b7e      	ldr	r3, [pc, #504]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 800388c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800388e:	4b7d      	ldr	r3, [pc, #500]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 8003890:	2101      	movs	r1, #1
 8003892:	430a      	orrs	r2, r1
 8003894:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003896:	f7fe fc93 	bl	80021c0 <HAL_GetTick>
 800389a:	0003      	movs	r3, r0
 800389c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80038a0:	f7fe fc8e 	bl	80021c0 <HAL_GetTick>
 80038a4:	0002      	movs	r2, r0
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e0e3      	b.n	8003a7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80038b2:	4b74      	ldr	r3, [pc, #464]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80038b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b6:	2202      	movs	r2, #2
 80038b8:	4013      	ands	r3, r2
 80038ba:	d0f1      	beq.n	80038a0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80038bc:	4b71      	ldr	r3, [pc, #452]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80038be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c0:	22f8      	movs	r2, #248	@ 0xf8
 80038c2:	4393      	bics	r3, r2
 80038c4:	0019      	movs	r1, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	00da      	lsls	r2, r3, #3
 80038cc:	4b6d      	ldr	r3, [pc, #436]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80038ce:	430a      	orrs	r2, r1
 80038d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80038d2:	e034      	b.n	800393e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	3305      	adds	r3, #5
 80038da:	d111      	bne.n	8003900 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80038dc:	4b69      	ldr	r3, [pc, #420]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80038de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038e0:	4b68      	ldr	r3, [pc, #416]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80038e2:	2104      	movs	r1, #4
 80038e4:	438a      	bics	r2, r1
 80038e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80038e8:	4b66      	ldr	r3, [pc, #408]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80038ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ec:	22f8      	movs	r2, #248	@ 0xf8
 80038ee:	4393      	bics	r3, r2
 80038f0:	0019      	movs	r1, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	00da      	lsls	r2, r3, #3
 80038f8:	4b62      	ldr	r3, [pc, #392]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80038fa:	430a      	orrs	r2, r1
 80038fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80038fe:	e01e      	b.n	800393e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003900:	4b60      	ldr	r3, [pc, #384]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 8003902:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003904:	4b5f      	ldr	r3, [pc, #380]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 8003906:	2104      	movs	r1, #4
 8003908:	430a      	orrs	r2, r1
 800390a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800390c:	4b5d      	ldr	r3, [pc, #372]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 800390e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003910:	4b5c      	ldr	r3, [pc, #368]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 8003912:	2101      	movs	r1, #1
 8003914:	438a      	bics	r2, r1
 8003916:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003918:	f7fe fc52 	bl	80021c0 <HAL_GetTick>
 800391c:	0003      	movs	r3, r0
 800391e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003922:	f7fe fc4d 	bl	80021c0 <HAL_GetTick>
 8003926:	0002      	movs	r2, r0
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e0a2      	b.n	8003a7a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003934:	4b53      	ldr	r3, [pc, #332]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 8003936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003938:	2202      	movs	r2, #2
 800393a:	4013      	ands	r3, r2
 800393c:	d1f1      	bne.n	8003922 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d100      	bne.n	8003948 <HAL_RCC_OscConfig+0x4e4>
 8003946:	e097      	b.n	8003a78 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003948:	4b4e      	ldr	r3, [pc, #312]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	220c      	movs	r2, #12
 800394e:	4013      	ands	r3, r2
 8003950:	2b08      	cmp	r3, #8
 8003952:	d100      	bne.n	8003956 <HAL_RCC_OscConfig+0x4f2>
 8003954:	e06b      	b.n	8003a2e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	2b02      	cmp	r3, #2
 800395c:	d14c      	bne.n	80039f8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395e:	4b49      	ldr	r3, [pc, #292]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	4b48      	ldr	r3, [pc, #288]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 8003964:	494a      	ldr	r1, [pc, #296]	@ (8003a90 <HAL_RCC_OscConfig+0x62c>)
 8003966:	400a      	ands	r2, r1
 8003968:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396a:	f7fe fc29 	bl	80021c0 <HAL_GetTick>
 800396e:	0003      	movs	r3, r0
 8003970:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003974:	f7fe fc24 	bl	80021c0 <HAL_GetTick>
 8003978:	0002      	movs	r2, r0
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e079      	b.n	8003a7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003986:	4b3f      	ldr	r3, [pc, #252]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	2380      	movs	r3, #128	@ 0x80
 800398c:	049b      	lsls	r3, r3, #18
 800398e:	4013      	ands	r3, r2
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003992:	4b3c      	ldr	r3, [pc, #240]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 8003994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003996:	220f      	movs	r2, #15
 8003998:	4393      	bics	r3, r2
 800399a:	0019      	movs	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039a0:	4b38      	ldr	r3, [pc, #224]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80039a2:	430a      	orrs	r2, r1
 80039a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80039a6:	4b37      	ldr	r3, [pc, #220]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4a3a      	ldr	r2, [pc, #232]	@ (8003a94 <HAL_RCC_OscConfig+0x630>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	0019      	movs	r1, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	431a      	orrs	r2, r3
 80039ba:	4b32      	ldr	r3, [pc, #200]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80039bc:	430a      	orrs	r2, r1
 80039be:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039c0:	4b30      	ldr	r3, [pc, #192]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80039c6:	2180      	movs	r1, #128	@ 0x80
 80039c8:	0449      	lsls	r1, r1, #17
 80039ca:	430a      	orrs	r2, r1
 80039cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ce:	f7fe fbf7 	bl	80021c0 <HAL_GetTick>
 80039d2:	0003      	movs	r3, r0
 80039d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d8:	f7fe fbf2 	bl	80021c0 <HAL_GetTick>
 80039dc:	0002      	movs	r2, r0
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e047      	b.n	8003a7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039ea:	4b26      	ldr	r3, [pc, #152]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	2380      	movs	r3, #128	@ 0x80
 80039f0:	049b      	lsls	r3, r3, #18
 80039f2:	4013      	ands	r3, r2
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x574>
 80039f6:	e03f      	b.n	8003a78 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f8:	4b22      	ldr	r3, [pc, #136]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4b21      	ldr	r3, [pc, #132]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 80039fe:	4924      	ldr	r1, [pc, #144]	@ (8003a90 <HAL_RCC_OscConfig+0x62c>)
 8003a00:	400a      	ands	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a04:	f7fe fbdc 	bl	80021c0 <HAL_GetTick>
 8003a08:	0003      	movs	r3, r0
 8003a0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a0e:	f7fe fbd7 	bl	80021c0 <HAL_GetTick>
 8003a12:	0002      	movs	r2, r0
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e02c      	b.n	8003a7a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a20:	4b18      	ldr	r3, [pc, #96]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	2380      	movs	r3, #128	@ 0x80
 8003a26:	049b      	lsls	r3, r3, #18
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d1f0      	bne.n	8003a0e <HAL_RCC_OscConfig+0x5aa>
 8003a2c:	e024      	b.n	8003a78 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e01f      	b.n	8003a7a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003a3a:	4b12      	ldr	r3, [pc, #72]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003a40:	4b10      	ldr	r3, [pc, #64]	@ (8003a84 <HAL_RCC_OscConfig+0x620>)
 8003a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a44:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	2380      	movs	r3, #128	@ 0x80
 8003a4a:	025b      	lsls	r3, r3, #9
 8003a4c:	401a      	ands	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d10e      	bne.n	8003a74 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	220f      	movs	r2, #15
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d107      	bne.n	8003a74 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	23f0      	movs	r3, #240	@ 0xf0
 8003a68:	039b      	lsls	r3, r3, #14
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	b008      	add	sp, #32
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	46c0      	nop			@ (mov r8, r8)
 8003a84:	40021000 	.word	0x40021000
 8003a88:	00001388 	.word	0x00001388
 8003a8c:	efffffff 	.word	0xefffffff
 8003a90:	feffffff 	.word	0xfeffffff
 8003a94:	ffc2ffff 	.word	0xffc2ffff

08003a98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0b3      	b.n	8003c14 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003aac:	4b5b      	ldr	r3, [pc, #364]	@ (8003c1c <HAL_RCC_ClockConfig+0x184>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d911      	bls.n	8003ade <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aba:	4b58      	ldr	r3, [pc, #352]	@ (8003c1c <HAL_RCC_ClockConfig+0x184>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	4393      	bics	r3, r2
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	4b55      	ldr	r3, [pc, #340]	@ (8003c1c <HAL_RCC_ClockConfig+0x184>)
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003acc:	4b53      	ldr	r3, [pc, #332]	@ (8003c1c <HAL_RCC_ClockConfig+0x184>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d001      	beq.n	8003ade <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e09a      	b.n	8003c14 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d015      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2204      	movs	r2, #4
 8003aee:	4013      	ands	r3, r2
 8003af0:	d006      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003af2:	4b4b      	ldr	r3, [pc, #300]	@ (8003c20 <HAL_RCC_ClockConfig+0x188>)
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	4b4a      	ldr	r3, [pc, #296]	@ (8003c20 <HAL_RCC_ClockConfig+0x188>)
 8003af8:	21e0      	movs	r1, #224	@ 0xe0
 8003afa:	00c9      	lsls	r1, r1, #3
 8003afc:	430a      	orrs	r2, r1
 8003afe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b00:	4b47      	ldr	r3, [pc, #284]	@ (8003c20 <HAL_RCC_ClockConfig+0x188>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	22f0      	movs	r2, #240	@ 0xf0
 8003b06:	4393      	bics	r3, r2
 8003b08:	0019      	movs	r1, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	4b44      	ldr	r3, [pc, #272]	@ (8003c20 <HAL_RCC_ClockConfig+0x188>)
 8003b10:	430a      	orrs	r2, r1
 8003b12:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d040      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d107      	bne.n	8003b36 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b26:	4b3e      	ldr	r3, [pc, #248]	@ (8003c20 <HAL_RCC_ClockConfig+0x188>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	2380      	movs	r3, #128	@ 0x80
 8003b2c:	029b      	lsls	r3, r3, #10
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d114      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e06e      	b.n	8003c14 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d107      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3e:	4b38      	ldr	r3, [pc, #224]	@ (8003c20 <HAL_RCC_ClockConfig+0x188>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	2380      	movs	r3, #128	@ 0x80
 8003b44:	049b      	lsls	r3, r3, #18
 8003b46:	4013      	ands	r3, r2
 8003b48:	d108      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e062      	b.n	8003c14 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b4e:	4b34      	ldr	r3, [pc, #208]	@ (8003c20 <HAL_RCC_ClockConfig+0x188>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2202      	movs	r2, #2
 8003b54:	4013      	ands	r3, r2
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e05b      	b.n	8003c14 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b5c:	4b30      	ldr	r3, [pc, #192]	@ (8003c20 <HAL_RCC_ClockConfig+0x188>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2203      	movs	r2, #3
 8003b62:	4393      	bics	r3, r2
 8003b64:	0019      	movs	r1, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8003c20 <HAL_RCC_ClockConfig+0x188>)
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b70:	f7fe fb26 	bl	80021c0 <HAL_GetTick>
 8003b74:	0003      	movs	r3, r0
 8003b76:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b78:	e009      	b.n	8003b8e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b7a:	f7fe fb21 	bl	80021c0 <HAL_GetTick>
 8003b7e:	0002      	movs	r2, r0
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	4a27      	ldr	r2, [pc, #156]	@ (8003c24 <HAL_RCC_ClockConfig+0x18c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e042      	b.n	8003c14 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8e:	4b24      	ldr	r3, [pc, #144]	@ (8003c20 <HAL_RCC_ClockConfig+0x188>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	220c      	movs	r2, #12
 8003b94:	401a      	ands	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d1ec      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8003c1c <HAL_RCC_ClockConfig+0x184>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d211      	bcs.n	8003bd2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bae:	4b1b      	ldr	r3, [pc, #108]	@ (8003c1c <HAL_RCC_ClockConfig+0x184>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	4393      	bics	r3, r2
 8003bb6:	0019      	movs	r1, r3
 8003bb8:	4b18      	ldr	r3, [pc, #96]	@ (8003c1c <HAL_RCC_ClockConfig+0x184>)
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc0:	4b16      	ldr	r3, [pc, #88]	@ (8003c1c <HAL_RCC_ClockConfig+0x184>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d001      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e020      	b.n	8003c14 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d009      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003bdc:	4b10      	ldr	r3, [pc, #64]	@ (8003c20 <HAL_RCC_ClockConfig+0x188>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	4a11      	ldr	r2, [pc, #68]	@ (8003c28 <HAL_RCC_ClockConfig+0x190>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	0019      	movs	r1, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	4b0d      	ldr	r3, [pc, #52]	@ (8003c20 <HAL_RCC_ClockConfig+0x188>)
 8003bec:	430a      	orrs	r2, r1
 8003bee:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003bf0:	f000 f820 	bl	8003c34 <HAL_RCC_GetSysClockFreq>
 8003bf4:	0001      	movs	r1, r0
 8003bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8003c20 <HAL_RCC_ClockConfig+0x188>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	091b      	lsrs	r3, r3, #4
 8003bfc:	220f      	movs	r2, #15
 8003bfe:	4013      	ands	r3, r2
 8003c00:	4a0a      	ldr	r2, [pc, #40]	@ (8003c2c <HAL_RCC_ClockConfig+0x194>)
 8003c02:	5cd3      	ldrb	r3, [r2, r3]
 8003c04:	000a      	movs	r2, r1
 8003c06:	40da      	lsrs	r2, r3
 8003c08:	4b09      	ldr	r3, [pc, #36]	@ (8003c30 <HAL_RCC_ClockConfig+0x198>)
 8003c0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	f7fe fa91 	bl	8002134 <HAL_InitTick>
  
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	0018      	movs	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b004      	add	sp, #16
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40022000 	.word	0x40022000
 8003c20:	40021000 	.word	0x40021000
 8003c24:	00001388 	.word	0x00001388
 8003c28:	fffff8ff 	.word	0xfffff8ff
 8003c2c:	08004cbc 	.word	0x08004cbc
 8003c30:	20000000 	.word	0x20000000

08003c34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	2300      	movs	r3, #0
 8003c48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003c4e:	4b20      	ldr	r3, [pc, #128]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	220c      	movs	r2, #12
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d002      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0x30>
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d003      	beq.n	8003c6a <HAL_RCC_GetSysClockFreq+0x36>
 8003c62:	e02c      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c64:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c66:	613b      	str	r3, [r7, #16]
      break;
 8003c68:	e02c      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	0c9b      	lsrs	r3, r3, #18
 8003c6e:	220f      	movs	r2, #15
 8003c70:	4013      	ands	r3, r2
 8003c72:	4a19      	ldr	r2, [pc, #100]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c74:	5cd3      	ldrb	r3, [r2, r3]
 8003c76:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003c78:	4b15      	ldr	r3, [pc, #84]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7c:	220f      	movs	r2, #15
 8003c7e:	4013      	ands	r3, r2
 8003c80:	4a16      	ldr	r2, [pc, #88]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0xa8>)
 8003c82:	5cd3      	ldrb	r3, [r2, r3]
 8003c84:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	2380      	movs	r3, #128	@ 0x80
 8003c8a:	025b      	lsls	r3, r3, #9
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d009      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	4810      	ldr	r0, [pc, #64]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c94:	f7fc fa38 	bl	8000108 <__udivsi3>
 8003c98:	0003      	movs	r3, r0
 8003c9a:	001a      	movs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4353      	muls	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	e009      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	000a      	movs	r2, r1
 8003ca8:	0152      	lsls	r2, r2, #5
 8003caa:	1a52      	subs	r2, r2, r1
 8003cac:	0193      	lsls	r3, r2, #6
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	185b      	adds	r3, r3, r1
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	613b      	str	r3, [r7, #16]
      break;
 8003cbc:	e002      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cbe:	4b05      	ldr	r3, [pc, #20]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cc0:	613b      	str	r3, [r7, #16]
      break;
 8003cc2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003cc4:	693b      	ldr	r3, [r7, #16]
}
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b006      	add	sp, #24
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	46c0      	nop			@ (mov r8, r8)
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	007a1200 	.word	0x007a1200
 8003cd8:	08004ccc 	.word	0x08004ccc
 8003cdc:	08004cdc 	.word	0x08004cdc

08003ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	2380      	movs	r3, #128	@ 0x80
 8003cf6:	025b      	lsls	r3, r3, #9
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d100      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003cfc:	e08e      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003cfe:	2017      	movs	r0, #23
 8003d00:	183b      	adds	r3, r7, r0
 8003d02:	2200      	movs	r2, #0
 8003d04:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d06:	4b5f      	ldr	r3, [pc, #380]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d08:	69da      	ldr	r2, [r3, #28]
 8003d0a:	2380      	movs	r3, #128	@ 0x80
 8003d0c:	055b      	lsls	r3, r3, #21
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d110      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d12:	4b5c      	ldr	r3, [pc, #368]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d14:	69da      	ldr	r2, [r3, #28]
 8003d16:	4b5b      	ldr	r3, [pc, #364]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d18:	2180      	movs	r1, #128	@ 0x80
 8003d1a:	0549      	lsls	r1, r1, #21
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	61da      	str	r2, [r3, #28]
 8003d20:	4b58      	ldr	r3, [pc, #352]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d22:	69da      	ldr	r2, [r3, #28]
 8003d24:	2380      	movs	r3, #128	@ 0x80
 8003d26:	055b      	lsls	r3, r3, #21
 8003d28:	4013      	ands	r3, r2
 8003d2a:	60bb      	str	r3, [r7, #8]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d2e:	183b      	adds	r3, r7, r0
 8003d30:	2201      	movs	r2, #1
 8003d32:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d34:	4b54      	ldr	r3, [pc, #336]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	2380      	movs	r3, #128	@ 0x80
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d11a      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d40:	4b51      	ldr	r3, [pc, #324]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	4b50      	ldr	r3, [pc, #320]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d46:	2180      	movs	r1, #128	@ 0x80
 8003d48:	0049      	lsls	r1, r1, #1
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d4e:	f7fe fa37 	bl	80021c0 <HAL_GetTick>
 8003d52:	0003      	movs	r3, r0
 8003d54:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d56:	e008      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d58:	f7fe fa32 	bl	80021c0 <HAL_GetTick>
 8003d5c:	0002      	movs	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b64      	cmp	r3, #100	@ 0x64
 8003d64:	d901      	bls.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e087      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6a:	4b47      	ldr	r3, [pc, #284]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	2380      	movs	r3, #128	@ 0x80
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	4013      	ands	r3, r2
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d76:	4b43      	ldr	r3, [pc, #268]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d78:	6a1a      	ldr	r2, [r3, #32]
 8003d7a:	23c0      	movs	r3, #192	@ 0xc0
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4013      	ands	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d034      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	23c0      	movs	r3, #192	@ 0xc0
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4013      	ands	r3, r2
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d02c      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d98:	4b3a      	ldr	r3, [pc, #232]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	4a3b      	ldr	r2, [pc, #236]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003da2:	4b38      	ldr	r3, [pc, #224]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003da4:	6a1a      	ldr	r2, [r3, #32]
 8003da6:	4b37      	ldr	r3, [pc, #220]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003da8:	2180      	movs	r1, #128	@ 0x80
 8003daa:	0249      	lsls	r1, r1, #9
 8003dac:	430a      	orrs	r2, r1
 8003dae:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003db0:	4b34      	ldr	r3, [pc, #208]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003db2:	6a1a      	ldr	r2, [r3, #32]
 8003db4:	4b33      	ldr	r3, [pc, #204]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003db6:	4936      	ldr	r1, [pc, #216]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003db8:	400a      	ands	r2, r1
 8003dba:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dbc:	4b31      	ldr	r3, [pc, #196]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dca:	f7fe f9f9 	bl	80021c0 <HAL_GetTick>
 8003dce:	0003      	movs	r3, r0
 8003dd0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd2:	e009      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd4:	f7fe f9f4 	bl	80021c0 <HAL_GetTick>
 8003dd8:	0002      	movs	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	4a2d      	ldr	r2, [pc, #180]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e048      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de8:	4b26      	ldr	r3, [pc, #152]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	2202      	movs	r2, #2
 8003dee:	4013      	ands	r3, r2
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003df2:	4b24      	ldr	r3, [pc, #144]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	4a25      	ldr	r2, [pc, #148]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	0019      	movs	r1, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	4b20      	ldr	r3, [pc, #128]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e02:	430a      	orrs	r2, r1
 8003e04:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e06:	2317      	movs	r3, #23
 8003e08:	18fb      	adds	r3, r7, r3
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e10:	4b1c      	ldr	r3, [pc, #112]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e12:	69da      	ldr	r2, [r3, #28]
 8003e14:	4b1b      	ldr	r3, [pc, #108]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e16:	4920      	ldr	r1, [pc, #128]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e18:	400a      	ands	r2, r1
 8003e1a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2201      	movs	r2, #1
 8003e22:	4013      	ands	r3, r2
 8003e24:	d009      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e26:	4b17      	ldr	r3, [pc, #92]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2a:	2203      	movs	r2, #3
 8003e2c:	4393      	bics	r3, r2
 8003e2e:	0019      	movs	r1, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	4b13      	ldr	r3, [pc, #76]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e36:	430a      	orrs	r2, r1
 8003e38:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	4013      	ands	r3, r2
 8003e42:	d009      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e44:	4b0f      	ldr	r3, [pc, #60]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e48:	2210      	movs	r2, #16
 8003e4a:	4393      	bics	r3, r2
 8003e4c:	0019      	movs	r1, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	4b0c      	ldr	r3, [pc, #48]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e54:	430a      	orrs	r2, r1
 8003e56:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	2380      	movs	r3, #128	@ 0x80
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4013      	ands	r3, r2
 8003e62:	d009      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e64:	4b07      	ldr	r3, [pc, #28]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e68:	2240      	movs	r2, #64	@ 0x40
 8003e6a:	4393      	bics	r3, r2
 8003e6c:	0019      	movs	r1, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	4b04      	ldr	r3, [pc, #16]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003e74:	430a      	orrs	r2, r1
 8003e76:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b006      	add	sp, #24
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40007000 	.word	0x40007000
 8003e8c:	fffffcff 	.word	0xfffffcff
 8003e90:	fffeffff 	.word	0xfffeffff
 8003e94:	00001388 	.word	0x00001388
 8003e98:	efffffff 	.word	0xefffffff

08003e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e042      	b.n	8003f34 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	223d      	movs	r2, #61	@ 0x3d
 8003eb2:	5c9b      	ldrb	r3, [r3, r2]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d107      	bne.n	8003eca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	223c      	movs	r2, #60	@ 0x3c
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f7fe f84d 	bl	8001f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	223d      	movs	r2, #61	@ 0x3d
 8003ece:	2102      	movs	r1, #2
 8003ed0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	0019      	movs	r1, r3
 8003edc:	0010      	movs	r0, r2
 8003ede:	f000 fb5b 	bl	8004598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2246      	movs	r2, #70	@ 0x46
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	223e      	movs	r2, #62	@ 0x3e
 8003eee:	2101      	movs	r1, #1
 8003ef0:	5499      	strb	r1, [r3, r2]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	223f      	movs	r2, #63	@ 0x3f
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	5499      	strb	r1, [r3, r2]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2240      	movs	r2, #64	@ 0x40
 8003efe:	2101      	movs	r1, #1
 8003f00:	5499      	strb	r1, [r3, r2]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2241      	movs	r2, #65	@ 0x41
 8003f06:	2101      	movs	r1, #1
 8003f08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2242      	movs	r2, #66	@ 0x42
 8003f0e:	2101      	movs	r1, #1
 8003f10:	5499      	strb	r1, [r3, r2]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2243      	movs	r2, #67	@ 0x43
 8003f16:	2101      	movs	r1, #1
 8003f18:	5499      	strb	r1, [r3, r2]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2244      	movs	r2, #68	@ 0x44
 8003f1e:	2101      	movs	r1, #1
 8003f20:	5499      	strb	r1, [r3, r2]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2245      	movs	r2, #69	@ 0x45
 8003f26:	2101      	movs	r1, #1
 8003f28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	223d      	movs	r2, #61	@ 0x3d
 8003f2e:	2101      	movs	r1, #1
 8003f30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	0018      	movs	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	b002      	add	sp, #8
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	223d      	movs	r2, #61	@ 0x3d
 8003f48:	5c9b      	ldrb	r3, [r3, r2]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d001      	beq.n	8003f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e03b      	b.n	8003fcc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	223d      	movs	r2, #61	@ 0x3d
 8003f58:	2102      	movs	r1, #2
 8003f5a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2101      	movs	r1, #1
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a18      	ldr	r2, [pc, #96]	@ (8003fd4 <HAL_TIM_Base_Start_IT+0x98>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00f      	beq.n	8003f96 <HAL_TIM_Base_Start_IT+0x5a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	2380      	movs	r3, #128	@ 0x80
 8003f7c:	05db      	lsls	r3, r3, #23
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d009      	beq.n	8003f96 <HAL_TIM_Base_Start_IT+0x5a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a14      	ldr	r2, [pc, #80]	@ (8003fd8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d004      	beq.n	8003f96 <HAL_TIM_Base_Start_IT+0x5a>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a12      	ldr	r2, [pc, #72]	@ (8003fdc <HAL_TIM_Base_Start_IT+0xa0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d111      	bne.n	8003fba <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2207      	movs	r2, #7
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b06      	cmp	r3, #6
 8003fa6:	d010      	beq.n	8003fca <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb8:	e007      	b.n	8003fca <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	0018      	movs	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b004      	add	sp, #16
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40012c00 	.word	0x40012c00
 8003fd8:	40000400 	.word	0x40000400
 8003fdc:	40014000 	.word	0x40014000

08003fe0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e042      	b.n	8004078 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	223d      	movs	r2, #61	@ 0x3d
 8003ff6:	5c9b      	ldrb	r3, [r3, r2]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d107      	bne.n	800400e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	223c      	movs	r2, #60	@ 0x3c
 8004002:	2100      	movs	r1, #0
 8004004:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	0018      	movs	r0, r3
 800400a:	f7fd ff8d 	bl	8001f28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	223d      	movs	r2, #61	@ 0x3d
 8004012:	2102      	movs	r1, #2
 8004014:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3304      	adds	r3, #4
 800401e:	0019      	movs	r1, r3
 8004020:	0010      	movs	r0, r2
 8004022:	f000 fab9 	bl	8004598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2246      	movs	r2, #70	@ 0x46
 800402a:	2101      	movs	r1, #1
 800402c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	223e      	movs	r2, #62	@ 0x3e
 8004032:	2101      	movs	r1, #1
 8004034:	5499      	strb	r1, [r3, r2]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	223f      	movs	r2, #63	@ 0x3f
 800403a:	2101      	movs	r1, #1
 800403c:	5499      	strb	r1, [r3, r2]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2240      	movs	r2, #64	@ 0x40
 8004042:	2101      	movs	r1, #1
 8004044:	5499      	strb	r1, [r3, r2]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2241      	movs	r2, #65	@ 0x41
 800404a:	2101      	movs	r1, #1
 800404c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2242      	movs	r2, #66	@ 0x42
 8004052:	2101      	movs	r1, #1
 8004054:	5499      	strb	r1, [r3, r2]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2243      	movs	r2, #67	@ 0x43
 800405a:	2101      	movs	r1, #1
 800405c:	5499      	strb	r1, [r3, r2]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2244      	movs	r2, #68	@ 0x44
 8004062:	2101      	movs	r1, #1
 8004064:	5499      	strb	r1, [r3, r2]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2245      	movs	r2, #69	@ 0x45
 800406a:	2101      	movs	r1, #1
 800406c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	223d      	movs	r2, #61	@ 0x3d
 8004072:	2101      	movs	r1, #1
 8004074:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	0018      	movs	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	b002      	add	sp, #8
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d108      	bne.n	80040a2 <HAL_TIM_PWM_Start+0x22>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	223e      	movs	r2, #62	@ 0x3e
 8004094:	5c9b      	ldrb	r3, [r3, r2]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	1e5a      	subs	r2, r3, #1
 800409c:	4193      	sbcs	r3, r2
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	e01f      	b.n	80040e2 <HAL_TIM_PWM_Start+0x62>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d108      	bne.n	80040ba <HAL_TIM_PWM_Start+0x3a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	223f      	movs	r2, #63	@ 0x3f
 80040ac:	5c9b      	ldrb	r3, [r3, r2]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	1e5a      	subs	r2, r3, #1
 80040b4:	4193      	sbcs	r3, r2
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	e013      	b.n	80040e2 <HAL_TIM_PWM_Start+0x62>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d108      	bne.n	80040d2 <HAL_TIM_PWM_Start+0x52>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2240      	movs	r2, #64	@ 0x40
 80040c4:	5c9b      	ldrb	r3, [r3, r2]
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	1e5a      	subs	r2, r3, #1
 80040cc:	4193      	sbcs	r3, r2
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	e007      	b.n	80040e2 <HAL_TIM_PWM_Start+0x62>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2241      	movs	r2, #65	@ 0x41
 80040d6:	5c9b      	ldrb	r3, [r3, r2]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	1e5a      	subs	r2, r3, #1
 80040de:	4193      	sbcs	r3, r2
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e074      	b.n	80041d4 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d104      	bne.n	80040fa <HAL_TIM_PWM_Start+0x7a>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	223e      	movs	r2, #62	@ 0x3e
 80040f4:	2102      	movs	r1, #2
 80040f6:	5499      	strb	r1, [r3, r2]
 80040f8:	e013      	b.n	8004122 <HAL_TIM_PWM_Start+0xa2>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d104      	bne.n	800410a <HAL_TIM_PWM_Start+0x8a>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	223f      	movs	r2, #63	@ 0x3f
 8004104:	2102      	movs	r1, #2
 8004106:	5499      	strb	r1, [r3, r2]
 8004108:	e00b      	b.n	8004122 <HAL_TIM_PWM_Start+0xa2>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d104      	bne.n	800411a <HAL_TIM_PWM_Start+0x9a>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2240      	movs	r2, #64	@ 0x40
 8004114:	2102      	movs	r1, #2
 8004116:	5499      	strb	r1, [r3, r2]
 8004118:	e003      	b.n	8004122 <HAL_TIM_PWM_Start+0xa2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2241      	movs	r2, #65	@ 0x41
 800411e:	2102      	movs	r1, #2
 8004120:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6839      	ldr	r1, [r7, #0]
 8004128:	2201      	movs	r2, #1
 800412a:	0018      	movs	r0, r3
 800412c:	f000 fcbe 	bl	8004aac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a29      	ldr	r2, [pc, #164]	@ (80041dc <HAL_TIM_PWM_Start+0x15c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d00e      	beq.n	8004158 <HAL_TIM_PWM_Start+0xd8>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a28      	ldr	r2, [pc, #160]	@ (80041e0 <HAL_TIM_PWM_Start+0x160>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d009      	beq.n	8004158 <HAL_TIM_PWM_Start+0xd8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a26      	ldr	r2, [pc, #152]	@ (80041e4 <HAL_TIM_PWM_Start+0x164>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d004      	beq.n	8004158 <HAL_TIM_PWM_Start+0xd8>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a25      	ldr	r2, [pc, #148]	@ (80041e8 <HAL_TIM_PWM_Start+0x168>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d101      	bne.n	800415c <HAL_TIM_PWM_Start+0xdc>
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <HAL_TIM_PWM_Start+0xde>
 800415c:	2300      	movs	r3, #0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d008      	beq.n	8004174 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2180      	movs	r1, #128	@ 0x80
 800416e:	0209      	lsls	r1, r1, #8
 8004170:	430a      	orrs	r2, r1
 8004172:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a18      	ldr	r2, [pc, #96]	@ (80041dc <HAL_TIM_PWM_Start+0x15c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00f      	beq.n	800419e <HAL_TIM_PWM_Start+0x11e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	2380      	movs	r3, #128	@ 0x80
 8004184:	05db      	lsls	r3, r3, #23
 8004186:	429a      	cmp	r2, r3
 8004188:	d009      	beq.n	800419e <HAL_TIM_PWM_Start+0x11e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a17      	ldr	r2, [pc, #92]	@ (80041ec <HAL_TIM_PWM_Start+0x16c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d004      	beq.n	800419e <HAL_TIM_PWM_Start+0x11e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a11      	ldr	r2, [pc, #68]	@ (80041e0 <HAL_TIM_PWM_Start+0x160>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d111      	bne.n	80041c2 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	2207      	movs	r2, #7
 80041a6:	4013      	ands	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2b06      	cmp	r3, #6
 80041ae:	d010      	beq.n	80041d2 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2101      	movs	r1, #1
 80041bc:	430a      	orrs	r2, r1
 80041be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c0:	e007      	b.n	80041d2 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2101      	movs	r1, #1
 80041ce:	430a      	orrs	r2, r1
 80041d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	0018      	movs	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b004      	add	sp, #16
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40012c00 	.word	0x40012c00
 80041e0:	40014000 	.word	0x40014000
 80041e4:	40014400 	.word	0x40014400
 80041e8:	40014800 	.word	0x40014800
 80041ec:	40000400 	.word	0x40000400

080041f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2202      	movs	r2, #2
 800420c:	4013      	ands	r3, r2
 800420e:	d021      	beq.n	8004254 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2202      	movs	r2, #2
 8004214:	4013      	ands	r3, r2
 8004216:	d01d      	beq.n	8004254 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2203      	movs	r2, #3
 800421e:	4252      	negs	r2, r2
 8004220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	2203      	movs	r2, #3
 8004230:	4013      	ands	r3, r2
 8004232:	d004      	beq.n	800423e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	0018      	movs	r0, r3
 8004238:	f000 f996 	bl	8004568 <HAL_TIM_IC_CaptureCallback>
 800423c:	e007      	b.n	800424e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	0018      	movs	r0, r3
 8004242:	f000 f989 	bl	8004558 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	0018      	movs	r0, r3
 800424a:	f000 f995 	bl	8004578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2204      	movs	r2, #4
 8004258:	4013      	ands	r3, r2
 800425a:	d022      	beq.n	80042a2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2204      	movs	r2, #4
 8004260:	4013      	ands	r3, r2
 8004262:	d01e      	beq.n	80042a2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2205      	movs	r2, #5
 800426a:	4252      	negs	r2, r2
 800426c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2202      	movs	r2, #2
 8004272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	23c0      	movs	r3, #192	@ 0xc0
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4013      	ands	r3, r2
 8004280:	d004      	beq.n	800428c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	0018      	movs	r0, r3
 8004286:	f000 f96f 	bl	8004568 <HAL_TIM_IC_CaptureCallback>
 800428a:	e007      	b.n	800429c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	0018      	movs	r0, r3
 8004290:	f000 f962 	bl	8004558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	0018      	movs	r0, r3
 8004298:	f000 f96e 	bl	8004578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2208      	movs	r2, #8
 80042a6:	4013      	ands	r3, r2
 80042a8:	d021      	beq.n	80042ee <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2208      	movs	r2, #8
 80042ae:	4013      	ands	r3, r2
 80042b0:	d01d      	beq.n	80042ee <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2209      	movs	r2, #9
 80042b8:	4252      	negs	r2, r2
 80042ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2204      	movs	r2, #4
 80042c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	2203      	movs	r2, #3
 80042ca:	4013      	ands	r3, r2
 80042cc:	d004      	beq.n	80042d8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	0018      	movs	r0, r3
 80042d2:	f000 f949 	bl	8004568 <HAL_TIM_IC_CaptureCallback>
 80042d6:	e007      	b.n	80042e8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	0018      	movs	r0, r3
 80042dc:	f000 f93c 	bl	8004558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	0018      	movs	r0, r3
 80042e4:	f000 f948 	bl	8004578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2210      	movs	r2, #16
 80042f2:	4013      	ands	r3, r2
 80042f4:	d022      	beq.n	800433c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2210      	movs	r2, #16
 80042fa:	4013      	ands	r3, r2
 80042fc:	d01e      	beq.n	800433c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2211      	movs	r2, #17
 8004304:	4252      	negs	r2, r2
 8004306:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2208      	movs	r2, #8
 800430c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	69da      	ldr	r2, [r3, #28]
 8004314:	23c0      	movs	r3, #192	@ 0xc0
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4013      	ands	r3, r2
 800431a:	d004      	beq.n	8004326 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	0018      	movs	r0, r3
 8004320:	f000 f922 	bl	8004568 <HAL_TIM_IC_CaptureCallback>
 8004324:	e007      	b.n	8004336 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	0018      	movs	r0, r3
 800432a:	f000 f915 	bl	8004558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	0018      	movs	r0, r3
 8004332:	f000 f921 	bl	8004578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2201      	movs	r2, #1
 8004340:	4013      	ands	r3, r2
 8004342:	d00c      	beq.n	800435e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2201      	movs	r2, #1
 8004348:	4013      	ands	r3, r2
 800434a:	d008      	beq.n	800435e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2202      	movs	r2, #2
 8004352:	4252      	negs	r2, r2
 8004354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	0018      	movs	r0, r3
 800435a:	f7fd fcc5 	bl	8001ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2280      	movs	r2, #128	@ 0x80
 8004362:	4013      	ands	r3, r2
 8004364:	d00c      	beq.n	8004380 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2280      	movs	r2, #128	@ 0x80
 800436a:	4013      	ands	r3, r2
 800436c:	d008      	beq.n	8004380 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2281      	movs	r2, #129	@ 0x81
 8004374:	4252      	negs	r2, r2
 8004376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	0018      	movs	r0, r3
 800437c:	f000 fc20 	bl	8004bc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2240      	movs	r2, #64	@ 0x40
 8004384:	4013      	ands	r3, r2
 8004386:	d00c      	beq.n	80043a2 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2240      	movs	r2, #64	@ 0x40
 800438c:	4013      	ands	r3, r2
 800438e:	d008      	beq.n	80043a2 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2241      	movs	r2, #65	@ 0x41
 8004396:	4252      	negs	r2, r2
 8004398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	0018      	movs	r0, r3
 800439e:	f000 f8f3 	bl	8004588 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2220      	movs	r2, #32
 80043a6:	4013      	ands	r3, r2
 80043a8:	d00c      	beq.n	80043c4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2220      	movs	r2, #32
 80043ae:	4013      	ands	r3, r2
 80043b0:	d008      	beq.n	80043c4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2221      	movs	r2, #33	@ 0x21
 80043b8:	4252      	negs	r2, r2
 80043ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	0018      	movs	r0, r3
 80043c0:	f000 fbf6 	bl	8004bb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043c4:	46c0      	nop			@ (mov r8, r8)
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b004      	add	sp, #16
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d8:	2317      	movs	r3, #23
 80043da:	18fb      	adds	r3, r7, r3
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	223c      	movs	r2, #60	@ 0x3c
 80043e4:	5c9b      	ldrb	r3, [r3, r2]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d101      	bne.n	80043ee <HAL_TIM_PWM_ConfigChannel+0x22>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e0ad      	b.n	800454a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	223c      	movs	r2, #60	@ 0x3c
 80043f2:	2101      	movs	r1, #1
 80043f4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b0c      	cmp	r3, #12
 80043fa:	d100      	bne.n	80043fe <HAL_TIM_PWM_ConfigChannel+0x32>
 80043fc:	e076      	b.n	80044ec <HAL_TIM_PWM_ConfigChannel+0x120>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b0c      	cmp	r3, #12
 8004402:	d900      	bls.n	8004406 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004404:	e095      	b.n	8004532 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b08      	cmp	r3, #8
 800440a:	d04e      	beq.n	80044aa <HAL_TIM_PWM_ConfigChannel+0xde>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b08      	cmp	r3, #8
 8004410:	d900      	bls.n	8004414 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004412:	e08e      	b.n	8004532 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_TIM_PWM_ConfigChannel+0x56>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b04      	cmp	r3, #4
 800441e:	d021      	beq.n	8004464 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004420:	e087      	b.n	8004532 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	0011      	movs	r1, r2
 800442a:	0018      	movs	r0, r3
 800442c:	f000 f942 	bl	80046b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2108      	movs	r1, #8
 800443c:	430a      	orrs	r2, r1
 800443e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2104      	movs	r1, #4
 800444c:	438a      	bics	r2, r1
 800444e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6999      	ldr	r1, [r3, #24]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	691a      	ldr	r2, [r3, #16]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	619a      	str	r2, [r3, #24]
      break;
 8004462:	e06b      	b.n	800453c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	0011      	movs	r1, r2
 800446c:	0018      	movs	r0, r3
 800446e:	f000 f9a9 	bl	80047c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699a      	ldr	r2, [r3, #24]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2180      	movs	r1, #128	@ 0x80
 800447e:	0109      	lsls	r1, r1, #4
 8004480:	430a      	orrs	r2, r1
 8004482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699a      	ldr	r2, [r3, #24]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4931      	ldr	r1, [pc, #196]	@ (8004554 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004490:	400a      	ands	r2, r1
 8004492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6999      	ldr	r1, [r3, #24]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	021a      	lsls	r2, r3, #8
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	619a      	str	r2, [r3, #24]
      break;
 80044a8:	e048      	b.n	800453c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	0011      	movs	r1, r2
 80044b2:	0018      	movs	r0, r3
 80044b4:	f000 fa0a 	bl	80048cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	69da      	ldr	r2, [r3, #28]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2108      	movs	r1, #8
 80044c4:	430a      	orrs	r2, r1
 80044c6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69da      	ldr	r2, [r3, #28]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2104      	movs	r1, #4
 80044d4:	438a      	bics	r2, r1
 80044d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69d9      	ldr	r1, [r3, #28]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	61da      	str	r2, [r3, #28]
      break;
 80044ea:	e027      	b.n	800453c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	0011      	movs	r1, r2
 80044f4:	0018      	movs	r0, r3
 80044f6:	f000 fa6f 	bl	80049d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	69da      	ldr	r2, [r3, #28]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2180      	movs	r1, #128	@ 0x80
 8004506:	0109      	lsls	r1, r1, #4
 8004508:	430a      	orrs	r2, r1
 800450a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69da      	ldr	r2, [r3, #28]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	490f      	ldr	r1, [pc, #60]	@ (8004554 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004518:	400a      	ands	r2, r1
 800451a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69d9      	ldr	r1, [r3, #28]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	021a      	lsls	r2, r3, #8
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	61da      	str	r2, [r3, #28]
      break;
 8004530:	e004      	b.n	800453c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004532:	2317      	movs	r3, #23
 8004534:	18fb      	adds	r3, r7, r3
 8004536:	2201      	movs	r2, #1
 8004538:	701a      	strb	r2, [r3, #0]
      break;
 800453a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	223c      	movs	r2, #60	@ 0x3c
 8004540:	2100      	movs	r1, #0
 8004542:	5499      	strb	r1, [r3, r2]

  return status;
 8004544:	2317      	movs	r3, #23
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	781b      	ldrb	r3, [r3, #0]
}
 800454a:	0018      	movs	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	b006      	add	sp, #24
 8004550:	bd80      	pop	{r7, pc}
 8004552:	46c0      	nop			@ (mov r8, r8)
 8004554:	fffffbff 	.word	0xfffffbff

08004558 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004560:	46c0      	nop			@ (mov r8, r8)
 8004562:	46bd      	mov	sp, r7
 8004564:	b002      	add	sp, #8
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004570:	46c0      	nop			@ (mov r8, r8)
 8004572:	46bd      	mov	sp, r7
 8004574:	b002      	add	sp, #8
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004580:	46c0      	nop			@ (mov r8, r8)
 8004582:	46bd      	mov	sp, r7
 8004584:	b002      	add	sp, #8
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004590:	46c0      	nop			@ (mov r8, r8)
 8004592:	46bd      	mov	sp, r7
 8004594:	b002      	add	sp, #8
 8004596:	bd80      	pop	{r7, pc}

08004598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a3b      	ldr	r2, [pc, #236]	@ (8004698 <TIM_Base_SetConfig+0x100>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d008      	beq.n	80045c2 <TIM_Base_SetConfig+0x2a>
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	2380      	movs	r3, #128	@ 0x80
 80045b4:	05db      	lsls	r3, r3, #23
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d003      	beq.n	80045c2 <TIM_Base_SetConfig+0x2a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a37      	ldr	r2, [pc, #220]	@ (800469c <TIM_Base_SetConfig+0x104>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d108      	bne.n	80045d4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2270      	movs	r2, #112	@ 0x70
 80045c6:	4393      	bics	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a30      	ldr	r2, [pc, #192]	@ (8004698 <TIM_Base_SetConfig+0x100>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d018      	beq.n	800460e <TIM_Base_SetConfig+0x76>
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	2380      	movs	r3, #128	@ 0x80
 80045e0:	05db      	lsls	r3, r3, #23
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d013      	beq.n	800460e <TIM_Base_SetConfig+0x76>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a2c      	ldr	r2, [pc, #176]	@ (800469c <TIM_Base_SetConfig+0x104>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00f      	beq.n	800460e <TIM_Base_SetConfig+0x76>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a2b      	ldr	r2, [pc, #172]	@ (80046a0 <TIM_Base_SetConfig+0x108>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d00b      	beq.n	800460e <TIM_Base_SetConfig+0x76>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a2a      	ldr	r2, [pc, #168]	@ (80046a4 <TIM_Base_SetConfig+0x10c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d007      	beq.n	800460e <TIM_Base_SetConfig+0x76>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a29      	ldr	r2, [pc, #164]	@ (80046a8 <TIM_Base_SetConfig+0x110>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d003      	beq.n	800460e <TIM_Base_SetConfig+0x76>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a28      	ldr	r2, [pc, #160]	@ (80046ac <TIM_Base_SetConfig+0x114>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d108      	bne.n	8004620 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4a27      	ldr	r2, [pc, #156]	@ (80046b0 <TIM_Base_SetConfig+0x118>)
 8004612:	4013      	ands	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4313      	orrs	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2280      	movs	r2, #128	@ 0x80
 8004624:	4393      	bics	r3, r2
 8004626:	001a      	movs	r2, r3
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a13      	ldr	r2, [pc, #76]	@ (8004698 <TIM_Base_SetConfig+0x100>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00b      	beq.n	8004666 <TIM_Base_SetConfig+0xce>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a14      	ldr	r2, [pc, #80]	@ (80046a4 <TIM_Base_SetConfig+0x10c>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d007      	beq.n	8004666 <TIM_Base_SetConfig+0xce>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a13      	ldr	r2, [pc, #76]	@ (80046a8 <TIM_Base_SetConfig+0x110>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d003      	beq.n	8004666 <TIM_Base_SetConfig+0xce>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a12      	ldr	r2, [pc, #72]	@ (80046ac <TIM_Base_SetConfig+0x114>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d103      	bne.n	800466e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	691a      	ldr	r2, [r3, #16]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	2201      	movs	r2, #1
 800467a:	4013      	ands	r3, r2
 800467c:	2b01      	cmp	r3, #1
 800467e:	d106      	bne.n	800468e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	2201      	movs	r2, #1
 8004686:	4393      	bics	r3, r2
 8004688:	001a      	movs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	611a      	str	r2, [r3, #16]
  }
}
 800468e:	46c0      	nop			@ (mov r8, r8)
 8004690:	46bd      	mov	sp, r7
 8004692:	b004      	add	sp, #16
 8004694:	bd80      	pop	{r7, pc}
 8004696:	46c0      	nop			@ (mov r8, r8)
 8004698:	40012c00 	.word	0x40012c00
 800469c:	40000400 	.word	0x40000400
 80046a0:	40002000 	.word	0x40002000
 80046a4:	40014000 	.word	0x40014000
 80046a8:	40014400 	.word	0x40014400
 80046ac:	40014800 	.word	0x40014800
 80046b0:	fffffcff 	.word	0xfffffcff

080046b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	2201      	movs	r2, #1
 80046ca:	4393      	bics	r3, r2
 80046cc:	001a      	movs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2270      	movs	r2, #112	@ 0x70
 80046e2:	4393      	bics	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2203      	movs	r2, #3
 80046ea:	4393      	bics	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2202      	movs	r2, #2
 80046fc:	4393      	bics	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a27      	ldr	r2, [pc, #156]	@ (80047ac <TIM_OC1_SetConfig+0xf8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00b      	beq.n	800472a <TIM_OC1_SetConfig+0x76>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a26      	ldr	r2, [pc, #152]	@ (80047b0 <TIM_OC1_SetConfig+0xfc>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d007      	beq.n	800472a <TIM_OC1_SetConfig+0x76>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a25      	ldr	r2, [pc, #148]	@ (80047b4 <TIM_OC1_SetConfig+0x100>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d003      	beq.n	800472a <TIM_OC1_SetConfig+0x76>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a24      	ldr	r2, [pc, #144]	@ (80047b8 <TIM_OC1_SetConfig+0x104>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d10c      	bne.n	8004744 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2208      	movs	r2, #8
 800472e:	4393      	bics	r3, r2
 8004730:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	4313      	orrs	r3, r2
 800473a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2204      	movs	r2, #4
 8004740:	4393      	bics	r3, r2
 8004742:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a19      	ldr	r2, [pc, #100]	@ (80047ac <TIM_OC1_SetConfig+0xf8>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00b      	beq.n	8004764 <TIM_OC1_SetConfig+0xb0>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a18      	ldr	r2, [pc, #96]	@ (80047b0 <TIM_OC1_SetConfig+0xfc>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d007      	beq.n	8004764 <TIM_OC1_SetConfig+0xb0>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a17      	ldr	r2, [pc, #92]	@ (80047b4 <TIM_OC1_SetConfig+0x100>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d003      	beq.n	8004764 <TIM_OC1_SetConfig+0xb0>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a16      	ldr	r2, [pc, #88]	@ (80047b8 <TIM_OC1_SetConfig+0x104>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d111      	bne.n	8004788 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	4a15      	ldr	r2, [pc, #84]	@ (80047bc <TIM_OC1_SetConfig+0x108>)
 8004768:	4013      	ands	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	4a14      	ldr	r2, [pc, #80]	@ (80047c0 <TIM_OC1_SetConfig+0x10c>)
 8004770:	4013      	ands	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	621a      	str	r2, [r3, #32]
}
 80047a2:	46c0      	nop			@ (mov r8, r8)
 80047a4:	46bd      	mov	sp, r7
 80047a6:	b006      	add	sp, #24
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	46c0      	nop			@ (mov r8, r8)
 80047ac:	40012c00 	.word	0x40012c00
 80047b0:	40014000 	.word	0x40014000
 80047b4:	40014400 	.word	0x40014400
 80047b8:	40014800 	.word	0x40014800
 80047bc:	fffffeff 	.word	0xfffffeff
 80047c0:	fffffdff 	.word	0xfffffdff

080047c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	2210      	movs	r2, #16
 80047da:	4393      	bics	r3, r2
 80047dc:	001a      	movs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4a2e      	ldr	r2, [pc, #184]	@ (80048ac <TIM_OC2_SetConfig+0xe8>)
 80047f2:	4013      	ands	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4a2d      	ldr	r2, [pc, #180]	@ (80048b0 <TIM_OC2_SetConfig+0xec>)
 80047fa:	4013      	ands	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	021b      	lsls	r3, r3, #8
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2220      	movs	r2, #32
 800480e:	4393      	bics	r3, r2
 8004810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a24      	ldr	r2, [pc, #144]	@ (80048b4 <TIM_OC2_SetConfig+0xf0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d10d      	bne.n	8004842 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2280      	movs	r2, #128	@ 0x80
 800482a:	4393      	bics	r3, r2
 800482c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2240      	movs	r2, #64	@ 0x40
 800483e:	4393      	bics	r3, r2
 8004840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a1b      	ldr	r2, [pc, #108]	@ (80048b4 <TIM_OC2_SetConfig+0xf0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00b      	beq.n	8004862 <TIM_OC2_SetConfig+0x9e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a1a      	ldr	r2, [pc, #104]	@ (80048b8 <TIM_OC2_SetConfig+0xf4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d007      	beq.n	8004862 <TIM_OC2_SetConfig+0x9e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a19      	ldr	r2, [pc, #100]	@ (80048bc <TIM_OC2_SetConfig+0xf8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d003      	beq.n	8004862 <TIM_OC2_SetConfig+0x9e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a18      	ldr	r2, [pc, #96]	@ (80048c0 <TIM_OC2_SetConfig+0xfc>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d113      	bne.n	800488a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4a17      	ldr	r2, [pc, #92]	@ (80048c4 <TIM_OC2_SetConfig+0x100>)
 8004866:	4013      	ands	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	4a16      	ldr	r2, [pc, #88]	@ (80048c8 <TIM_OC2_SetConfig+0x104>)
 800486e:	4013      	ands	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	621a      	str	r2, [r3, #32]
}
 80048a4:	46c0      	nop			@ (mov r8, r8)
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b006      	add	sp, #24
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	ffff8fff 	.word	0xffff8fff
 80048b0:	fffffcff 	.word	0xfffffcff
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	40014000 	.word	0x40014000
 80048bc:	40014400 	.word	0x40014400
 80048c0:	40014800 	.word	0x40014800
 80048c4:	fffffbff 	.word	0xfffffbff
 80048c8:	fffff7ff 	.word	0xfffff7ff

080048cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	4a33      	ldr	r2, [pc, #204]	@ (80049b0 <TIM_OC3_SetConfig+0xe4>)
 80048e2:	401a      	ands	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2270      	movs	r2, #112	@ 0x70
 80048f8:	4393      	bics	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2203      	movs	r2, #3
 8004900:	4393      	bics	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	4a28      	ldr	r2, [pc, #160]	@ (80049b4 <TIM_OC3_SetConfig+0xe8>)
 8004912:	4013      	ands	r3, r2
 8004914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	021b      	lsls	r3, r3, #8
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a24      	ldr	r2, [pc, #144]	@ (80049b8 <TIM_OC3_SetConfig+0xec>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d10d      	bne.n	8004946 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	4a23      	ldr	r2, [pc, #140]	@ (80049bc <TIM_OC3_SetConfig+0xf0>)
 800492e:	4013      	ands	r3, r2
 8004930:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	021b      	lsls	r3, r3, #8
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	4313      	orrs	r3, r2
 800493c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	4a1f      	ldr	r2, [pc, #124]	@ (80049c0 <TIM_OC3_SetConfig+0xf4>)
 8004942:	4013      	ands	r3, r2
 8004944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a1b      	ldr	r2, [pc, #108]	@ (80049b8 <TIM_OC3_SetConfig+0xec>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00b      	beq.n	8004966 <TIM_OC3_SetConfig+0x9a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a1c      	ldr	r2, [pc, #112]	@ (80049c4 <TIM_OC3_SetConfig+0xf8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d007      	beq.n	8004966 <TIM_OC3_SetConfig+0x9a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a1b      	ldr	r2, [pc, #108]	@ (80049c8 <TIM_OC3_SetConfig+0xfc>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d003      	beq.n	8004966 <TIM_OC3_SetConfig+0x9a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a1a      	ldr	r2, [pc, #104]	@ (80049cc <TIM_OC3_SetConfig+0x100>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d113      	bne.n	800498e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4a19      	ldr	r2, [pc, #100]	@ (80049d0 <TIM_OC3_SetConfig+0x104>)
 800496a:	4013      	ands	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4a18      	ldr	r2, [pc, #96]	@ (80049d4 <TIM_OC3_SetConfig+0x108>)
 8004972:	4013      	ands	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	011b      	lsls	r3, r3, #4
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4313      	orrs	r3, r2
 800498c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	621a      	str	r2, [r3, #32]
}
 80049a8:	46c0      	nop			@ (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b006      	add	sp, #24
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	fffffeff 	.word	0xfffffeff
 80049b4:	fffffdff 	.word	0xfffffdff
 80049b8:	40012c00 	.word	0x40012c00
 80049bc:	fffff7ff 	.word	0xfffff7ff
 80049c0:	fffffbff 	.word	0xfffffbff
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40014400 	.word	0x40014400
 80049cc:	40014800 	.word	0x40014800
 80049d0:	ffffefff 	.word	0xffffefff
 80049d4:	ffffdfff 	.word	0xffffdfff

080049d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	4a26      	ldr	r2, [pc, #152]	@ (8004a88 <TIM_OC4_SetConfig+0xb0>)
 80049ee:	401a      	ands	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4a22      	ldr	r2, [pc, #136]	@ (8004a8c <TIM_OC4_SetConfig+0xb4>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4a21      	ldr	r2, [pc, #132]	@ (8004a90 <TIM_OC4_SetConfig+0xb8>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	4a1d      	ldr	r2, [pc, #116]	@ (8004a94 <TIM_OC4_SetConfig+0xbc>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	031b      	lsls	r3, r3, #12
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a19      	ldr	r2, [pc, #100]	@ (8004a98 <TIM_OC4_SetConfig+0xc0>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00b      	beq.n	8004a50 <TIM_OC4_SetConfig+0x78>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a18      	ldr	r2, [pc, #96]	@ (8004a9c <TIM_OC4_SetConfig+0xc4>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d007      	beq.n	8004a50 <TIM_OC4_SetConfig+0x78>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a17      	ldr	r2, [pc, #92]	@ (8004aa0 <TIM_OC4_SetConfig+0xc8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <TIM_OC4_SetConfig+0x78>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a16      	ldr	r2, [pc, #88]	@ (8004aa4 <TIM_OC4_SetConfig+0xcc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d109      	bne.n	8004a64 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	4a15      	ldr	r2, [pc, #84]	@ (8004aa8 <TIM_OC4_SetConfig+0xd0>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	019b      	lsls	r3, r3, #6
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	621a      	str	r2, [r3, #32]
}
 8004a7e:	46c0      	nop			@ (mov r8, r8)
 8004a80:	46bd      	mov	sp, r7
 8004a82:	b006      	add	sp, #24
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	46c0      	nop			@ (mov r8, r8)
 8004a88:	ffffefff 	.word	0xffffefff
 8004a8c:	ffff8fff 	.word	0xffff8fff
 8004a90:	fffffcff 	.word	0xfffffcff
 8004a94:	ffffdfff 	.word	0xffffdfff
 8004a98:	40012c00 	.word	0x40012c00
 8004a9c:	40014000 	.word	0x40014000
 8004aa0:	40014400 	.word	0x40014400
 8004aa4:	40014800 	.word	0x40014800
 8004aa8:	ffffbfff 	.word	0xffffbfff

08004aac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	221f      	movs	r2, #31
 8004abc:	4013      	ands	r3, r2
 8004abe:	2201      	movs	r2, #1
 8004ac0:	409a      	lsls	r2, r3
 8004ac2:	0013      	movs	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	43d2      	mvns	r2, r2
 8004ace:	401a      	ands	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a1a      	ldr	r2, [r3, #32]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	211f      	movs	r1, #31
 8004adc:	400b      	ands	r3, r1
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	4099      	lsls	r1, r3
 8004ae2:	000b      	movs	r3, r1
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	621a      	str	r2, [r3, #32]
}
 8004aea:	46c0      	nop			@ (mov r8, r8)
 8004aec:	46bd      	mov	sp, r7
 8004aee:	b006      	add	sp, #24
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	223c      	movs	r2, #60	@ 0x3c
 8004b02:	5c9b      	ldrb	r3, [r3, r2]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d101      	bne.n	8004b0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	e047      	b.n	8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	223c      	movs	r2, #60	@ 0x3c
 8004b10:	2101      	movs	r1, #1
 8004b12:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	223d      	movs	r2, #61	@ 0x3d
 8004b18:	2102      	movs	r1, #2
 8004b1a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2270      	movs	r2, #112	@ 0x70
 8004b30:	4393      	bics	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a16      	ldr	r2, [pc, #88]	@ (8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d00f      	beq.n	8004b70 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	2380      	movs	r3, #128	@ 0x80
 8004b56:	05db      	lsls	r3, r3, #23
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d009      	beq.n	8004b70 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a11      	ldr	r2, [pc, #68]	@ (8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d004      	beq.n	8004b70 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a10      	ldr	r2, [pc, #64]	@ (8004bac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d10c      	bne.n	8004b8a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2280      	movs	r2, #128	@ 0x80
 8004b74:	4393      	bics	r3, r2
 8004b76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	223d      	movs	r2, #61	@ 0x3d
 8004b8e:	2101      	movs	r1, #1
 8004b90:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	223c      	movs	r2, #60	@ 0x3c
 8004b96:	2100      	movs	r1, #0
 8004b98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	b004      	add	sp, #16
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	40012c00 	.word	0x40012c00
 8004ba8:	40000400 	.word	0x40000400
 8004bac:	40014000 	.word	0x40014000

08004bb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bb8:	46c0      	nop			@ (mov r8, r8)
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	b002      	add	sp, #8
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bc8:	46c0      	nop			@ (mov r8, r8)
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	b002      	add	sp, #8
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <memset>:
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	1882      	adds	r2, r0, r2
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d100      	bne.n	8004bda <memset+0xa>
 8004bd8:	4770      	bx	lr
 8004bda:	7019      	strb	r1, [r3, #0]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	e7f9      	b.n	8004bd4 <memset+0x4>

08004be0 <__libc_init_array>:
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	2600      	movs	r6, #0
 8004be4:	4c0c      	ldr	r4, [pc, #48]	@ (8004c18 <__libc_init_array+0x38>)
 8004be6:	4d0d      	ldr	r5, [pc, #52]	@ (8004c1c <__libc_init_array+0x3c>)
 8004be8:	1b64      	subs	r4, r4, r5
 8004bea:	10a4      	asrs	r4, r4, #2
 8004bec:	42a6      	cmp	r6, r4
 8004bee:	d109      	bne.n	8004c04 <__libc_init_array+0x24>
 8004bf0:	2600      	movs	r6, #0
 8004bf2:	f000 f819 	bl	8004c28 <_init>
 8004bf6:	4c0a      	ldr	r4, [pc, #40]	@ (8004c20 <__libc_init_array+0x40>)
 8004bf8:	4d0a      	ldr	r5, [pc, #40]	@ (8004c24 <__libc_init_array+0x44>)
 8004bfa:	1b64      	subs	r4, r4, r5
 8004bfc:	10a4      	asrs	r4, r4, #2
 8004bfe:	42a6      	cmp	r6, r4
 8004c00:	d105      	bne.n	8004c0e <__libc_init_array+0x2e>
 8004c02:	bd70      	pop	{r4, r5, r6, pc}
 8004c04:	00b3      	lsls	r3, r6, #2
 8004c06:	58eb      	ldr	r3, [r5, r3]
 8004c08:	4798      	blx	r3
 8004c0a:	3601      	adds	r6, #1
 8004c0c:	e7ee      	b.n	8004bec <__libc_init_array+0xc>
 8004c0e:	00b3      	lsls	r3, r6, #2
 8004c10:	58eb      	ldr	r3, [r5, r3]
 8004c12:	4798      	blx	r3
 8004c14:	3601      	adds	r6, #1
 8004c16:	e7f2      	b.n	8004bfe <__libc_init_array+0x1e>
 8004c18:	08004cec 	.word	0x08004cec
 8004c1c:	08004cec 	.word	0x08004cec
 8004c20:	08004cf0 	.word	0x08004cf0
 8004c24:	08004cec 	.word	0x08004cec

08004c28 <_init>:
 8004c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2a:	46c0      	nop			@ (mov r8, r8)
 8004c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2e:	bc08      	pop	{r3}
 8004c30:	469e      	mov	lr, r3
 8004c32:	4770      	bx	lr

08004c34 <_fini>:
 8004c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c36:	46c0      	nop			@ (mov r8, r8)
 8004c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3a:	bc08      	pop	{r3}
 8004c3c:	469e      	mov	lr, r3
 8004c3e:	4770      	bx	lr
