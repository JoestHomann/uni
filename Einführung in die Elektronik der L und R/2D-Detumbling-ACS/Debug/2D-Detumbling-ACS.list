
2D-Detumbling-ACS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ee4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002fa4  08002fa4  00003fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fd4  08002fd4  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002fd4  08002fd4  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002fd4  08002fd4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fd4  08002fd4  00003fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002fd8  08002fd8  00003fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002fdc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002fe8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002fe8  000040c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a63c  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a52  00000000  00000000  0000e670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  000100c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094a  00000000  00000000  00010ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000113c6  00000000  00000000  000115ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efa7  00000000  00000000  000229b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069f64  00000000  00000000  00031957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009b8bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ae0  00000000  00000000  0009b900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0009e3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f8c 	.word	0x08002f8c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002f8c 	.word	0x08002f8c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 faf5 	bl	8000814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f845 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f971 	bl	8000514 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000232:	f000 f8e3 	bl	80003fc <MX_TIM3_Init>
  MX_I2C1_Init();
 8000236:	f000 f8a1 	bl	800037c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Start PWM on
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);	// TIM3 Channel 3 (LD4 = Torquer X)
 800023a:	4b1c      	ldr	r3, [pc, #112]	@ (80002ac <main+0x8c>)
 800023c:	2108      	movs	r1, #8
 800023e:	0018      	movs	r0, r3
 8000240:	f002 f880 	bl	8002344 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);	// TIM3 Channel 4 (LD3 = Torquer Y)
 8000244:	4b19      	ldr	r3, [pc, #100]	@ (80002ac <main+0x8c>)
 8000246:	210c      	movs	r1, #12
 8000248:	0018      	movs	r0, r3
 800024a:	f002 f87b 	bl	8002344 <HAL_TIM_PWM_Start>
  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 75); // X-Magnetorquer to 75% -> Preliminary value for testing
  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 25);	// Y-Magnetorquer to 25% -> Preliminary value for testing


  // FXAS21002: Check WHO_AM_I register
  uint8_t who_am_i = 0;
 800024e:	1dfb      	adds	r3, r7, #7
 8000250:	2200      	movs	r2, #0
 8000252:	701a      	strb	r2, [r3, #0]

  // Read WHO_AM_I register (0x0C), expect 0xD7
  if (HAL_I2C_Mem_Read(&hi2c1, 0x42, 0x0C, I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000254:	4816      	ldr	r0, [pc, #88]	@ (80002b0 <main+0x90>)
 8000256:	2301      	movs	r3, #1
 8000258:	425b      	negs	r3, r3
 800025a:	9302      	str	r3, [sp, #8]
 800025c:	2301      	movs	r3, #1
 800025e:	9301      	str	r3, [sp, #4]
 8000260:	1dfb      	adds	r3, r7, #7
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	2301      	movs	r3, #1
 8000266:	220c      	movs	r2, #12
 8000268:	2142      	movs	r1, #66	@ 0x42
 800026a:	f000 fe43 	bl	8000ef4 <HAL_I2C_Mem_Read>
 800026e:	1e03      	subs	r3, r0, #0
 8000270:	d001      	beq.n	8000276 <main+0x56>

      Error_Handler();	// I2C communication failed
 8000272:	f000 f99b 	bl	80005ac <Error_Handler>
  }

  // If sensor does not return expected ID, turn on error LED and halt
  if (who_am_i == 0xD7) {
 8000276:	1dfb      	adds	r3, r7, #7
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2bd7      	cmp	r3, #215	@ 0xd7
 800027c:	d113      	bne.n	80002a6 <main+0x86>

      // Blink LD3 once as confirmation
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);  // Turn on LD3
 800027e:	2380      	movs	r3, #128	@ 0x80
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	480c      	ldr	r0, [pc, #48]	@ (80002b4 <main+0x94>)
 8000284:	2201      	movs	r2, #1
 8000286:	0019      	movs	r1, r3
 8000288:	f000 fd70 	bl	8000d6c <HAL_GPIO_WritePin>
      HAL_Delay(500);
 800028c:	23fa      	movs	r3, #250	@ 0xfa
 800028e:	005b      	lsls	r3, r3, #1
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fb23 	bl	80008dc <HAL_Delay>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);  // Turn off LD3
 8000296:	2380      	movs	r3, #128	@ 0x80
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	4806      	ldr	r0, [pc, #24]	@ (80002b4 <main+0x94>)
 800029c:	2200      	movs	r2, #0
 800029e:	0019      	movs	r1, r3
 80002a0:	f000 fd64 	bl	8000d6c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a4:	46c0      	nop			@ (mov r8, r8)
 80002a6:	46c0      	nop			@ (mov r8, r8)
 80002a8:	e7fd      	b.n	80002a6 <main+0x86>
 80002aa:	46c0      	nop			@ (mov r8, r8)
 80002ac:	2000007c 	.word	0x2000007c
 80002b0:	20000028 	.word	0x20000028
 80002b4:	48000800 	.word	0x48000800

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b097      	sub	sp, #92	@ 0x5c
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	2428      	movs	r4, #40	@ 0x28
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	0018      	movs	r0, r3
 80002c4:	2330      	movs	r3, #48	@ 0x30
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f002 fe33 	bl	8002f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ce:	2318      	movs	r3, #24
 80002d0:	18fb      	adds	r3, r7, r3
 80002d2:	0018      	movs	r0, r3
 80002d4:	2310      	movs	r3, #16
 80002d6:	001a      	movs	r2, r3
 80002d8:	2100      	movs	r1, #0
 80002da:	f002 fe2b 	bl	8002f34 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	0018      	movs	r0, r3
 80002e2:	2314      	movs	r3, #20
 80002e4:	001a      	movs	r2, r3
 80002e6:	2100      	movs	r1, #0
 80002e8:	f002 fe24 	bl	8002f34 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ec:	0021      	movs	r1, r4
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2202      	movs	r2, #2
 80002f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2201      	movs	r2, #1
 80002f8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2210      	movs	r2, #16
 80002fe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2202      	movs	r2, #2
 8000304:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2200      	movs	r2, #0
 800030a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	22a0      	movs	r2, #160	@ 0xa0
 8000310:	0392      	lsls	r2, r2, #14
 8000312:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2200      	movs	r2, #0
 8000318:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	187b      	adds	r3, r7, r1
 800031c:	0018      	movs	r0, r3
 800031e:	f001 fa4d 	bl	80017bc <HAL_RCC_OscConfig>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000326:	f000 f941 	bl	80005ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	2118      	movs	r1, #24
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2207      	movs	r2, #7
 8000330:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2202      	movs	r2, #2
 8000336:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2200      	movs	r2, #0
 8000342:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2101      	movs	r1, #1
 8000348:	0018      	movs	r0, r3
 800034a:	f001 fd51 	bl	8001df0 <HAL_RCC_ClockConfig>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000352:	f000 f92b 	bl	80005ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2220      	movs	r2, #32
 800035a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	0018      	movs	r0, r3
 8000366:	f001 fe67 	bl	8002038 <HAL_RCCEx_PeriphCLKConfig>
 800036a:	1e03      	subs	r3, r0, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800036e:	f000 f91d 	bl	80005ac <Error_Handler>
  }
}
 8000372:	46c0      	nop			@ (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	b017      	add	sp, #92	@ 0x5c
 8000378:	bd90      	pop	{r4, r7, pc}
	...

0800037c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000380:	4b1b      	ldr	r3, [pc, #108]	@ (80003f0 <MX_I2C1_Init+0x74>)
 8000382:	4a1c      	ldr	r2, [pc, #112]	@ (80003f4 <MX_I2C1_Init+0x78>)
 8000384:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000386:	4b1a      	ldr	r3, [pc, #104]	@ (80003f0 <MX_I2C1_Init+0x74>)
 8000388:	4a1b      	ldr	r2, [pc, #108]	@ (80003f8 <MX_I2C1_Init+0x7c>)
 800038a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800038c:	4b18      	ldr	r3, [pc, #96]	@ (80003f0 <MX_I2C1_Init+0x74>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000392:	4b17      	ldr	r3, [pc, #92]	@ (80003f0 <MX_I2C1_Init+0x74>)
 8000394:	2201      	movs	r2, #1
 8000396:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000398:	4b15      	ldr	r3, [pc, #84]	@ (80003f0 <MX_I2C1_Init+0x74>)
 800039a:	2200      	movs	r2, #0
 800039c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800039e:	4b14      	ldr	r3, [pc, #80]	@ (80003f0 <MX_I2C1_Init+0x74>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003a4:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <MX_I2C1_Init+0x74>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003aa:	4b11      	ldr	r3, [pc, #68]	@ (80003f0 <MX_I2C1_Init+0x74>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b0:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <MX_I2C1_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003b6:	4b0e      	ldr	r3, [pc, #56]	@ (80003f0 <MX_I2C1_Init+0x74>)
 80003b8:	0018      	movs	r0, r3
 80003ba:	f000 fcf5 	bl	8000da8 <HAL_I2C_Init>
 80003be:	1e03      	subs	r3, r0, #0
 80003c0:	d001      	beq.n	80003c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003c2:	f000 f8f3 	bl	80005ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003c6:	4b0a      	ldr	r3, [pc, #40]	@ (80003f0 <MX_I2C1_Init+0x74>)
 80003c8:	2100      	movs	r1, #0
 80003ca:	0018      	movs	r0, r3
 80003cc:	f001 f95e 	bl	800168c <HAL_I2CEx_ConfigAnalogFilter>
 80003d0:	1e03      	subs	r3, r0, #0
 80003d2:	d001      	beq.n	80003d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003d4:	f000 f8ea 	bl	80005ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003d8:	4b05      	ldr	r3, [pc, #20]	@ (80003f0 <MX_I2C1_Init+0x74>)
 80003da:	2100      	movs	r1, #0
 80003dc:	0018      	movs	r0, r3
 80003de:	f001 f9a1 	bl	8001724 <HAL_I2CEx_ConfigDigitalFilter>
 80003e2:	1e03      	subs	r3, r0, #0
 80003e4:	d001      	beq.n	80003ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003e6:	f000 f8e1 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ea:	46c0      	nop			@ (mov r8, r8)
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000028 	.word	0x20000028
 80003f4:	40005400 	.word	0x40005400
 80003f8:	00201d2b 	.word	0x00201d2b

080003fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b08e      	sub	sp, #56	@ 0x38
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000402:	2328      	movs	r3, #40	@ 0x28
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	0018      	movs	r0, r3
 8000408:	2310      	movs	r3, #16
 800040a:	001a      	movs	r2, r3
 800040c:	2100      	movs	r1, #0
 800040e:	f002 fd91 	bl	8002f34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000412:	2320      	movs	r3, #32
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	0018      	movs	r0, r3
 8000418:	2308      	movs	r3, #8
 800041a:	001a      	movs	r2, r3
 800041c:	2100      	movs	r1, #0
 800041e:	f002 fd89 	bl	8002f34 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	0018      	movs	r0, r3
 8000426:	231c      	movs	r3, #28
 8000428:	001a      	movs	r2, r3
 800042a:	2100      	movs	r1, #0
 800042c:	f002 fd82 	bl	8002f34 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000430:	4b36      	ldr	r3, [pc, #216]	@ (800050c <MX_TIM3_Init+0x110>)
 8000432:	4a37      	ldr	r2, [pc, #220]	@ (8000510 <MX_TIM3_Init+0x114>)
 8000434:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8000436:	4b35      	ldr	r3, [pc, #212]	@ (800050c <MX_TIM3_Init+0x110>)
 8000438:	222f      	movs	r2, #47	@ 0x2f
 800043a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800043c:	4b33      	ldr	r3, [pc, #204]	@ (800050c <MX_TIM3_Init+0x110>)
 800043e:	2200      	movs	r2, #0
 8000440:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000442:	4b32      	ldr	r3, [pc, #200]	@ (800050c <MX_TIM3_Init+0x110>)
 8000444:	2264      	movs	r2, #100	@ 0x64
 8000446:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000448:	4b30      	ldr	r3, [pc, #192]	@ (800050c <MX_TIM3_Init+0x110>)
 800044a:	2200      	movs	r2, #0
 800044c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800044e:	4b2f      	ldr	r3, [pc, #188]	@ (800050c <MX_TIM3_Init+0x110>)
 8000450:	2280      	movs	r2, #128	@ 0x80
 8000452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000454:	4b2d      	ldr	r3, [pc, #180]	@ (800050c <MX_TIM3_Init+0x110>)
 8000456:	0018      	movs	r0, r3
 8000458:	f001 fecc 	bl	80021f4 <HAL_TIM_Base_Init>
 800045c:	1e03      	subs	r3, r0, #0
 800045e:	d001      	beq.n	8000464 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000460:	f000 f8a4 	bl	80005ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000464:	2128      	movs	r1, #40	@ 0x28
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2280      	movs	r2, #128	@ 0x80
 800046a:	0152      	lsls	r2, r2, #5
 800046c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800046e:	187a      	adds	r2, r7, r1
 8000470:	4b26      	ldr	r3, [pc, #152]	@ (800050c <MX_TIM3_Init+0x110>)
 8000472:	0011      	movs	r1, r2
 8000474:	0018      	movs	r0, r3
 8000476:	f002 f8e3 	bl	8002640 <HAL_TIM_ConfigClockSource>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800047e:	f000 f895 	bl	80005ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000482:	4b22      	ldr	r3, [pc, #136]	@ (800050c <MX_TIM3_Init+0x110>)
 8000484:	0018      	movs	r0, r3
 8000486:	f001 ff05 	bl	8002294 <HAL_TIM_PWM_Init>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800048e:	f000 f88d 	bl	80005ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000492:	2120      	movs	r1, #32
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	2200      	movs	r2, #0
 800049e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004a0:	187a      	adds	r2, r7, r1
 80004a2:	4b1a      	ldr	r3, [pc, #104]	@ (800050c <MX_TIM3_Init+0x110>)
 80004a4:	0011      	movs	r1, r2
 80004a6:	0018      	movs	r0, r3
 80004a8:	f002 fce6 	bl	8002e78 <HAL_TIMEx_MasterConfigSynchronization>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80004b0:	f000 f87c 	bl	80005ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2260      	movs	r2, #96	@ 0x60
 80004b8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2232      	movs	r2, #50	@ 0x32
 80004be:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004cc:	1d39      	adds	r1, r7, #4
 80004ce:	4b0f      	ldr	r3, [pc, #60]	@ (800050c <MX_TIM3_Init+0x110>)
 80004d0:	2208      	movs	r2, #8
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 ffee 	bl	80024b4 <HAL_TIM_PWM_ConfigChannel>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80004dc:	f000 f866 	bl	80005ac <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004e6:	1d39      	adds	r1, r7, #4
 80004e8:	4b08      	ldr	r3, [pc, #32]	@ (800050c <MX_TIM3_Init+0x110>)
 80004ea:	220c      	movs	r2, #12
 80004ec:	0018      	movs	r0, r3
 80004ee:	f001 ffe1 	bl	80024b4 <HAL_TIM_PWM_ConfigChannel>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d001      	beq.n	80004fa <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 80004f6:	f000 f859 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004fa:	4b04      	ldr	r3, [pc, #16]	@ (800050c <MX_TIM3_Init+0x110>)
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 f8eb 	bl	80006d8 <HAL_TIM_MspPostInit>

}
 8000502:	46c0      	nop			@ (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	b00e      	add	sp, #56	@ 0x38
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	2000007c 	.word	0x2000007c
 8000510:	40000400 	.word	0x40000400

08000514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b089      	sub	sp, #36	@ 0x24
 8000518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	240c      	movs	r4, #12
 800051c:	193b      	adds	r3, r7, r4
 800051e:	0018      	movs	r0, r3
 8000520:	2314      	movs	r3, #20
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	f002 fd05 	bl	8002f34 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b1f      	ldr	r3, [pc, #124]	@ (80005a8 <MX_GPIO_Init+0x94>)
 800052c:	695a      	ldr	r2, [r3, #20]
 800052e:	4b1e      	ldr	r3, [pc, #120]	@ (80005a8 <MX_GPIO_Init+0x94>)
 8000530:	2180      	movs	r1, #128	@ 0x80
 8000532:	0289      	lsls	r1, r1, #10
 8000534:	430a      	orrs	r2, r1
 8000536:	615a      	str	r2, [r3, #20]
 8000538:	4b1b      	ldr	r3, [pc, #108]	@ (80005a8 <MX_GPIO_Init+0x94>)
 800053a:	695a      	ldr	r2, [r3, #20]
 800053c:	2380      	movs	r3, #128	@ 0x80
 800053e:	029b      	lsls	r3, r3, #10
 8000540:	4013      	ands	r3, r2
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	4b18      	ldr	r3, [pc, #96]	@ (80005a8 <MX_GPIO_Init+0x94>)
 8000548:	695a      	ldr	r2, [r3, #20]
 800054a:	4b17      	ldr	r3, [pc, #92]	@ (80005a8 <MX_GPIO_Init+0x94>)
 800054c:	2180      	movs	r1, #128	@ 0x80
 800054e:	0309      	lsls	r1, r1, #12
 8000550:	430a      	orrs	r2, r1
 8000552:	615a      	str	r2, [r3, #20]
 8000554:	4b14      	ldr	r3, [pc, #80]	@ (80005a8 <MX_GPIO_Init+0x94>)
 8000556:	695a      	ldr	r2, [r3, #20]
 8000558:	2380      	movs	r3, #128	@ 0x80
 800055a:	031b      	lsls	r3, r3, #12
 800055c:	4013      	ands	r3, r2
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b11      	ldr	r3, [pc, #68]	@ (80005a8 <MX_GPIO_Init+0x94>)
 8000564:	695a      	ldr	r2, [r3, #20]
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <MX_GPIO_Init+0x94>)
 8000568:	2180      	movs	r1, #128	@ 0x80
 800056a:	02c9      	lsls	r1, r1, #11
 800056c:	430a      	orrs	r2, r1
 800056e:	615a      	str	r2, [r3, #20]
 8000570:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <MX_GPIO_Init+0x94>)
 8000572:	695a      	ldr	r2, [r3, #20]
 8000574:	2380      	movs	r3, #128	@ 0x80
 8000576:	02db      	lsls	r3, r3, #11
 8000578:	4013      	ands	r3, r2
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : Seperation_Switch_Pin */
  GPIO_InitStruct.Pin = Seperation_Switch_Pin;
 800057e:	193b      	adds	r3, r7, r4
 8000580:	2201      	movs	r2, #1
 8000582:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000584:	193b      	adds	r3, r7, r4
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800058a:	193b      	adds	r3, r7, r4
 800058c:	2201      	movs	r2, #1
 800058e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Seperation_Switch_GPIO_Port, &GPIO_InitStruct);
 8000590:	193a      	adds	r2, r7, r4
 8000592:	2390      	movs	r3, #144	@ 0x90
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	0011      	movs	r1, r2
 8000598:	0018      	movs	r0, r3
 800059a:	f000 fa77 	bl	8000a8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b009      	add	sp, #36	@ 0x24
 80005a4:	bd90      	pop	{r4, r7, pc}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	40021000 	.word	0x40021000

080005ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b0:	b672      	cpsid	i
}
 80005b2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b4:	46c0      	nop			@ (mov r8, r8)
 80005b6:	e7fd      	b.n	80005b4 <Error_Handler+0x8>

080005b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005be:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <HAL_MspInit+0x44>)
 80005c0:	699a      	ldr	r2, [r3, #24]
 80005c2:	4b0e      	ldr	r3, [pc, #56]	@ (80005fc <HAL_MspInit+0x44>)
 80005c4:	2101      	movs	r1, #1
 80005c6:	430a      	orrs	r2, r1
 80005c8:	619a      	str	r2, [r3, #24]
 80005ca:	4b0c      	ldr	r3, [pc, #48]	@ (80005fc <HAL_MspInit+0x44>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	2201      	movs	r2, #1
 80005d0:	4013      	ands	r3, r2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d6:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <HAL_MspInit+0x44>)
 80005d8:	69da      	ldr	r2, [r3, #28]
 80005da:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <HAL_MspInit+0x44>)
 80005dc:	2180      	movs	r1, #128	@ 0x80
 80005de:	0549      	lsls	r1, r1, #21
 80005e0:	430a      	orrs	r2, r1
 80005e2:	61da      	str	r2, [r3, #28]
 80005e4:	4b05      	ldr	r3, [pc, #20]	@ (80005fc <HAL_MspInit+0x44>)
 80005e6:	69da      	ldr	r2, [r3, #28]
 80005e8:	2380      	movs	r3, #128	@ 0x80
 80005ea:	055b      	lsls	r3, r3, #21
 80005ec:	4013      	ands	r3, r2
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b002      	add	sp, #8
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	46c0      	nop			@ (mov r8, r8)
 80005fc:	40021000 	.word	0x40021000

08000600 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b08b      	sub	sp, #44	@ 0x2c
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000608:	2414      	movs	r4, #20
 800060a:	193b      	adds	r3, r7, r4
 800060c:	0018      	movs	r0, r3
 800060e:	2314      	movs	r3, #20
 8000610:	001a      	movs	r2, r3
 8000612:	2100      	movs	r1, #0
 8000614:	f002 fc8e 	bl	8002f34 <memset>
  if(hi2c->Instance==I2C1)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a1c      	ldr	r2, [pc, #112]	@ (8000690 <HAL_I2C_MspInit+0x90>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d131      	bne.n	8000686 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	4b1c      	ldr	r3, [pc, #112]	@ (8000694 <HAL_I2C_MspInit+0x94>)
 8000624:	695a      	ldr	r2, [r3, #20]
 8000626:	4b1b      	ldr	r3, [pc, #108]	@ (8000694 <HAL_I2C_MspInit+0x94>)
 8000628:	2180      	movs	r1, #128	@ 0x80
 800062a:	02c9      	lsls	r1, r1, #11
 800062c:	430a      	orrs	r2, r1
 800062e:	615a      	str	r2, [r3, #20]
 8000630:	4b18      	ldr	r3, [pc, #96]	@ (8000694 <HAL_I2C_MspInit+0x94>)
 8000632:	695a      	ldr	r2, [r3, #20]
 8000634:	2380      	movs	r3, #128	@ 0x80
 8000636:	02db      	lsls	r3, r3, #11
 8000638:	4013      	ands	r3, r2
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800063e:	0021      	movs	r1, r4
 8000640:	187b      	adds	r3, r7, r1
 8000642:	22c0      	movs	r2, #192	@ 0xc0
 8000644:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2212      	movs	r2, #18
 800064a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2203      	movs	r2, #3
 8000656:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2201      	movs	r2, #1
 800065c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065e:	187b      	adds	r3, r7, r1
 8000660:	4a0d      	ldr	r2, [pc, #52]	@ (8000698 <HAL_I2C_MspInit+0x98>)
 8000662:	0019      	movs	r1, r3
 8000664:	0010      	movs	r0, r2
 8000666:	f000 fa11 	bl	8000a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800066a:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <HAL_I2C_MspInit+0x94>)
 800066c:	69da      	ldr	r2, [r3, #28]
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <HAL_I2C_MspInit+0x94>)
 8000670:	2180      	movs	r1, #128	@ 0x80
 8000672:	0389      	lsls	r1, r1, #14
 8000674:	430a      	orrs	r2, r1
 8000676:	61da      	str	r2, [r3, #28]
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <HAL_I2C_MspInit+0x94>)
 800067a:	69da      	ldr	r2, [r3, #28]
 800067c:	2380      	movs	r3, #128	@ 0x80
 800067e:	039b      	lsls	r3, r3, #14
 8000680:	4013      	ands	r3, r2
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000686:	46c0      	nop			@ (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	b00b      	add	sp, #44	@ 0x2c
 800068c:	bd90      	pop	{r4, r7, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	40005400 	.word	0x40005400
 8000694:	40021000 	.word	0x40021000
 8000698:	48000400 	.word	0x48000400

0800069c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a09      	ldr	r2, [pc, #36]	@ (80006d0 <HAL_TIM_Base_MspInit+0x34>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d10b      	bne.n	80006c6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006ae:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <HAL_TIM_Base_MspInit+0x38>)
 80006b0:	69da      	ldr	r2, [r3, #28]
 80006b2:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <HAL_TIM_Base_MspInit+0x38>)
 80006b4:	2102      	movs	r1, #2
 80006b6:	430a      	orrs	r2, r1
 80006b8:	61da      	str	r2, [r3, #28]
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <HAL_TIM_Base_MspInit+0x38>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	2202      	movs	r2, #2
 80006c0:	4013      	ands	r3, r2
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b004      	add	sp, #16
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	40000400 	.word	0x40000400
 80006d4:	40021000 	.word	0x40021000

080006d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b089      	sub	sp, #36	@ 0x24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	240c      	movs	r4, #12
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	0018      	movs	r0, r3
 80006e6:	2314      	movs	r3, #20
 80006e8:	001a      	movs	r2, r3
 80006ea:	2100      	movs	r1, #0
 80006ec:	f002 fc22 	bl	8002f34 <memset>
  if(htim->Instance==TIM3)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a20      	ldr	r2, [pc, #128]	@ (8000778 <HAL_TIM_MspPostInit+0xa0>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d13a      	bne.n	8000770 <HAL_TIM_MspPostInit+0x98>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b20      	ldr	r3, [pc, #128]	@ (800077c <HAL_TIM_MspPostInit+0xa4>)
 80006fc:	695a      	ldr	r2, [r3, #20]
 80006fe:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <HAL_TIM_MspPostInit+0xa4>)
 8000700:	2180      	movs	r1, #128	@ 0x80
 8000702:	0309      	lsls	r1, r1, #12
 8000704:	430a      	orrs	r2, r1
 8000706:	615a      	str	r2, [r3, #20]
 8000708:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <HAL_TIM_MspPostInit+0xa4>)
 800070a:	695a      	ldr	r2, [r3, #20]
 800070c:	2380      	movs	r3, #128	@ 0x80
 800070e:	031b      	lsls	r3, r3, #12
 8000710:	4013      	ands	r3, r2
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2280      	movs	r2, #128	@ 0x80
 800071a:	0052      	lsls	r2, r2, #1
 800071c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2202      	movs	r2, #2
 8000722:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000730:	193b      	adds	r3, r7, r4
 8000732:	2201      	movs	r2, #1
 8000734:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000736:	193b      	adds	r3, r7, r4
 8000738:	4a11      	ldr	r2, [pc, #68]	@ (8000780 <HAL_TIM_MspPostInit+0xa8>)
 800073a:	0019      	movs	r1, r3
 800073c:	0010      	movs	r0, r2
 800073e:	f000 f9a5 	bl	8000a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000742:	0021      	movs	r1, r4
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2280      	movs	r2, #128	@ 0x80
 8000748:	0092      	lsls	r2, r2, #2
 800074a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2202      	movs	r2, #2
 8000750:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000764:	187b      	adds	r3, r7, r1
 8000766:	4a06      	ldr	r2, [pc, #24]	@ (8000780 <HAL_TIM_MspPostInit+0xa8>)
 8000768:	0019      	movs	r1, r3
 800076a:	0010      	movs	r0, r2
 800076c:	f000 f98e 	bl	8000a8c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000770:	46c0      	nop			@ (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	b009      	add	sp, #36	@ 0x24
 8000776:	bd90      	pop	{r4, r7, pc}
 8000778:	40000400 	.word	0x40000400
 800077c:	40021000 	.word	0x40021000
 8000780:	48000800 	.word	0x48000800

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	e7fd      	b.n	8000788 <NMI_Handler+0x4>

0800078c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000790:	46c0      	nop			@ (mov r8, r8)
 8000792:	e7fd      	b.n	8000790 <HardFault_Handler+0x4>

08000794 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000798:	46c0      	nop			@ (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ac:	f000 f87a 	bl	80008a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b0:	46c0      	nop			@ (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007c0:	480d      	ldr	r0, [pc, #52]	@ (80007f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007c2:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 80007c4:	f7ff fff7 	bl	80007b6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c8:	480c      	ldr	r0, [pc, #48]	@ (80007fc <LoopForever+0x6>)
  ldr r1, =_edata
 80007ca:	490d      	ldr	r1, [pc, #52]	@ (8000800 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000804 <LoopForever+0xe>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d0:	e002      	b.n	80007d8 <LoopCopyDataInit>

080007d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d6:	3304      	adds	r3, #4

080007d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007dc:	d3f9      	bcc.n	80007d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007de:	4a0a      	ldr	r2, [pc, #40]	@ (8000808 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007e0:	4c0a      	ldr	r4, [pc, #40]	@ (800080c <LoopForever+0x16>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e4:	e001      	b.n	80007ea <LoopFillZerobss>

080007e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e8:	3204      	adds	r2, #4

080007ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ec:	d3fb      	bcc.n	80007e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ee:	f002 fba9 	bl	8002f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007f2:	f7ff fd15 	bl	8000220 <main>

080007f6 <LoopForever>:

LoopForever:
    b LoopForever
 80007f6:	e7fe      	b.n	80007f6 <LoopForever>
  ldr   r0, =_estack
 80007f8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000800:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000804:	08002fdc 	.word	0x08002fdc
  ldr r2, =_sbss
 8000808:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800080c:	200000c8 	.word	0x200000c8

08000810 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC1_COMP_IRQHandler>
	...

08000814 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000818:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <HAL_Init+0x24>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <HAL_Init+0x24>)
 800081e:	2110      	movs	r1, #16
 8000820:	430a      	orrs	r2, r1
 8000822:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000824:	2000      	movs	r0, #0
 8000826:	f000 f809 	bl	800083c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800082a:	f7ff fec5 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800082e:	2300      	movs	r3, #0
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	40022000 	.word	0x40022000

0800083c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000844:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <HAL_InitTick+0x5c>)
 8000846:	681c      	ldr	r4, [r3, #0]
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <HAL_InitTick+0x60>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	0019      	movs	r1, r3
 800084e:	23fa      	movs	r3, #250	@ 0xfa
 8000850:	0098      	lsls	r0, r3, #2
 8000852:	f7ff fc59 	bl	8000108 <__udivsi3>
 8000856:	0003      	movs	r3, r0
 8000858:	0019      	movs	r1, r3
 800085a:	0020      	movs	r0, r4
 800085c:	f7ff fc54 	bl	8000108 <__udivsi3>
 8000860:	0003      	movs	r3, r0
 8000862:	0018      	movs	r0, r3
 8000864:	f000 f905 	bl	8000a72 <HAL_SYSTICK_Config>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800086c:	2301      	movs	r3, #1
 800086e:	e00f      	b.n	8000890 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b03      	cmp	r3, #3
 8000874:	d80b      	bhi.n	800088e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	2301      	movs	r3, #1
 800087a:	425b      	negs	r3, r3
 800087c:	2200      	movs	r2, #0
 800087e:	0018      	movs	r0, r3
 8000880:	f000 f8e2 	bl	8000a48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <HAL_InitTick+0x64>)
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
 800088c:	e000      	b.n	8000890 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
}
 8000890:	0018      	movs	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	b003      	add	sp, #12
 8000896:	bd90      	pop	{r4, r7, pc}
 8000898:	20000000 	.word	0x20000000
 800089c:	20000008 	.word	0x20000008
 80008a0:	20000004 	.word	0x20000004

080008a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a8:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <HAL_IncTick+0x1c>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	001a      	movs	r2, r3
 80008ae:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <HAL_IncTick+0x20>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	18d2      	adds	r2, r2, r3
 80008b4:	4b03      	ldr	r3, [pc, #12]	@ (80008c4 <HAL_IncTick+0x20>)
 80008b6:	601a      	str	r2, [r3, #0]
}
 80008b8:	46c0      	nop			@ (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	20000008 	.word	0x20000008
 80008c4:	200000c4 	.word	0x200000c4

080008c8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  return uwTick;
 80008cc:	4b02      	ldr	r3, [pc, #8]	@ (80008d8 <HAL_GetTick+0x10>)
 80008ce:	681b      	ldr	r3, [r3, #0]
}
 80008d0:	0018      	movs	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	200000c4 	.word	0x200000c4

080008dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e4:	f7ff fff0 	bl	80008c8 <HAL_GetTick>
 80008e8:	0003      	movs	r3, r0
 80008ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	3301      	adds	r3, #1
 80008f4:	d005      	beq.n	8000902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <HAL_Delay+0x44>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	001a      	movs	r2, r3
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	189b      	adds	r3, r3, r2
 8000900:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	f7ff ffe0 	bl	80008c8 <HAL_GetTick>
 8000908:	0002      	movs	r2, r0
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	429a      	cmp	r2, r3
 8000912:	d8f7      	bhi.n	8000904 <HAL_Delay+0x28>
  {
  }
}
 8000914:	46c0      	nop			@ (mov r8, r8)
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	b004      	add	sp, #16
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	20000008 	.word	0x20000008

08000924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	0002      	movs	r2, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b7f      	cmp	r3, #127	@ 0x7f
 8000938:	d828      	bhi.n	800098c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800093a:	4a2f      	ldr	r2, [pc, #188]	@ (80009f8 <__NVIC_SetPriority+0xd4>)
 800093c:	1dfb      	adds	r3, r7, #7
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b25b      	sxtb	r3, r3
 8000942:	089b      	lsrs	r3, r3, #2
 8000944:	33c0      	adds	r3, #192	@ 0xc0
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	589b      	ldr	r3, [r3, r2]
 800094a:	1dfa      	adds	r2, r7, #7
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	0011      	movs	r1, r2
 8000950:	2203      	movs	r2, #3
 8000952:	400a      	ands	r2, r1
 8000954:	00d2      	lsls	r2, r2, #3
 8000956:	21ff      	movs	r1, #255	@ 0xff
 8000958:	4091      	lsls	r1, r2
 800095a:	000a      	movs	r2, r1
 800095c:	43d2      	mvns	r2, r2
 800095e:	401a      	ands	r2, r3
 8000960:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	019b      	lsls	r3, r3, #6
 8000966:	22ff      	movs	r2, #255	@ 0xff
 8000968:	401a      	ands	r2, r3
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	0018      	movs	r0, r3
 8000970:	2303      	movs	r3, #3
 8000972:	4003      	ands	r3, r0
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000978:	481f      	ldr	r0, [pc, #124]	@ (80009f8 <__NVIC_SetPriority+0xd4>)
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	b25b      	sxtb	r3, r3
 8000980:	089b      	lsrs	r3, r3, #2
 8000982:	430a      	orrs	r2, r1
 8000984:	33c0      	adds	r3, #192	@ 0xc0
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800098a:	e031      	b.n	80009f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800098c:	4a1b      	ldr	r2, [pc, #108]	@ (80009fc <__NVIC_SetPriority+0xd8>)
 800098e:	1dfb      	adds	r3, r7, #7
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	0019      	movs	r1, r3
 8000994:	230f      	movs	r3, #15
 8000996:	400b      	ands	r3, r1
 8000998:	3b08      	subs	r3, #8
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	3306      	adds	r3, #6
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	18d3      	adds	r3, r2, r3
 80009a2:	3304      	adds	r3, #4
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	1dfa      	adds	r2, r7, #7
 80009a8:	7812      	ldrb	r2, [r2, #0]
 80009aa:	0011      	movs	r1, r2
 80009ac:	2203      	movs	r2, #3
 80009ae:	400a      	ands	r2, r1
 80009b0:	00d2      	lsls	r2, r2, #3
 80009b2:	21ff      	movs	r1, #255	@ 0xff
 80009b4:	4091      	lsls	r1, r2
 80009b6:	000a      	movs	r2, r1
 80009b8:	43d2      	mvns	r2, r2
 80009ba:	401a      	ands	r2, r3
 80009bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	019b      	lsls	r3, r3, #6
 80009c2:	22ff      	movs	r2, #255	@ 0xff
 80009c4:	401a      	ands	r2, r3
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	0018      	movs	r0, r3
 80009cc:	2303      	movs	r3, #3
 80009ce:	4003      	ands	r3, r0
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d4:	4809      	ldr	r0, [pc, #36]	@ (80009fc <__NVIC_SetPriority+0xd8>)
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	001c      	movs	r4, r3
 80009dc:	230f      	movs	r3, #15
 80009de:	4023      	ands	r3, r4
 80009e0:	3b08      	subs	r3, #8
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	430a      	orrs	r2, r1
 80009e6:	3306      	adds	r3, #6
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	18c3      	adds	r3, r0, r3
 80009ec:	3304      	adds	r3, #4
 80009ee:	601a      	str	r2, [r3, #0]
}
 80009f0:	46c0      	nop			@ (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b003      	add	sp, #12
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	e000e100 	.word	0xe000e100
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	1e5a      	subs	r2, r3, #1
 8000a0c:	2380      	movs	r3, #128	@ 0x80
 8000a0e:	045b      	lsls	r3, r3, #17
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d301      	bcc.n	8000a18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a14:	2301      	movs	r3, #1
 8000a16:	e010      	b.n	8000a3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a18:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <SysTick_Config+0x44>)
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	3a01      	subs	r2, #1
 8000a1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a20:	2301      	movs	r3, #1
 8000a22:	425b      	negs	r3, r3
 8000a24:	2103      	movs	r1, #3
 8000a26:	0018      	movs	r0, r3
 8000a28:	f7ff ff7c 	bl	8000924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a2c:	4b05      	ldr	r3, [pc, #20]	@ (8000a44 <SysTick_Config+0x44>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a32:	4b04      	ldr	r3, [pc, #16]	@ (8000a44 <SysTick_Config+0x44>)
 8000a34:	2207      	movs	r2, #7
 8000a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b002      	add	sp, #8
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	e000e010 	.word	0xe000e010

08000a48 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	210f      	movs	r1, #15
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	1c02      	adds	r2, r0, #0
 8000a58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b25b      	sxtb	r3, r3
 8000a62:	0011      	movs	r1, r2
 8000a64:	0018      	movs	r0, r3
 8000a66:	f7ff ff5d 	bl	8000924 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b004      	add	sp, #16
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff ffbf 	bl	8000a00 <SysTick_Config>
 8000a82:	0003      	movs	r3, r0
}
 8000a84:	0018      	movs	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b002      	add	sp, #8
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9a:	e14f      	b.n	8000d3c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	697a      	ldr	r2, [r7, #20]
 8000aa4:	4091      	lsls	r1, r2
 8000aa6:	000a      	movs	r2, r1
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d100      	bne.n	8000ab4 <HAL_GPIO_Init+0x28>
 8000ab2:	e140      	b.n	8000d36 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	2203      	movs	r2, #3
 8000aba:	4013      	ands	r3, r2
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d005      	beq.n	8000acc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d130      	bne.n	8000b2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	409a      	lsls	r2, r3
 8000ada:	0013      	movs	r3, r2
 8000adc:	43da      	mvns	r2, r3
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	68da      	ldr	r2, [r3, #12]
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	409a      	lsls	r2, r3
 8000aee:	0013      	movs	r3, r2
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b02:	2201      	movs	r2, #1
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	409a      	lsls	r2, r3
 8000b08:	0013      	movs	r3, r2
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	091b      	lsrs	r3, r3, #4
 8000b18:	2201      	movs	r2, #1
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	409a      	lsls	r2, r3
 8000b20:	0013      	movs	r3, r2
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	2203      	movs	r2, #3
 8000b34:	4013      	ands	r3, r2
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	d017      	beq.n	8000b6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	2203      	movs	r2, #3
 8000b46:	409a      	lsls	r2, r3
 8000b48:	0013      	movs	r3, r2
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	689a      	ldr	r2, [r3, #8]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	409a      	lsls	r2, r3
 8000b5c:	0013      	movs	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	2203      	movs	r2, #3
 8000b70:	4013      	ands	r3, r2
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d123      	bne.n	8000bbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	08da      	lsrs	r2, r3, #3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3208      	adds	r2, #8
 8000b7e:	0092      	lsls	r2, r2, #2
 8000b80:	58d3      	ldr	r3, [r2, r3]
 8000b82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	2207      	movs	r2, #7
 8000b88:	4013      	ands	r3, r2
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	220f      	movs	r2, #15
 8000b8e:	409a      	lsls	r2, r3
 8000b90:	0013      	movs	r3, r2
 8000b92:	43da      	mvns	r2, r3
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	691a      	ldr	r2, [r3, #16]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	2107      	movs	r1, #7
 8000ba2:	400b      	ands	r3, r1
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	409a      	lsls	r2, r3
 8000ba8:	0013      	movs	r3, r2
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	08da      	lsrs	r2, r3, #3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3208      	adds	r2, #8
 8000bb8:	0092      	lsls	r2, r2, #2
 8000bba:	6939      	ldr	r1, [r7, #16]
 8000bbc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	2203      	movs	r2, #3
 8000bca:	409a      	lsls	r2, r3
 8000bcc:	0013      	movs	r3, r2
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2203      	movs	r2, #3
 8000bdc:	401a      	ands	r2, r3
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	409a      	lsls	r2, r3
 8000be4:	0013      	movs	r3, r2
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	23c0      	movs	r3, #192	@ 0xc0
 8000bf8:	029b      	lsls	r3, r3, #10
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	d100      	bne.n	8000c00 <HAL_GPIO_Init+0x174>
 8000bfe:	e09a      	b.n	8000d36 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c00:	4b54      	ldr	r3, [pc, #336]	@ (8000d54 <HAL_GPIO_Init+0x2c8>)
 8000c02:	699a      	ldr	r2, [r3, #24]
 8000c04:	4b53      	ldr	r3, [pc, #332]	@ (8000d54 <HAL_GPIO_Init+0x2c8>)
 8000c06:	2101      	movs	r1, #1
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	619a      	str	r2, [r3, #24]
 8000c0c:	4b51      	ldr	r3, [pc, #324]	@ (8000d54 <HAL_GPIO_Init+0x2c8>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	2201      	movs	r2, #1
 8000c12:	4013      	ands	r3, r2
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c18:	4a4f      	ldr	r2, [pc, #316]	@ (8000d58 <HAL_GPIO_Init+0x2cc>)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	089b      	lsrs	r3, r3, #2
 8000c1e:	3302      	adds	r3, #2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	589b      	ldr	r3, [r3, r2]
 8000c24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	2203      	movs	r2, #3
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	220f      	movs	r2, #15
 8000c30:	409a      	lsls	r2, r3
 8000c32:	0013      	movs	r3, r2
 8000c34:	43da      	mvns	r2, r3
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	2390      	movs	r3, #144	@ 0x90
 8000c40:	05db      	lsls	r3, r3, #23
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d013      	beq.n	8000c6e <HAL_GPIO_Init+0x1e2>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a44      	ldr	r2, [pc, #272]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d00d      	beq.n	8000c6a <HAL_GPIO_Init+0x1de>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a43      	ldr	r2, [pc, #268]	@ (8000d60 <HAL_GPIO_Init+0x2d4>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d007      	beq.n	8000c66 <HAL_GPIO_Init+0x1da>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a42      	ldr	r2, [pc, #264]	@ (8000d64 <HAL_GPIO_Init+0x2d8>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d101      	bne.n	8000c62 <HAL_GPIO_Init+0x1d6>
 8000c5e:	2303      	movs	r3, #3
 8000c60:	e006      	b.n	8000c70 <HAL_GPIO_Init+0x1e4>
 8000c62:	2305      	movs	r3, #5
 8000c64:	e004      	b.n	8000c70 <HAL_GPIO_Init+0x1e4>
 8000c66:	2302      	movs	r3, #2
 8000c68:	e002      	b.n	8000c70 <HAL_GPIO_Init+0x1e4>
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e000      	b.n	8000c70 <HAL_GPIO_Init+0x1e4>
 8000c6e:	2300      	movs	r3, #0
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	2103      	movs	r1, #3
 8000c74:	400a      	ands	r2, r1
 8000c76:	0092      	lsls	r2, r2, #2
 8000c78:	4093      	lsls	r3, r2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c80:	4935      	ldr	r1, [pc, #212]	@ (8000d58 <HAL_GPIO_Init+0x2cc>)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	089b      	lsrs	r3, r3, #2
 8000c86:	3302      	adds	r3, #2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c8e:	4b36      	ldr	r3, [pc, #216]	@ (8000d68 <HAL_GPIO_Init+0x2dc>)
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	43da      	mvns	r2, r3
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	2380      	movs	r3, #128	@ 0x80
 8000ca4:	035b      	lsls	r3, r3, #13
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	d003      	beq.n	8000cb2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d68 <HAL_GPIO_Init+0x2dc>)
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d68 <HAL_GPIO_Init+0x2dc>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	43da      	mvns	r2, r3
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	2380      	movs	r3, #128	@ 0x80
 8000cce:	039b      	lsls	r3, r3, #14
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	d003      	beq.n	8000cdc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cdc:	4b22      	ldr	r3, [pc, #136]	@ (8000d68 <HAL_GPIO_Init+0x2dc>)
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000ce2:	4b21      	ldr	r3, [pc, #132]	@ (8000d68 <HAL_GPIO_Init+0x2dc>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	43da      	mvns	r2, r3
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	2380      	movs	r3, #128	@ 0x80
 8000cf8:	029b      	lsls	r3, r3, #10
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	d003      	beq.n	8000d06 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d06:	4b18      	ldr	r3, [pc, #96]	@ (8000d68 <HAL_GPIO_Init+0x2dc>)
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	@ (8000d68 <HAL_GPIO_Init+0x2dc>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	43da      	mvns	r2, r3
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	2380      	movs	r3, #128	@ 0x80
 8000d22:	025b      	lsls	r3, r3, #9
 8000d24:	4013      	ands	r3, r2
 8000d26:	d003      	beq.n	8000d30 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d30:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <HAL_GPIO_Init+0x2dc>)
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	40da      	lsrs	r2, r3
 8000d44:	1e13      	subs	r3, r2, #0
 8000d46:	d000      	beq.n	8000d4a <HAL_GPIO_Init+0x2be>
 8000d48:	e6a8      	b.n	8000a9c <HAL_GPIO_Init+0x10>
  } 
}
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	46c0      	nop			@ (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b006      	add	sp, #24
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40010000 	.word	0x40010000
 8000d5c:	48000400 	.word	0x48000400
 8000d60:	48000800 	.word	0x48000800
 8000d64:	48000c00 	.word	0x48000c00
 8000d68:	40010400 	.word	0x40010400

08000d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	0008      	movs	r0, r1
 8000d76:	0011      	movs	r1, r2
 8000d78:	1cbb      	adds	r3, r7, #2
 8000d7a:	1c02      	adds	r2, r0, #0
 8000d7c:	801a      	strh	r2, [r3, #0]
 8000d7e:	1c7b      	adds	r3, r7, #1
 8000d80:	1c0a      	adds	r2, r1, #0
 8000d82:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d84:	1c7b      	adds	r3, r7, #1
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d004      	beq.n	8000d96 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d8c:	1cbb      	adds	r3, r7, #2
 8000d8e:	881a      	ldrh	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d94:	e003      	b.n	8000d9e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d96:	1cbb      	adds	r3, r7, #2
 8000d98:	881a      	ldrh	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b002      	add	sp, #8
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e08f      	b.n	8000eda <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2241      	movs	r2, #65	@ 0x41
 8000dbe:	5c9b      	ldrb	r3, [r3, r2]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d107      	bne.n	8000dd6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2240      	movs	r2, #64	@ 0x40
 8000dca:	2100      	movs	r1, #0
 8000dcc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f7ff fc15 	bl	8000600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2241      	movs	r2, #65	@ 0x41
 8000dda:	2124      	movs	r1, #36	@ 0x24
 8000ddc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2101      	movs	r1, #1
 8000dea:	438a      	bics	r2, r1
 8000dec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	493b      	ldr	r1, [pc, #236]	@ (8000ee4 <HAL_I2C_Init+0x13c>)
 8000df8:	400a      	ands	r2, r1
 8000dfa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4938      	ldr	r1, [pc, #224]	@ (8000ee8 <HAL_I2C_Init+0x140>)
 8000e08:	400a      	ands	r2, r1
 8000e0a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d108      	bne.n	8000e26 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2180      	movs	r1, #128	@ 0x80
 8000e1e:	0209      	lsls	r1, r1, #8
 8000e20:	430a      	orrs	r2, r1
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	e007      	b.n	8000e36 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2184      	movs	r1, #132	@ 0x84
 8000e30:	0209      	lsls	r1, r1, #8
 8000e32:	430a      	orrs	r2, r1
 8000e34:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d109      	bne.n	8000e52 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2180      	movs	r1, #128	@ 0x80
 8000e4a:	0109      	lsls	r1, r1, #4
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	e007      	b.n	8000e62 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4923      	ldr	r1, [pc, #140]	@ (8000eec <HAL_I2C_Init+0x144>)
 8000e5e:	400a      	ands	r2, r1
 8000e60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4920      	ldr	r1, [pc, #128]	@ (8000ef0 <HAL_I2C_Init+0x148>)
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	491a      	ldr	r1, [pc, #104]	@ (8000ee8 <HAL_I2C_Init+0x140>)
 8000e7e:	400a      	ands	r2, r1
 8000e80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	691a      	ldr	r2, [r3, #16]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69d9      	ldr	r1, [r3, #28]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a1a      	ldr	r2, [r3, #32]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2241      	movs	r2, #65	@ 0x41
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2242      	movs	r2, #66	@ 0x42
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	0018      	movs	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b002      	add	sp, #8
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	f0ffffff 	.word	0xf0ffffff
 8000ee8:	ffff7fff 	.word	0xffff7fff
 8000eec:	fffff7ff 	.word	0xfffff7ff
 8000ef0:	02008000 	.word	0x02008000

08000ef4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b089      	sub	sp, #36	@ 0x24
 8000ef8:	af02      	add	r7, sp, #8
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	000c      	movs	r4, r1
 8000efe:	0010      	movs	r0, r2
 8000f00:	0019      	movs	r1, r3
 8000f02:	230a      	movs	r3, #10
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	1c22      	adds	r2, r4, #0
 8000f08:	801a      	strh	r2, [r3, #0]
 8000f0a:	2308      	movs	r3, #8
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	1c02      	adds	r2, r0, #0
 8000f10:	801a      	strh	r2, [r3, #0]
 8000f12:	1dbb      	adds	r3, r7, #6
 8000f14:	1c0a      	adds	r2, r1, #0
 8000f16:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2241      	movs	r2, #65	@ 0x41
 8000f1c:	5c9b      	ldrb	r3, [r3, r2]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b20      	cmp	r3, #32
 8000f22:	d000      	beq.n	8000f26 <HAL_I2C_Mem_Read+0x32>
 8000f24:	e110      	b.n	8001148 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d004      	beq.n	8000f36 <HAL_I2C_Mem_Read+0x42>
 8000f2c:	232c      	movs	r3, #44	@ 0x2c
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d105      	bne.n	8000f42 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2280      	movs	r2, #128	@ 0x80
 8000f3a:	0092      	lsls	r2, r2, #2
 8000f3c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e103      	b.n	800114a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2240      	movs	r2, #64	@ 0x40
 8000f46:	5c9b      	ldrb	r3, [r3, r2]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d101      	bne.n	8000f50 <HAL_I2C_Mem_Read+0x5c>
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	e0fc      	b.n	800114a <HAL_I2C_Mem_Read+0x256>
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2240      	movs	r2, #64	@ 0x40
 8000f54:	2101      	movs	r1, #1
 8000f56:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000f58:	f7ff fcb6 	bl	80008c8 <HAL_GetTick>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f60:	2380      	movs	r3, #128	@ 0x80
 8000f62:	0219      	lsls	r1, r3, #8
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2319      	movs	r3, #25
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f000 f979 	bl	8001264 <I2C_WaitOnFlagUntilTimeout>
 8000f72:	1e03      	subs	r3, r0, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e0e7      	b.n	800114a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2241      	movs	r2, #65	@ 0x41
 8000f7e:	2122      	movs	r1, #34	@ 0x22
 8000f80:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2242      	movs	r2, #66	@ 0x42
 8000f86:	2140      	movs	r1, #64	@ 0x40
 8000f88:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	222c      	movs	r2, #44	@ 0x2c
 8000f9a:	18ba      	adds	r2, r7, r2
 8000f9c:	8812      	ldrh	r2, [r2, #0]
 8000f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000fa6:	1dbb      	adds	r3, r7, #6
 8000fa8:	881c      	ldrh	r4, [r3, #0]
 8000faa:	2308      	movs	r3, #8
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	881a      	ldrh	r2, [r3, #0]
 8000fb0:	230a      	movs	r3, #10
 8000fb2:	18fb      	adds	r3, r7, r3
 8000fb4:	8819      	ldrh	r1, [r3, #0]
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	9301      	str	r3, [sp, #4]
 8000fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	0023      	movs	r3, r4
 8000fc2:	f000 f8cb 	bl	800115c <I2C_RequestMemoryRead>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d005      	beq.n	8000fd6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2240      	movs	r2, #64	@ 0x40
 8000fce:	2100      	movs	r1, #0
 8000fd0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e0b9      	b.n	800114a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	2bff      	cmp	r3, #255	@ 0xff
 8000fde:	d911      	bls.n	8001004 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	2380      	movs	r3, #128	@ 0x80
 8000fee:	045c      	lsls	r4, r3, #17
 8000ff0:	230a      	movs	r3, #10
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	8819      	ldrh	r1, [r3, #0]
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	4b56      	ldr	r3, [pc, #344]	@ (8001154 <HAL_I2C_Mem_Read+0x260>)
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	0023      	movs	r3, r4
 8000ffe:	f000 fb0b 	bl	8001618 <I2C_TransferConfig>
 8001002:	e012      	b.n	800102a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001008:	b29a      	uxth	r2, r3
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001012:	b2da      	uxtb	r2, r3
 8001014:	2380      	movs	r3, #128	@ 0x80
 8001016:	049c      	lsls	r4, r3, #18
 8001018:	230a      	movs	r3, #10
 800101a:	18fb      	adds	r3, r7, r3
 800101c:	8819      	ldrh	r1, [r3, #0]
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	4b4c      	ldr	r3, [pc, #304]	@ (8001154 <HAL_I2C_Mem_Read+0x260>)
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	0023      	movs	r3, r4
 8001026:	f000 faf7 	bl	8001618 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800102a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	0013      	movs	r3, r2
 8001034:	2200      	movs	r2, #0
 8001036:	2104      	movs	r1, #4
 8001038:	f000 f914 	bl	8001264 <I2C_WaitOnFlagUntilTimeout>
 800103c:	1e03      	subs	r3, r0, #0
 800103e:	d001      	beq.n	8001044 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e082      	b.n	800114a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001060:	3b01      	subs	r3, #1
 8001062:	b29a      	uxth	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800106c:	b29b      	uxth	r3, r3
 800106e:	3b01      	subs	r3, #1
 8001070:	b29a      	uxth	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800107a:	b29b      	uxth	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d03a      	beq.n	80010f6 <HAL_I2C_Mem_Read+0x202>
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001084:	2b00      	cmp	r3, #0
 8001086:	d136      	bne.n	80010f6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	0013      	movs	r3, r2
 8001092:	2200      	movs	r2, #0
 8001094:	2180      	movs	r1, #128	@ 0x80
 8001096:	f000 f8e5 	bl	8001264 <I2C_WaitOnFlagUntilTimeout>
 800109a:	1e03      	subs	r3, r0, #0
 800109c:	d001      	beq.n	80010a2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e053      	b.n	800114a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	2bff      	cmp	r3, #255	@ 0xff
 80010aa:	d911      	bls.n	80010d0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2201      	movs	r2, #1
 80010b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	2380      	movs	r3, #128	@ 0x80
 80010ba:	045c      	lsls	r4, r3, #17
 80010bc:	230a      	movs	r3, #10
 80010be:	18fb      	adds	r3, r7, r3
 80010c0:	8819      	ldrh	r1, [r3, #0]
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	2300      	movs	r3, #0
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	0023      	movs	r3, r4
 80010ca:	f000 faa5 	bl	8001618 <I2C_TransferConfig>
 80010ce:	e012      	b.n	80010f6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	2380      	movs	r3, #128	@ 0x80
 80010e2:	049c      	lsls	r4, r3, #18
 80010e4:	230a      	movs	r3, #10
 80010e6:	18fb      	adds	r3, r7, r3
 80010e8:	8819      	ldrh	r1, [r3, #0]
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	2300      	movs	r3, #0
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	0023      	movs	r3, r4
 80010f2:	f000 fa91 	bl	8001618 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d194      	bne.n	800102a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	0018      	movs	r0, r3
 8001108:	f000 f94a 	bl	80013a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800110c:	1e03      	subs	r3, r0, #0
 800110e:	d001      	beq.n	8001114 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e01a      	b.n	800114a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2220      	movs	r2, #32
 800111a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	490c      	ldr	r1, [pc, #48]	@ (8001158 <HAL_I2C_Mem_Read+0x264>)
 8001128:	400a      	ands	r2, r1
 800112a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2241      	movs	r2, #65	@ 0x41
 8001130:	2120      	movs	r1, #32
 8001132:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2242      	movs	r2, #66	@ 0x42
 8001138:	2100      	movs	r1, #0
 800113a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2240      	movs	r2, #64	@ 0x40
 8001140:	2100      	movs	r1, #0
 8001142:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001144:	2300      	movs	r3, #0
 8001146:	e000      	b.n	800114a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001148:	2302      	movs	r3, #2
  }
}
 800114a:	0018      	movs	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	b007      	add	sp, #28
 8001150:	bd90      	pop	{r4, r7, pc}
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	80002400 	.word	0x80002400
 8001158:	fe00e800 	.word	0xfe00e800

0800115c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800115c:	b5b0      	push	{r4, r5, r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af02      	add	r7, sp, #8
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	000c      	movs	r4, r1
 8001166:	0010      	movs	r0, r2
 8001168:	0019      	movs	r1, r3
 800116a:	250a      	movs	r5, #10
 800116c:	197b      	adds	r3, r7, r5
 800116e:	1c22      	adds	r2, r4, #0
 8001170:	801a      	strh	r2, [r3, #0]
 8001172:	2308      	movs	r3, #8
 8001174:	18fb      	adds	r3, r7, r3
 8001176:	1c02      	adds	r2, r0, #0
 8001178:	801a      	strh	r2, [r3, #0]
 800117a:	1dbb      	adds	r3, r7, #6
 800117c:	1c0a      	adds	r2, r1, #0
 800117e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001180:	1dbb      	adds	r3, r7, #6
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	197b      	adds	r3, r7, r5
 8001188:	8819      	ldrh	r1, [r3, #0]
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	4b23      	ldr	r3, [pc, #140]	@ (800121c <I2C_RequestMemoryRead+0xc0>)
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2300      	movs	r3, #0
 8001192:	f000 fa41 	bl	8001618 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001198:	6a39      	ldr	r1, [r7, #32]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	0018      	movs	r0, r3
 800119e:	f000 f8b9 	bl	8001314 <I2C_WaitOnTXISFlagUntilTimeout>
 80011a2:	1e03      	subs	r3, r0, #0
 80011a4:	d001      	beq.n	80011aa <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e033      	b.n	8001212 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80011aa:	1dbb      	adds	r3, r7, #6
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d107      	bne.n	80011c2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80011b2:	2308      	movs	r3, #8
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	629a      	str	r2, [r3, #40]	@ 0x28
 80011c0:	e019      	b.n	80011f6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80011c2:	2308      	movs	r3, #8
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80011d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011d6:	6a39      	ldr	r1, [r7, #32]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	0018      	movs	r0, r3
 80011dc:	f000 f89a 	bl	8001314 <I2C_WaitOnTXISFlagUntilTimeout>
 80011e0:	1e03      	subs	r3, r0, #0
 80011e2:	d001      	beq.n	80011e8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e014      	b.n	8001212 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80011e8:	2308      	movs	r3, #8
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80011f6:	6a3a      	ldr	r2, [r7, #32]
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	0013      	movs	r3, r2
 8001200:	2200      	movs	r2, #0
 8001202:	2140      	movs	r1, #64	@ 0x40
 8001204:	f000 f82e 	bl	8001264 <I2C_WaitOnFlagUntilTimeout>
 8001208:	1e03      	subs	r3, r0, #0
 800120a:	d001      	beq.n	8001210 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	0018      	movs	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	b004      	add	sp, #16
 8001218:	bdb0      	pop	{r4, r5, r7, pc}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	80002000 	.word	0x80002000

08001220 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	2202      	movs	r2, #2
 8001230:	4013      	ands	r3, r2
 8001232:	2b02      	cmp	r3, #2
 8001234:	d103      	bne.n	800123e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2200      	movs	r2, #0
 800123c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	2201      	movs	r2, #1
 8001246:	4013      	ands	r3, r2
 8001248:	2b01      	cmp	r3, #1
 800124a:	d007      	beq.n	800125c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	699a      	ldr	r2, [r3, #24]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2101      	movs	r1, #1
 8001258:	430a      	orrs	r2, r1
 800125a:	619a      	str	r2, [r3, #24]
  }
}
 800125c:	46c0      	nop			@ (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	b002      	add	sp, #8
 8001262:	bd80      	pop	{r7, pc}

08001264 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	1dfb      	adds	r3, r7, #7
 8001272:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001274:	e03a      	b.n	80012ec <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	6839      	ldr	r1, [r7, #0]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	0018      	movs	r0, r3
 800127e:	f000 f8d3 	bl	8001428 <I2C_IsErrorOccurred>
 8001282:	1e03      	subs	r3, r0, #0
 8001284:	d001      	beq.n	800128a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e040      	b.n	800130c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	d02d      	beq.n	80012ec <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001290:	f7ff fb1a 	bl	80008c8 <HAL_GetTick>
 8001294:	0002      	movs	r2, r0
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	429a      	cmp	r2, r3
 800129e:	d302      	bcc.n	80012a6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d122      	bne.n	80012ec <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	4013      	ands	r3, r2
 80012b0:	68ba      	ldr	r2, [r7, #8]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	425a      	negs	r2, r3
 80012b6:	4153      	adcs	r3, r2
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	001a      	movs	r2, r3
 80012bc:	1dfb      	adds	r3, r7, #7
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d113      	bne.n	80012ec <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c8:	2220      	movs	r2, #32
 80012ca:	431a      	orrs	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2241      	movs	r2, #65	@ 0x41
 80012d4:	2120      	movs	r1, #32
 80012d6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2242      	movs	r2, #66	@ 0x42
 80012dc:	2100      	movs	r1, #0
 80012de:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2240      	movs	r2, #64	@ 0x40
 80012e4:	2100      	movs	r1, #0
 80012e6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e00f      	b.n	800130c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	4013      	ands	r3, r2
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	425a      	negs	r2, r3
 80012fc:	4153      	adcs	r3, r2
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	001a      	movs	r2, r3
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	d0b5      	beq.n	8001276 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	0018      	movs	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	b004      	add	sp, #16
 8001312:	bd80      	pop	{r7, pc}

08001314 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001320:	e032      	b.n	8001388 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	0018      	movs	r0, r3
 800132a:	f000 f87d 	bl	8001428 <I2C_IsErrorOccurred>
 800132e:	1e03      	subs	r3, r0, #0
 8001330:	d001      	beq.n	8001336 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e030      	b.n	8001398 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	3301      	adds	r3, #1
 800133a:	d025      	beq.n	8001388 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800133c:	f7ff fac4 	bl	80008c8 <HAL_GetTick>
 8001340:	0002      	movs	r2, r0
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	429a      	cmp	r2, r3
 800134a:	d302      	bcc.n	8001352 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d11a      	bne.n	8001388 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	2202      	movs	r2, #2
 800135a:	4013      	ands	r3, r2
 800135c:	2b02      	cmp	r3, #2
 800135e:	d013      	beq.n	8001388 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001364:	2220      	movs	r2, #32
 8001366:	431a      	orrs	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2241      	movs	r2, #65	@ 0x41
 8001370:	2120      	movs	r1, #32
 8001372:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2242      	movs	r2, #66	@ 0x42
 8001378:	2100      	movs	r1, #0
 800137a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2240      	movs	r2, #64	@ 0x40
 8001380:	2100      	movs	r1, #0
 8001382:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e007      	b.n	8001398 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	2202      	movs	r2, #2
 8001390:	4013      	ands	r3, r2
 8001392:	2b02      	cmp	r3, #2
 8001394:	d1c5      	bne.n	8001322 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	0018      	movs	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	b004      	add	sp, #16
 800139e:	bd80      	pop	{r7, pc}

080013a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013ac:	e02f      	b.n	800140e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	0018      	movs	r0, r3
 80013b6:	f000 f837 	bl	8001428 <I2C_IsErrorOccurred>
 80013ba:	1e03      	subs	r3, r0, #0
 80013bc:	d001      	beq.n	80013c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e02d      	b.n	800141e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013c2:	f7ff fa81 	bl	80008c8 <HAL_GetTick>
 80013c6:	0002      	movs	r2, r0
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d302      	bcc.n	80013d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d11a      	bne.n	800140e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	2220      	movs	r2, #32
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b20      	cmp	r3, #32
 80013e4:	d013      	beq.n	800140e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	2220      	movs	r2, #32
 80013ec:	431a      	orrs	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2241      	movs	r2, #65	@ 0x41
 80013f6:	2120      	movs	r1, #32
 80013f8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2242      	movs	r2, #66	@ 0x42
 80013fe:	2100      	movs	r1, #0
 8001400:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2240      	movs	r2, #64	@ 0x40
 8001406:	2100      	movs	r1, #0
 8001408:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e007      	b.n	800141e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	2220      	movs	r2, #32
 8001416:	4013      	ands	r3, r2
 8001418:	2b20      	cmp	r3, #32
 800141a:	d1c8      	bne.n	80013ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	0018      	movs	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	b004      	add	sp, #16
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	@ 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001434:	2327      	movs	r3, #39	@ 0x27
 8001436:	18fb      	adds	r3, r7, r3
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	2210      	movs	r2, #16
 8001450:	4013      	ands	r3, r2
 8001452:	d100      	bne.n	8001456 <I2C_IsErrorOccurred+0x2e>
 8001454:	e079      	b.n	800154a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2210      	movs	r2, #16
 800145c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800145e:	e057      	b.n	8001510 <I2C_IsErrorOccurred+0xe8>
 8001460:	2227      	movs	r2, #39	@ 0x27
 8001462:	18bb      	adds	r3, r7, r2
 8001464:	18ba      	adds	r2, r7, r2
 8001466:	7812      	ldrb	r2, [r2, #0]
 8001468:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	3301      	adds	r3, #1
 800146e:	d04f      	beq.n	8001510 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001470:	f7ff fa2a 	bl	80008c8 <HAL_GetTick>
 8001474:	0002      	movs	r2, r0
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	429a      	cmp	r2, r3
 800147e:	d302      	bcc.n	8001486 <I2C_IsErrorOccurred+0x5e>
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d144      	bne.n	8001510 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	2380      	movs	r3, #128	@ 0x80
 800148e:	01db      	lsls	r3, r3, #7
 8001490:	4013      	ands	r3, r2
 8001492:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001494:	2013      	movs	r0, #19
 8001496:	183b      	adds	r3, r7, r0
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	2142      	movs	r1, #66	@ 0x42
 800149c:	5c52      	ldrb	r2, [r2, r1]
 800149e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	699a      	ldr	r2, [r3, #24]
 80014a6:	2380      	movs	r3, #128	@ 0x80
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	401a      	ands	r2, r3
 80014ac:	2380      	movs	r3, #128	@ 0x80
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d126      	bne.n	8001502 <I2C_IsErrorOccurred+0xda>
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	2380      	movs	r3, #128	@ 0x80
 80014b8:	01db      	lsls	r3, r3, #7
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d021      	beq.n	8001502 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80014be:	183b      	adds	r3, r7, r0
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b20      	cmp	r3, #32
 80014c4:	d01d      	beq.n	8001502 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2180      	movs	r1, #128	@ 0x80
 80014d2:	01c9      	lsls	r1, r1, #7
 80014d4:	430a      	orrs	r2, r1
 80014d6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80014d8:	f7ff f9f6 	bl	80008c8 <HAL_GetTick>
 80014dc:	0003      	movs	r3, r0
 80014de:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014e0:	e00f      	b.n	8001502 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80014e2:	f7ff f9f1 	bl	80008c8 <HAL_GetTick>
 80014e6:	0002      	movs	r2, r0
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b19      	cmp	r3, #25
 80014ee:	d908      	bls.n	8001502 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80014f0:	6a3b      	ldr	r3, [r7, #32]
 80014f2:	2220      	movs	r2, #32
 80014f4:	4313      	orrs	r3, r2
 80014f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80014f8:	2327      	movs	r3, #39	@ 0x27
 80014fa:	18fb      	adds	r3, r7, r3
 80014fc:	2201      	movs	r2, #1
 80014fe:	701a      	strb	r2, [r3, #0]

              break;
 8001500:	e006      	b.n	8001510 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	2220      	movs	r2, #32
 800150a:	4013      	ands	r3, r2
 800150c:	2b20      	cmp	r3, #32
 800150e:	d1e8      	bne.n	80014e2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	2220      	movs	r2, #32
 8001518:	4013      	ands	r3, r2
 800151a:	2b20      	cmp	r3, #32
 800151c:	d004      	beq.n	8001528 <I2C_IsErrorOccurred+0x100>
 800151e:	2327      	movs	r3, #39	@ 0x27
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d09b      	beq.n	8001460 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001528:	2327      	movs	r3, #39	@ 0x27
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d103      	bne.n	800153a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2220      	movs	r2, #32
 8001538:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800153a:	6a3b      	ldr	r3, [r7, #32]
 800153c:	2204      	movs	r2, #4
 800153e:	4313      	orrs	r3, r2
 8001540:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001542:	2327      	movs	r3, #39	@ 0x27
 8001544:	18fb      	adds	r3, r7, r3
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	2380      	movs	r3, #128	@ 0x80
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4013      	ands	r3, r2
 800155a:	d00c      	beq.n	8001576 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	2201      	movs	r2, #1
 8001560:	4313      	orrs	r3, r2
 8001562:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2280      	movs	r2, #128	@ 0x80
 800156a:	0052      	lsls	r2, r2, #1
 800156c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800156e:	2327      	movs	r3, #39	@ 0x27
 8001570:	18fb      	adds	r3, r7, r3
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	2380      	movs	r3, #128	@ 0x80
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4013      	ands	r3, r2
 800157e:	d00c      	beq.n	800159a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	2208      	movs	r2, #8
 8001584:	4313      	orrs	r3, r2
 8001586:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2280      	movs	r2, #128	@ 0x80
 800158e:	00d2      	lsls	r2, r2, #3
 8001590:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001592:	2327      	movs	r3, #39	@ 0x27
 8001594:	18fb      	adds	r3, r7, r3
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	2380      	movs	r3, #128	@ 0x80
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4013      	ands	r3, r2
 80015a2:	d00c      	beq.n	80015be <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	2202      	movs	r2, #2
 80015a8:	4313      	orrs	r3, r2
 80015aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2280      	movs	r2, #128	@ 0x80
 80015b2:	0092      	lsls	r2, r2, #2
 80015b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80015b6:	2327      	movs	r3, #39	@ 0x27
 80015b8:	18fb      	adds	r3, r7, r3
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80015be:	2327      	movs	r3, #39	@ 0x27
 80015c0:	18fb      	adds	r3, r7, r3
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d01d      	beq.n	8001604 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	0018      	movs	r0, r3
 80015cc:	f7ff fe28 	bl	8001220 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	490e      	ldr	r1, [pc, #56]	@ (8001614 <I2C_IsErrorOccurred+0x1ec>)
 80015dc:	400a      	ands	r2, r1
 80015de:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2241      	movs	r2, #65	@ 0x41
 80015f0:	2120      	movs	r1, #32
 80015f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2242      	movs	r2, #66	@ 0x42
 80015f8:	2100      	movs	r1, #0
 80015fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2240      	movs	r2, #64	@ 0x40
 8001600:	2100      	movs	r1, #0
 8001602:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001604:	2327      	movs	r3, #39	@ 0x27
 8001606:	18fb      	adds	r3, r7, r3
 8001608:	781b      	ldrb	r3, [r3, #0]
}
 800160a:	0018      	movs	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	b00a      	add	sp, #40	@ 0x28
 8001610:	bd80      	pop	{r7, pc}
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	fe00e800 	.word	0xfe00e800

08001618 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b087      	sub	sp, #28
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	0008      	movs	r0, r1
 8001622:	0011      	movs	r1, r2
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	240a      	movs	r4, #10
 8001628:	193b      	adds	r3, r7, r4
 800162a:	1c02      	adds	r2, r0, #0
 800162c:	801a      	strh	r2, [r3, #0]
 800162e:	2009      	movs	r0, #9
 8001630:	183b      	adds	r3, r7, r0
 8001632:	1c0a      	adds	r2, r1, #0
 8001634:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001636:	193b      	adds	r3, r7, r4
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	059b      	lsls	r3, r3, #22
 800163c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800163e:	183b      	adds	r3, r7, r0
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	0419      	lsls	r1, r3, #16
 8001644:	23ff      	movs	r3, #255	@ 0xff
 8001646:	041b      	lsls	r3, r3, #16
 8001648:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800164a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001652:	4313      	orrs	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001662:	0d51      	lsrs	r1, r2, #21
 8001664:	2280      	movs	r2, #128	@ 0x80
 8001666:	00d2      	lsls	r2, r2, #3
 8001668:	400a      	ands	r2, r1
 800166a:	4907      	ldr	r1, [pc, #28]	@ (8001688 <I2C_TransferConfig+0x70>)
 800166c:	430a      	orrs	r2, r1
 800166e:	43d2      	mvns	r2, r2
 8001670:	401a      	ands	r2, r3
 8001672:	0011      	movs	r1, r2
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	430a      	orrs	r2, r1
 800167c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800167e:	46c0      	nop			@ (mov r8, r8)
 8001680:	46bd      	mov	sp, r7
 8001682:	b007      	add	sp, #28
 8001684:	bd90      	pop	{r4, r7, pc}
 8001686:	46c0      	nop			@ (mov r8, r8)
 8001688:	03ff63ff 	.word	0x03ff63ff

0800168c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2241      	movs	r2, #65	@ 0x41
 800169a:	5c9b      	ldrb	r3, [r3, r2]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b20      	cmp	r3, #32
 80016a0:	d138      	bne.n	8001714 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2240      	movs	r2, #64	@ 0x40
 80016a6:	5c9b      	ldrb	r3, [r3, r2]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d101      	bne.n	80016b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80016ac:	2302      	movs	r3, #2
 80016ae:	e032      	b.n	8001716 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2240      	movs	r2, #64	@ 0x40
 80016b4:	2101      	movs	r1, #1
 80016b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2241      	movs	r2, #65	@ 0x41
 80016bc:	2124      	movs	r1, #36	@ 0x24
 80016be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2101      	movs	r1, #1
 80016cc:	438a      	bics	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4911      	ldr	r1, [pc, #68]	@ (8001720 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80016dc:	400a      	ands	r2, r1
 80016de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6819      	ldr	r1, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2101      	movs	r1, #1
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2241      	movs	r2, #65	@ 0x41
 8001704:	2120      	movs	r1, #32
 8001706:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2240      	movs	r2, #64	@ 0x40
 800170c:	2100      	movs	r1, #0
 800170e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	e000      	b.n	8001716 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001714:	2302      	movs	r3, #2
  }
}
 8001716:	0018      	movs	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	b002      	add	sp, #8
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	ffffefff 	.word	0xffffefff

08001724 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2241      	movs	r2, #65	@ 0x41
 8001732:	5c9b      	ldrb	r3, [r3, r2]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b20      	cmp	r3, #32
 8001738:	d139      	bne.n	80017ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2240      	movs	r2, #64	@ 0x40
 800173e:	5c9b      	ldrb	r3, [r3, r2]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001744:	2302      	movs	r3, #2
 8001746:	e033      	b.n	80017b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2240      	movs	r2, #64	@ 0x40
 800174c:	2101      	movs	r1, #1
 800174e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2241      	movs	r2, #65	@ 0x41
 8001754:	2124      	movs	r1, #36	@ 0x24
 8001756:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2101      	movs	r1, #1
 8001764:	438a      	bics	r2, r1
 8001766:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4a11      	ldr	r2, [pc, #68]	@ (80017b8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001774:	4013      	ands	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2101      	movs	r1, #1
 8001796:	430a      	orrs	r2, r1
 8001798:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2241      	movs	r2, #65	@ 0x41
 800179e:	2120      	movs	r1, #32
 80017a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2240      	movs	r2, #64	@ 0x40
 80017a6:	2100      	movs	r1, #0
 80017a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	e000      	b.n	80017b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80017ae:	2302      	movs	r3, #2
  }
}
 80017b0:	0018      	movs	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b004      	add	sp, #16
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	fffff0ff 	.word	0xfffff0ff

080017bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e301      	b.n	8001dd2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2201      	movs	r2, #1
 80017d4:	4013      	ands	r3, r2
 80017d6:	d100      	bne.n	80017da <HAL_RCC_OscConfig+0x1e>
 80017d8:	e08d      	b.n	80018f6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017da:	4bc3      	ldr	r3, [pc, #780]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	220c      	movs	r2, #12
 80017e0:	4013      	ands	r3, r2
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d00e      	beq.n	8001804 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017e6:	4bc0      	ldr	r3, [pc, #768]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	220c      	movs	r2, #12
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d116      	bne.n	8001820 <HAL_RCC_OscConfig+0x64>
 80017f2:	4bbd      	ldr	r3, [pc, #756]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	2380      	movs	r3, #128	@ 0x80
 80017f8:	025b      	lsls	r3, r3, #9
 80017fa:	401a      	ands	r2, r3
 80017fc:	2380      	movs	r3, #128	@ 0x80
 80017fe:	025b      	lsls	r3, r3, #9
 8001800:	429a      	cmp	r2, r3
 8001802:	d10d      	bne.n	8001820 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001804:	4bb8      	ldr	r3, [pc, #736]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	2380      	movs	r3, #128	@ 0x80
 800180a:	029b      	lsls	r3, r3, #10
 800180c:	4013      	ands	r3, r2
 800180e:	d100      	bne.n	8001812 <HAL_RCC_OscConfig+0x56>
 8001810:	e070      	b.n	80018f4 <HAL_RCC_OscConfig+0x138>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d000      	beq.n	800181c <HAL_RCC_OscConfig+0x60>
 800181a:	e06b      	b.n	80018f4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e2d8      	b.n	8001dd2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d107      	bne.n	8001838 <HAL_RCC_OscConfig+0x7c>
 8001828:	4baf      	ldr	r3, [pc, #700]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4bae      	ldr	r3, [pc, #696]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 800182e:	2180      	movs	r1, #128	@ 0x80
 8001830:	0249      	lsls	r1, r1, #9
 8001832:	430a      	orrs	r2, r1
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	e02f      	b.n	8001898 <HAL_RCC_OscConfig+0xdc>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d10c      	bne.n	800185a <HAL_RCC_OscConfig+0x9e>
 8001840:	4ba9      	ldr	r3, [pc, #676]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4ba8      	ldr	r3, [pc, #672]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001846:	49a9      	ldr	r1, [pc, #676]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 8001848:	400a      	ands	r2, r1
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	4ba6      	ldr	r3, [pc, #664]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4ba5      	ldr	r3, [pc, #660]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001852:	49a7      	ldr	r1, [pc, #668]	@ (8001af0 <HAL_RCC_OscConfig+0x334>)
 8001854:	400a      	ands	r2, r1
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	e01e      	b.n	8001898 <HAL_RCC_OscConfig+0xdc>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b05      	cmp	r3, #5
 8001860:	d10e      	bne.n	8001880 <HAL_RCC_OscConfig+0xc4>
 8001862:	4ba1      	ldr	r3, [pc, #644]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4ba0      	ldr	r3, [pc, #640]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001868:	2180      	movs	r1, #128	@ 0x80
 800186a:	02c9      	lsls	r1, r1, #11
 800186c:	430a      	orrs	r2, r1
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	4b9d      	ldr	r3, [pc, #628]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b9c      	ldr	r3, [pc, #624]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001876:	2180      	movs	r1, #128	@ 0x80
 8001878:	0249      	lsls	r1, r1, #9
 800187a:	430a      	orrs	r2, r1
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	e00b      	b.n	8001898 <HAL_RCC_OscConfig+0xdc>
 8001880:	4b99      	ldr	r3, [pc, #612]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b98      	ldr	r3, [pc, #608]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001886:	4999      	ldr	r1, [pc, #612]	@ (8001aec <HAL_RCC_OscConfig+0x330>)
 8001888:	400a      	ands	r2, r1
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	4b96      	ldr	r3, [pc, #600]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b95      	ldr	r3, [pc, #596]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001892:	4997      	ldr	r1, [pc, #604]	@ (8001af0 <HAL_RCC_OscConfig+0x334>)
 8001894:	400a      	ands	r2, r1
 8001896:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d014      	beq.n	80018ca <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7ff f812 	bl	80008c8 <HAL_GetTick>
 80018a4:	0003      	movs	r3, r0
 80018a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018aa:	f7ff f80d 	bl	80008c8 <HAL_GetTick>
 80018ae:	0002      	movs	r2, r0
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b64      	cmp	r3, #100	@ 0x64
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e28a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018bc:	4b8a      	ldr	r3, [pc, #552]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	2380      	movs	r3, #128	@ 0x80
 80018c2:	029b      	lsls	r3, r3, #10
 80018c4:	4013      	ands	r3, r2
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0xee>
 80018c8:	e015      	b.n	80018f6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7fe fffd 	bl	80008c8 <HAL_GetTick>
 80018ce:	0003      	movs	r3, r0
 80018d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d4:	f7fe fff8 	bl	80008c8 <HAL_GetTick>
 80018d8:	0002      	movs	r2, r0
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b64      	cmp	r3, #100	@ 0x64
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e275      	b.n	8001dd2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e6:	4b80      	ldr	r3, [pc, #512]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	2380      	movs	r3, #128	@ 0x80
 80018ec:	029b      	lsls	r3, r3, #10
 80018ee:	4013      	ands	r3, r2
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x118>
 80018f2:	e000      	b.n	80018f6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2202      	movs	r2, #2
 80018fc:	4013      	ands	r3, r2
 80018fe:	d100      	bne.n	8001902 <HAL_RCC_OscConfig+0x146>
 8001900:	e069      	b.n	80019d6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001902:	4b79      	ldr	r3, [pc, #484]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	220c      	movs	r2, #12
 8001908:	4013      	ands	r3, r2
 800190a:	d00b      	beq.n	8001924 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800190c:	4b76      	ldr	r3, [pc, #472]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	220c      	movs	r2, #12
 8001912:	4013      	ands	r3, r2
 8001914:	2b08      	cmp	r3, #8
 8001916:	d11c      	bne.n	8001952 <HAL_RCC_OscConfig+0x196>
 8001918:	4b73      	ldr	r3, [pc, #460]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	2380      	movs	r3, #128	@ 0x80
 800191e:	025b      	lsls	r3, r3, #9
 8001920:	4013      	ands	r3, r2
 8001922:	d116      	bne.n	8001952 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001924:	4b70      	ldr	r3, [pc, #448]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2202      	movs	r2, #2
 800192a:	4013      	ands	r3, r2
 800192c:	d005      	beq.n	800193a <HAL_RCC_OscConfig+0x17e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d001      	beq.n	800193a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e24b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193a:	4b6b      	ldr	r3, [pc, #428]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	22f8      	movs	r2, #248	@ 0xf8
 8001940:	4393      	bics	r3, r2
 8001942:	0019      	movs	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	00da      	lsls	r2, r3, #3
 800194a:	4b67      	ldr	r3, [pc, #412]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 800194c:	430a      	orrs	r2, r1
 800194e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001950:	e041      	b.n	80019d6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d024      	beq.n	80019a4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800195a:	4b63      	ldr	r3, [pc, #396]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	4b62      	ldr	r3, [pc, #392]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001960:	2101      	movs	r1, #1
 8001962:	430a      	orrs	r2, r1
 8001964:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001966:	f7fe ffaf 	bl	80008c8 <HAL_GetTick>
 800196a:	0003      	movs	r3, r0
 800196c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001970:	f7fe ffaa 	bl	80008c8 <HAL_GetTick>
 8001974:	0002      	movs	r2, r0
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e227      	b.n	8001dd2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001982:	4b59      	ldr	r3, [pc, #356]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2202      	movs	r2, #2
 8001988:	4013      	ands	r3, r2
 800198a:	d0f1      	beq.n	8001970 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198c:	4b56      	ldr	r3, [pc, #344]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	22f8      	movs	r2, #248	@ 0xf8
 8001992:	4393      	bics	r3, r2
 8001994:	0019      	movs	r1, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	00da      	lsls	r2, r3, #3
 800199c:	4b52      	ldr	r3, [pc, #328]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	e018      	b.n	80019d6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019a4:	4b50      	ldr	r3, [pc, #320]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b4f      	ldr	r3, [pc, #316]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 80019aa:	2101      	movs	r1, #1
 80019ac:	438a      	bics	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7fe ff8a 	bl	80008c8 <HAL_GetTick>
 80019b4:	0003      	movs	r3, r0
 80019b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ba:	f7fe ff85 	bl	80008c8 <HAL_GetTick>
 80019be:	0002      	movs	r2, r0
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e202      	b.n	8001dd2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019cc:	4b46      	ldr	r3, [pc, #280]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2202      	movs	r2, #2
 80019d2:	4013      	ands	r3, r2
 80019d4:	d1f1      	bne.n	80019ba <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2208      	movs	r2, #8
 80019dc:	4013      	ands	r3, r2
 80019de:	d036      	beq.n	8001a4e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d019      	beq.n	8001a1c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019e8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 80019ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019ec:	4b3e      	ldr	r3, [pc, #248]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 80019ee:	2101      	movs	r1, #1
 80019f0:	430a      	orrs	r2, r1
 80019f2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f4:	f7fe ff68 	bl	80008c8 <HAL_GetTick>
 80019f8:	0003      	movs	r3, r0
 80019fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019fe:	f7fe ff63 	bl	80008c8 <HAL_GetTick>
 8001a02:	0002      	movs	r2, r0
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e1e0      	b.n	8001dd2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a10:	4b35      	ldr	r3, [pc, #212]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a14:	2202      	movs	r2, #2
 8001a16:	4013      	ands	r3, r2
 8001a18:	d0f1      	beq.n	80019fe <HAL_RCC_OscConfig+0x242>
 8001a1a:	e018      	b.n	8001a4e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a1c:	4b32      	ldr	r3, [pc, #200]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001a1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a20:	4b31      	ldr	r3, [pc, #196]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001a22:	2101      	movs	r1, #1
 8001a24:	438a      	bics	r2, r1
 8001a26:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a28:	f7fe ff4e 	bl	80008c8 <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a32:	f7fe ff49 	bl	80008c8 <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e1c6      	b.n	8001dd2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a44:	4b28      	ldr	r3, [pc, #160]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a48:	2202      	movs	r2, #2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d1f1      	bne.n	8001a32 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2204      	movs	r2, #4
 8001a54:	4013      	ands	r3, r2
 8001a56:	d100      	bne.n	8001a5a <HAL_RCC_OscConfig+0x29e>
 8001a58:	e0b4      	b.n	8001bc4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a5a:	201f      	movs	r0, #31
 8001a5c:	183b      	adds	r3, r7, r0
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a62:	4b21      	ldr	r3, [pc, #132]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001a64:	69da      	ldr	r2, [r3, #28]
 8001a66:	2380      	movs	r3, #128	@ 0x80
 8001a68:	055b      	lsls	r3, r3, #21
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d110      	bne.n	8001a90 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001a70:	69da      	ldr	r2, [r3, #28]
 8001a72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001a74:	2180      	movs	r1, #128	@ 0x80
 8001a76:	0549      	lsls	r1, r1, #21
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	61da      	str	r2, [r3, #28]
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001a7e:	69da      	ldr	r2, [r3, #28]
 8001a80:	2380      	movs	r3, #128	@ 0x80
 8001a82:	055b      	lsls	r3, r3, #21
 8001a84:	4013      	ands	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a8a:	183b      	adds	r3, r7, r0
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a90:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	2380      	movs	r3, #128	@ 0x80
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d11a      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a9c:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001aa2:	2180      	movs	r1, #128	@ 0x80
 8001aa4:	0049      	lsls	r1, r1, #1
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aaa:	f7fe ff0d 	bl	80008c8 <HAL_GetTick>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab4:	f7fe ff08 	bl	80008c8 <HAL_GetTick>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	@ 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e185      	b.n	8001dd2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	2380      	movs	r3, #128	@ 0x80
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d10e      	bne.n	8001af8 <HAL_RCC_OscConfig+0x33c>
 8001ada:	4b03      	ldr	r3, [pc, #12]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001adc:	6a1a      	ldr	r2, [r3, #32]
 8001ade:	4b02      	ldr	r3, [pc, #8]	@ (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	621a      	str	r2, [r3, #32]
 8001ae6:	e035      	b.n	8001b54 <HAL_RCC_OscConfig+0x398>
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	fffeffff 	.word	0xfffeffff
 8001af0:	fffbffff 	.word	0xfffbffff
 8001af4:	40007000 	.word	0x40007000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10c      	bne.n	8001b1a <HAL_RCC_OscConfig+0x35e>
 8001b00:	4bb6      	ldr	r3, [pc, #728]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001b02:	6a1a      	ldr	r2, [r3, #32]
 8001b04:	4bb5      	ldr	r3, [pc, #724]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001b06:	2101      	movs	r1, #1
 8001b08:	438a      	bics	r2, r1
 8001b0a:	621a      	str	r2, [r3, #32]
 8001b0c:	4bb3      	ldr	r3, [pc, #716]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001b0e:	6a1a      	ldr	r2, [r3, #32]
 8001b10:	4bb2      	ldr	r3, [pc, #712]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001b12:	2104      	movs	r1, #4
 8001b14:	438a      	bics	r2, r1
 8001b16:	621a      	str	r2, [r3, #32]
 8001b18:	e01c      	b.n	8001b54 <HAL_RCC_OscConfig+0x398>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b05      	cmp	r3, #5
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x380>
 8001b22:	4bae      	ldr	r3, [pc, #696]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001b24:	6a1a      	ldr	r2, [r3, #32]
 8001b26:	4bad      	ldr	r3, [pc, #692]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001b28:	2104      	movs	r1, #4
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	621a      	str	r2, [r3, #32]
 8001b2e:	4bab      	ldr	r3, [pc, #684]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001b30:	6a1a      	ldr	r2, [r3, #32]
 8001b32:	4baa      	ldr	r3, [pc, #680]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001b34:	2101      	movs	r1, #1
 8001b36:	430a      	orrs	r2, r1
 8001b38:	621a      	str	r2, [r3, #32]
 8001b3a:	e00b      	b.n	8001b54 <HAL_RCC_OscConfig+0x398>
 8001b3c:	4ba7      	ldr	r3, [pc, #668]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001b3e:	6a1a      	ldr	r2, [r3, #32]
 8001b40:	4ba6      	ldr	r3, [pc, #664]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001b42:	2101      	movs	r1, #1
 8001b44:	438a      	bics	r2, r1
 8001b46:	621a      	str	r2, [r3, #32]
 8001b48:	4ba4      	ldr	r3, [pc, #656]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001b4a:	6a1a      	ldr	r2, [r3, #32]
 8001b4c:	4ba3      	ldr	r3, [pc, #652]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001b4e:	2104      	movs	r1, #4
 8001b50:	438a      	bics	r2, r1
 8001b52:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d014      	beq.n	8001b86 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5c:	f7fe feb4 	bl	80008c8 <HAL_GetTick>
 8001b60:	0003      	movs	r3, r0
 8001b62:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b64:	e009      	b.n	8001b7a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b66:	f7fe feaf 	bl	80008c8 <HAL_GetTick>
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	4a9b      	ldr	r2, [pc, #620]	@ (8001de0 <HAL_RCC_OscConfig+0x624>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e12b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7a:	4b98      	ldr	r3, [pc, #608]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x3aa>
 8001b84:	e013      	b.n	8001bae <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b86:	f7fe fe9f 	bl	80008c8 <HAL_GetTick>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8e:	e009      	b.n	8001ba4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b90:	f7fe fe9a 	bl	80008c8 <HAL_GetTick>
 8001b94:	0002      	movs	r2, r0
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	4a91      	ldr	r2, [pc, #580]	@ (8001de0 <HAL_RCC_OscConfig+0x624>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e116      	b.n	8001dd2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba4:	4b8d      	ldr	r3, [pc, #564]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	2202      	movs	r2, #2
 8001baa:	4013      	ands	r3, r2
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bae:	231f      	movs	r3, #31
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d105      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb8:	4b88      	ldr	r3, [pc, #544]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001bba:	69da      	ldr	r2, [r3, #28]
 8001bbc:	4b87      	ldr	r3, [pc, #540]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001bbe:	4989      	ldr	r1, [pc, #548]	@ (8001de4 <HAL_RCC_OscConfig+0x628>)
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2210      	movs	r2, #16
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d063      	beq.n	8001c96 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d12a      	bne.n	8001c2c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bd6:	4b81      	ldr	r3, [pc, #516]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001bd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bda:	4b80      	ldr	r3, [pc, #512]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001bdc:	2104      	movs	r1, #4
 8001bde:	430a      	orrs	r2, r1
 8001be0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001be2:	4b7e      	ldr	r3, [pc, #504]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001be4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001be6:	4b7d      	ldr	r3, [pc, #500]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001be8:	2101      	movs	r1, #1
 8001bea:	430a      	orrs	r2, r1
 8001bec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bee:	f7fe fe6b 	bl	80008c8 <HAL_GetTick>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bf8:	f7fe fe66 	bl	80008c8 <HAL_GetTick>
 8001bfc:	0002      	movs	r2, r0
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e0e3      	b.n	8001dd2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c0a:	4b74      	ldr	r3, [pc, #464]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c0e:	2202      	movs	r2, #2
 8001c10:	4013      	ands	r3, r2
 8001c12:	d0f1      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c14:	4b71      	ldr	r3, [pc, #452]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c18:	22f8      	movs	r2, #248	@ 0xf8
 8001c1a:	4393      	bics	r3, r2
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	00da      	lsls	r2, r3, #3
 8001c24:	4b6d      	ldr	r3, [pc, #436]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001c26:	430a      	orrs	r2, r1
 8001c28:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c2a:	e034      	b.n	8001c96 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	3305      	adds	r3, #5
 8001c32:	d111      	bne.n	8001c58 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001c34:	4b69      	ldr	r3, [pc, #420]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001c36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c38:	4b68      	ldr	r3, [pc, #416]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	438a      	bics	r2, r1
 8001c3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c40:	4b66      	ldr	r3, [pc, #408]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c44:	22f8      	movs	r2, #248	@ 0xf8
 8001c46:	4393      	bics	r3, r2
 8001c48:	0019      	movs	r1, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	00da      	lsls	r2, r3, #3
 8001c50:	4b62      	ldr	r3, [pc, #392]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001c52:	430a      	orrs	r2, r1
 8001c54:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c56:	e01e      	b.n	8001c96 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c58:	4b60      	ldr	r3, [pc, #384]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001c5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c5c:	4b5f      	ldr	r3, [pc, #380]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001c5e:	2104      	movs	r1, #4
 8001c60:	430a      	orrs	r2, r1
 8001c62:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001c64:	4b5d      	ldr	r3, [pc, #372]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001c66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c68:	4b5c      	ldr	r3, [pc, #368]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	438a      	bics	r2, r1
 8001c6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c70:	f7fe fe2a 	bl	80008c8 <HAL_GetTick>
 8001c74:	0003      	movs	r3, r0
 8001c76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c7a:	f7fe fe25 	bl	80008c8 <HAL_GetTick>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e0a2      	b.n	8001dd2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c8c:	4b53      	ldr	r3, [pc, #332]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c90:	2202      	movs	r2, #2
 8001c92:	4013      	ands	r3, r2
 8001c94:	d1f1      	bne.n	8001c7a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d100      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x4e4>
 8001c9e:	e097      	b.n	8001dd0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca0:	4b4e      	ldr	r3, [pc, #312]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	220c      	movs	r2, #12
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d100      	bne.n	8001cae <HAL_RCC_OscConfig+0x4f2>
 8001cac:	e06b      	b.n	8001d86 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d14c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb6:	4b49      	ldr	r3, [pc, #292]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4b48      	ldr	r3, [pc, #288]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001cbc:	494a      	ldr	r1, [pc, #296]	@ (8001de8 <HAL_RCC_OscConfig+0x62c>)
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc2:	f7fe fe01 	bl	80008c8 <HAL_GetTick>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7fe fdfc 	bl	80008c8 <HAL_GetTick>
 8001cd0:	0002      	movs	r2, r0
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e079      	b.n	8001dd2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cde:	4b3f      	ldr	r3, [pc, #252]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	2380      	movs	r3, #128	@ 0x80
 8001ce4:	049b      	lsls	r3, r3, #18
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cea:	4b3c      	ldr	r3, [pc, #240]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cee:	220f      	movs	r2, #15
 8001cf0:	4393      	bics	r3, r2
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cf8:	4b38      	ldr	r3, [pc, #224]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001cfe:	4b37      	ldr	r3, [pc, #220]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4a3a      	ldr	r2, [pc, #232]	@ (8001dec <HAL_RCC_OscConfig+0x630>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	0019      	movs	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d10:	431a      	orrs	r2, r3
 8001d12:	4b32      	ldr	r3, [pc, #200]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001d14:	430a      	orrs	r2, r1
 8001d16:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d18:	4b30      	ldr	r3, [pc, #192]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001d1e:	2180      	movs	r1, #128	@ 0x80
 8001d20:	0449      	lsls	r1, r1, #17
 8001d22:	430a      	orrs	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d26:	f7fe fdcf 	bl	80008c8 <HAL_GetTick>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d30:	f7fe fdca 	bl	80008c8 <HAL_GetTick>
 8001d34:	0002      	movs	r2, r0
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e047      	b.n	8001dd2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d42:	4b26      	ldr	r3, [pc, #152]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	2380      	movs	r3, #128	@ 0x80
 8001d48:	049b      	lsls	r3, r3, #18
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0x574>
 8001d4e:	e03f      	b.n	8001dd0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d50:	4b22      	ldr	r3, [pc, #136]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b21      	ldr	r3, [pc, #132]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001d56:	4924      	ldr	r1, [pc, #144]	@ (8001de8 <HAL_RCC_OscConfig+0x62c>)
 8001d58:	400a      	ands	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7fe fdb4 	bl	80008c8 <HAL_GetTick>
 8001d60:	0003      	movs	r3, r0
 8001d62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d66:	f7fe fdaf 	bl	80008c8 <HAL_GetTick>
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e02c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d78:	4b18      	ldr	r3, [pc, #96]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2380      	movs	r3, #128	@ 0x80
 8001d7e:	049b      	lsls	r3, r3, #18
 8001d80:	4013      	ands	r3, r2
 8001d82:	d1f0      	bne.n	8001d66 <HAL_RCC_OscConfig+0x5aa>
 8001d84:	e024      	b.n	8001dd0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e01f      	b.n	8001dd2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001d92:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001d98:	4b10      	ldr	r3, [pc, #64]	@ (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	2380      	movs	r3, #128	@ 0x80
 8001da2:	025b      	lsls	r3, r3, #9
 8001da4:	401a      	ands	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d10e      	bne.n	8001dcc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	220f      	movs	r2, #15
 8001db2:	401a      	ands	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d107      	bne.n	8001dcc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	23f0      	movs	r3, #240	@ 0xf0
 8001dc0:	039b      	lsls	r3, r3, #14
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b008      	add	sp, #32
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			@ (mov r8, r8)
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	00001388 	.word	0x00001388
 8001de4:	efffffff 	.word	0xefffffff
 8001de8:	feffffff 	.word	0xfeffffff
 8001dec:	ffc2ffff 	.word	0xffc2ffff

08001df0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0b3      	b.n	8001f6c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e04:	4b5b      	ldr	r3, [pc, #364]	@ (8001f74 <HAL_RCC_ClockConfig+0x184>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d911      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b58      	ldr	r3, [pc, #352]	@ (8001f74 <HAL_RCC_ClockConfig+0x184>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2201      	movs	r2, #1
 8001e18:	4393      	bics	r3, r2
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	4b55      	ldr	r3, [pc, #340]	@ (8001f74 <HAL_RCC_ClockConfig+0x184>)
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e24:	4b53      	ldr	r3, [pc, #332]	@ (8001f74 <HAL_RCC_ClockConfig+0x184>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d001      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e09a      	b.n	8001f6c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d015      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2204      	movs	r2, #4
 8001e46:	4013      	ands	r3, r2
 8001e48:	d006      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e4a:	4b4b      	ldr	r3, [pc, #300]	@ (8001f78 <HAL_RCC_ClockConfig+0x188>)
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f78 <HAL_RCC_ClockConfig+0x188>)
 8001e50:	21e0      	movs	r1, #224	@ 0xe0
 8001e52:	00c9      	lsls	r1, r1, #3
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e58:	4b47      	ldr	r3, [pc, #284]	@ (8001f78 <HAL_RCC_ClockConfig+0x188>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	22f0      	movs	r2, #240	@ 0xf0
 8001e5e:	4393      	bics	r3, r2
 8001e60:	0019      	movs	r1, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	4b44      	ldr	r3, [pc, #272]	@ (8001f78 <HAL_RCC_ClockConfig+0x188>)
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2201      	movs	r2, #1
 8001e72:	4013      	ands	r3, r2
 8001e74:	d040      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f78 <HAL_RCC_ClockConfig+0x188>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	2380      	movs	r3, #128	@ 0x80
 8001e84:	029b      	lsls	r3, r3, #10
 8001e86:	4013      	ands	r3, r2
 8001e88:	d114      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e06e      	b.n	8001f6c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d107      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e96:	4b38      	ldr	r3, [pc, #224]	@ (8001f78 <HAL_RCC_ClockConfig+0x188>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	2380      	movs	r3, #128	@ 0x80
 8001e9c:	049b      	lsls	r3, r3, #18
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d108      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e062      	b.n	8001f6c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea6:	4b34      	ldr	r3, [pc, #208]	@ (8001f78 <HAL_RCC_ClockConfig+0x188>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	4013      	ands	r3, r2
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e05b      	b.n	8001f6c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb4:	4b30      	ldr	r3, [pc, #192]	@ (8001f78 <HAL_RCC_ClockConfig+0x188>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2203      	movs	r2, #3
 8001eba:	4393      	bics	r3, r2
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f78 <HAL_RCC_ClockConfig+0x188>)
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec8:	f7fe fcfe 	bl	80008c8 <HAL_GetTick>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed0:	e009      	b.n	8001ee6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed2:	f7fe fcf9 	bl	80008c8 <HAL_GetTick>
 8001ed6:	0002      	movs	r2, r0
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	4a27      	ldr	r2, [pc, #156]	@ (8001f7c <HAL_RCC_ClockConfig+0x18c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e042      	b.n	8001f6c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee6:	4b24      	ldr	r3, [pc, #144]	@ (8001f78 <HAL_RCC_ClockConfig+0x188>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	220c      	movs	r2, #12
 8001eec:	401a      	ands	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d1ec      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f74 <HAL_RCC_ClockConfig+0x184>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2201      	movs	r2, #1
 8001efe:	4013      	ands	r3, r2
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d211      	bcs.n	8001f2a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	4b1b      	ldr	r3, [pc, #108]	@ (8001f74 <HAL_RCC_ClockConfig+0x184>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	4393      	bics	r3, r2
 8001f0e:	0019      	movs	r1, r3
 8001f10:	4b18      	ldr	r3, [pc, #96]	@ (8001f74 <HAL_RCC_ClockConfig+0x184>)
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f18:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <HAL_RCC_ClockConfig+0x184>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	4013      	ands	r3, r2
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d001      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e020      	b.n	8001f6c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2204      	movs	r2, #4
 8001f30:	4013      	ands	r3, r2
 8001f32:	d009      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f34:	4b10      	ldr	r3, [pc, #64]	@ (8001f78 <HAL_RCC_ClockConfig+0x188>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4a11      	ldr	r2, [pc, #68]	@ (8001f80 <HAL_RCC_ClockConfig+0x190>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	4b0d      	ldr	r3, [pc, #52]	@ (8001f78 <HAL_RCC_ClockConfig+0x188>)
 8001f44:	430a      	orrs	r2, r1
 8001f46:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f48:	f000 f820 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001f4c:	0001      	movs	r1, r0
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <HAL_RCC_ClockConfig+0x188>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	091b      	lsrs	r3, r3, #4
 8001f54:	220f      	movs	r2, #15
 8001f56:	4013      	ands	r3, r2
 8001f58:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <HAL_RCC_ClockConfig+0x194>)
 8001f5a:	5cd3      	ldrb	r3, [r2, r3]
 8001f5c:	000a      	movs	r2, r1
 8001f5e:	40da      	lsrs	r2, r3
 8001f60:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <HAL_RCC_ClockConfig+0x198>)
 8001f62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f64:	2000      	movs	r0, #0
 8001f66:	f7fe fc69 	bl	800083c <HAL_InitTick>
  
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b004      	add	sp, #16
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40022000 	.word	0x40022000
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	00001388 	.word	0x00001388
 8001f80:	fffff8ff 	.word	0xfffff8ff
 8001f84:	08002fa4 	.word	0x08002fa4
 8001f88:	20000000 	.word	0x20000000

08001f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001fa6:	4b20      	ldr	r3, [pc, #128]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	220c      	movs	r2, #12
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d002      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x30>
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d003      	beq.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x36>
 8001fba:	e02c      	b.n	8002016 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800202c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fbe:	613b      	str	r3, [r7, #16]
      break;
 8001fc0:	e02c      	b.n	800201c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	0c9b      	lsrs	r3, r3, #18
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	4013      	ands	r3, r2
 8001fca:	4a19      	ldr	r2, [pc, #100]	@ (8002030 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fcc:	5cd3      	ldrb	r3, [r2, r3]
 8001fce:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001fd0:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	4a16      	ldr	r2, [pc, #88]	@ (8002034 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001fda:	5cd3      	ldrb	r3, [r2, r3]
 8001fdc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	2380      	movs	r3, #128	@ 0x80
 8001fe2:	025b      	lsls	r3, r3, #9
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d009      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	4810      	ldr	r0, [pc, #64]	@ (800202c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fec:	f7fe f88c 	bl	8000108 <__udivsi3>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	001a      	movs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4353      	muls	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	e009      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	000a      	movs	r2, r1
 8002000:	0152      	lsls	r2, r2, #5
 8002002:	1a52      	subs	r2, r2, r1
 8002004:	0193      	lsls	r3, r2, #6
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	185b      	adds	r3, r3, r1
 800200c:	021b      	lsls	r3, r3, #8
 800200e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	613b      	str	r3, [r7, #16]
      break;
 8002014:	e002      	b.n	800201c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002016:	4b05      	ldr	r3, [pc, #20]	@ (800202c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002018:	613b      	str	r3, [r7, #16]
      break;
 800201a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800201c:	693b      	ldr	r3, [r7, #16]
}
 800201e:	0018      	movs	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	b006      	add	sp, #24
 8002024:	bd80      	pop	{r7, pc}
 8002026:	46c0      	nop			@ (mov r8, r8)
 8002028:	40021000 	.word	0x40021000
 800202c:	007a1200 	.word	0x007a1200
 8002030:	08002fb4 	.word	0x08002fb4
 8002034:	08002fc4 	.word	0x08002fc4

08002038 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	2380      	movs	r3, #128	@ 0x80
 800204e:	025b      	lsls	r3, r3, #9
 8002050:	4013      	ands	r3, r2
 8002052:	d100      	bne.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002054:	e08e      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002056:	2017      	movs	r0, #23
 8002058:	183b      	adds	r3, r7, r0
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205e:	4b5f      	ldr	r3, [pc, #380]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002060:	69da      	ldr	r2, [r3, #28]
 8002062:	2380      	movs	r3, #128	@ 0x80
 8002064:	055b      	lsls	r3, r3, #21
 8002066:	4013      	ands	r3, r2
 8002068:	d110      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800206a:	4b5c      	ldr	r3, [pc, #368]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800206c:	69da      	ldr	r2, [r3, #28]
 800206e:	4b5b      	ldr	r3, [pc, #364]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002070:	2180      	movs	r1, #128	@ 0x80
 8002072:	0549      	lsls	r1, r1, #21
 8002074:	430a      	orrs	r2, r1
 8002076:	61da      	str	r2, [r3, #28]
 8002078:	4b58      	ldr	r3, [pc, #352]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800207a:	69da      	ldr	r2, [r3, #28]
 800207c:	2380      	movs	r3, #128	@ 0x80
 800207e:	055b      	lsls	r3, r3, #21
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002086:	183b      	adds	r3, r7, r0
 8002088:	2201      	movs	r2, #1
 800208a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	4b54      	ldr	r3, [pc, #336]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	2380      	movs	r3, #128	@ 0x80
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4013      	ands	r3, r2
 8002096:	d11a      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002098:	4b51      	ldr	r3, [pc, #324]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b50      	ldr	r3, [pc, #320]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800209e:	2180      	movs	r1, #128	@ 0x80
 80020a0:	0049      	lsls	r1, r1, #1
 80020a2:	430a      	orrs	r2, r1
 80020a4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a6:	f7fe fc0f 	bl	80008c8 <HAL_GetTick>
 80020aa:	0003      	movs	r3, r0
 80020ac:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ae:	e008      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b0:	f7fe fc0a 	bl	80008c8 <HAL_GetTick>
 80020b4:	0002      	movs	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b64      	cmp	r3, #100	@ 0x64
 80020bc:	d901      	bls.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e087      	b.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c2:	4b47      	ldr	r3, [pc, #284]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	2380      	movs	r3, #128	@ 0x80
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4013      	ands	r3, r2
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020ce:	4b43      	ldr	r3, [pc, #268]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020d0:	6a1a      	ldr	r2, [r3, #32]
 80020d2:	23c0      	movs	r3, #192	@ 0xc0
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4013      	ands	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d034      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	23c0      	movs	r3, #192	@ 0xc0
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4013      	ands	r3, r2
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d02c      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020f0:	4b3a      	ldr	r3, [pc, #232]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4a3b      	ldr	r2, [pc, #236]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020fa:	4b38      	ldr	r3, [pc, #224]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020fc:	6a1a      	ldr	r2, [r3, #32]
 80020fe:	4b37      	ldr	r3, [pc, #220]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002100:	2180      	movs	r1, #128	@ 0x80
 8002102:	0249      	lsls	r1, r1, #9
 8002104:	430a      	orrs	r2, r1
 8002106:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002108:	4b34      	ldr	r3, [pc, #208]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800210a:	6a1a      	ldr	r2, [r3, #32]
 800210c:	4b33      	ldr	r3, [pc, #204]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800210e:	4936      	ldr	r1, [pc, #216]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002110:	400a      	ands	r2, r1
 8002112:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002114:	4b31      	ldr	r3, [pc, #196]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2201      	movs	r2, #1
 800211e:	4013      	ands	r3, r2
 8002120:	d013      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7fe fbd1 	bl	80008c8 <HAL_GetTick>
 8002126:	0003      	movs	r3, r0
 8002128:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212a:	e009      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7fe fbcc 	bl	80008c8 <HAL_GetTick>
 8002130:	0002      	movs	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	4a2d      	ldr	r2, [pc, #180]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e048      	b.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002140:	4b26      	ldr	r3, [pc, #152]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	2202      	movs	r2, #2
 8002146:	4013      	ands	r3, r2
 8002148:	d0f0      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800214a:	4b24      	ldr	r3, [pc, #144]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	4a25      	ldr	r2, [pc, #148]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002150:	4013      	ands	r3, r2
 8002152:	0019      	movs	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	4b20      	ldr	r3, [pc, #128]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800215a:	430a      	orrs	r2, r1
 800215c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800215e:	2317      	movs	r3, #23
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d105      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002168:	4b1c      	ldr	r3, [pc, #112]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800216a:	69da      	ldr	r2, [r3, #28]
 800216c:	4b1b      	ldr	r3, [pc, #108]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800216e:	4920      	ldr	r1, [pc, #128]	@ (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002170:	400a      	ands	r2, r1
 8002172:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2201      	movs	r2, #1
 800217a:	4013      	ands	r3, r2
 800217c:	d009      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800217e:	4b17      	ldr	r3, [pc, #92]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	2203      	movs	r2, #3
 8002184:	4393      	bics	r3, r2
 8002186:	0019      	movs	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	4b13      	ldr	r3, [pc, #76]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800218e:	430a      	orrs	r2, r1
 8002190:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2220      	movs	r2, #32
 8002198:	4013      	ands	r3, r2
 800219a:	d009      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800219c:	4b0f      	ldr	r3, [pc, #60]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a0:	2210      	movs	r2, #16
 80021a2:	4393      	bics	r3, r2
 80021a4:	0019      	movs	r1, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021ac:	430a      	orrs	r2, r1
 80021ae:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	2380      	movs	r3, #128	@ 0x80
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4013      	ands	r3, r2
 80021ba:	d009      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021bc:	4b07      	ldr	r3, [pc, #28]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c0:	2240      	movs	r2, #64	@ 0x40
 80021c2:	4393      	bics	r3, r2
 80021c4:	0019      	movs	r1, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	4b04      	ldr	r3, [pc, #16]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021cc:	430a      	orrs	r2, r1
 80021ce:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	0018      	movs	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b006      	add	sp, #24
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			@ (mov r8, r8)
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40007000 	.word	0x40007000
 80021e4:	fffffcff 	.word	0xfffffcff
 80021e8:	fffeffff 	.word	0xfffeffff
 80021ec:	00001388 	.word	0x00001388
 80021f0:	efffffff 	.word	0xefffffff

080021f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e042      	b.n	800228c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	223d      	movs	r2, #61	@ 0x3d
 800220a:	5c9b      	ldrb	r3, [r3, r2]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d107      	bne.n	8002222 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	223c      	movs	r2, #60	@ 0x3c
 8002216:	2100      	movs	r1, #0
 8002218:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	0018      	movs	r0, r3
 800221e:	f7fe fa3d 	bl	800069c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	223d      	movs	r2, #61	@ 0x3d
 8002226:	2102      	movs	r1, #2
 8002228:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3304      	adds	r3, #4
 8002232:	0019      	movs	r1, r3
 8002234:	0010      	movs	r0, r2
 8002236:	f000 fad7 	bl	80027e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2246      	movs	r2, #70	@ 0x46
 800223e:	2101      	movs	r1, #1
 8002240:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	223e      	movs	r2, #62	@ 0x3e
 8002246:	2101      	movs	r1, #1
 8002248:	5499      	strb	r1, [r3, r2]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	223f      	movs	r2, #63	@ 0x3f
 800224e:	2101      	movs	r1, #1
 8002250:	5499      	strb	r1, [r3, r2]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2240      	movs	r2, #64	@ 0x40
 8002256:	2101      	movs	r1, #1
 8002258:	5499      	strb	r1, [r3, r2]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2241      	movs	r2, #65	@ 0x41
 800225e:	2101      	movs	r1, #1
 8002260:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2242      	movs	r2, #66	@ 0x42
 8002266:	2101      	movs	r1, #1
 8002268:	5499      	strb	r1, [r3, r2]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2243      	movs	r2, #67	@ 0x43
 800226e:	2101      	movs	r1, #1
 8002270:	5499      	strb	r1, [r3, r2]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2244      	movs	r2, #68	@ 0x44
 8002276:	2101      	movs	r1, #1
 8002278:	5499      	strb	r1, [r3, r2]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2245      	movs	r2, #69	@ 0x45
 800227e:	2101      	movs	r1, #1
 8002280:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	223d      	movs	r2, #61	@ 0x3d
 8002286:	2101      	movs	r1, #1
 8002288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	0018      	movs	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	b002      	add	sp, #8
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e042      	b.n	800232c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	223d      	movs	r2, #61	@ 0x3d
 80022aa:	5c9b      	ldrb	r3, [r3, r2]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d107      	bne.n	80022c2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	223c      	movs	r2, #60	@ 0x3c
 80022b6:	2100      	movs	r1, #0
 80022b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	0018      	movs	r0, r3
 80022be:	f000 f839 	bl	8002334 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	223d      	movs	r2, #61	@ 0x3d
 80022c6:	2102      	movs	r1, #2
 80022c8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3304      	adds	r3, #4
 80022d2:	0019      	movs	r1, r3
 80022d4:	0010      	movs	r0, r2
 80022d6:	f000 fa87 	bl	80027e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2246      	movs	r2, #70	@ 0x46
 80022de:	2101      	movs	r1, #1
 80022e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	223e      	movs	r2, #62	@ 0x3e
 80022e6:	2101      	movs	r1, #1
 80022e8:	5499      	strb	r1, [r3, r2]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	223f      	movs	r2, #63	@ 0x3f
 80022ee:	2101      	movs	r1, #1
 80022f0:	5499      	strb	r1, [r3, r2]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2240      	movs	r2, #64	@ 0x40
 80022f6:	2101      	movs	r1, #1
 80022f8:	5499      	strb	r1, [r3, r2]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2241      	movs	r2, #65	@ 0x41
 80022fe:	2101      	movs	r1, #1
 8002300:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2242      	movs	r2, #66	@ 0x42
 8002306:	2101      	movs	r1, #1
 8002308:	5499      	strb	r1, [r3, r2]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2243      	movs	r2, #67	@ 0x43
 800230e:	2101      	movs	r1, #1
 8002310:	5499      	strb	r1, [r3, r2]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2244      	movs	r2, #68	@ 0x44
 8002316:	2101      	movs	r1, #1
 8002318:	5499      	strb	r1, [r3, r2]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2245      	movs	r2, #69	@ 0x45
 800231e:	2101      	movs	r1, #1
 8002320:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	223d      	movs	r2, #61	@ 0x3d
 8002326:	2101      	movs	r1, #1
 8002328:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	b002      	add	sp, #8
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800233c:	46c0      	nop			@ (mov r8, r8)
 800233e:	46bd      	mov	sp, r7
 8002340:	b002      	add	sp, #8
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d108      	bne.n	8002366 <HAL_TIM_PWM_Start+0x22>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	223e      	movs	r2, #62	@ 0x3e
 8002358:	5c9b      	ldrb	r3, [r3, r2]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	1e5a      	subs	r2, r3, #1
 8002360:	4193      	sbcs	r3, r2
 8002362:	b2db      	uxtb	r3, r3
 8002364:	e01f      	b.n	80023a6 <HAL_TIM_PWM_Start+0x62>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b04      	cmp	r3, #4
 800236a:	d108      	bne.n	800237e <HAL_TIM_PWM_Start+0x3a>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	223f      	movs	r2, #63	@ 0x3f
 8002370:	5c9b      	ldrb	r3, [r3, r2]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	3b01      	subs	r3, #1
 8002376:	1e5a      	subs	r2, r3, #1
 8002378:	4193      	sbcs	r3, r2
 800237a:	b2db      	uxtb	r3, r3
 800237c:	e013      	b.n	80023a6 <HAL_TIM_PWM_Start+0x62>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b08      	cmp	r3, #8
 8002382:	d108      	bne.n	8002396 <HAL_TIM_PWM_Start+0x52>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2240      	movs	r2, #64	@ 0x40
 8002388:	5c9b      	ldrb	r3, [r3, r2]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	3b01      	subs	r3, #1
 800238e:	1e5a      	subs	r2, r3, #1
 8002390:	4193      	sbcs	r3, r2
 8002392:	b2db      	uxtb	r3, r3
 8002394:	e007      	b.n	80023a6 <HAL_TIM_PWM_Start+0x62>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2241      	movs	r2, #65	@ 0x41
 800239a:	5c9b      	ldrb	r3, [r3, r2]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	3b01      	subs	r3, #1
 80023a0:	1e5a      	subs	r2, r3, #1
 80023a2:	4193      	sbcs	r3, r2
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e074      	b.n	8002498 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d104      	bne.n	80023be <HAL_TIM_PWM_Start+0x7a>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	223e      	movs	r2, #62	@ 0x3e
 80023b8:	2102      	movs	r1, #2
 80023ba:	5499      	strb	r1, [r3, r2]
 80023bc:	e013      	b.n	80023e6 <HAL_TIM_PWM_Start+0xa2>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d104      	bne.n	80023ce <HAL_TIM_PWM_Start+0x8a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	223f      	movs	r2, #63	@ 0x3f
 80023c8:	2102      	movs	r1, #2
 80023ca:	5499      	strb	r1, [r3, r2]
 80023cc:	e00b      	b.n	80023e6 <HAL_TIM_PWM_Start+0xa2>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d104      	bne.n	80023de <HAL_TIM_PWM_Start+0x9a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2240      	movs	r2, #64	@ 0x40
 80023d8:	2102      	movs	r1, #2
 80023da:	5499      	strb	r1, [r3, r2]
 80023dc:	e003      	b.n	80023e6 <HAL_TIM_PWM_Start+0xa2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2241      	movs	r2, #65	@ 0x41
 80023e2:	2102      	movs	r1, #2
 80023e4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6839      	ldr	r1, [r7, #0]
 80023ec:	2201      	movs	r2, #1
 80023ee:	0018      	movs	r0, r3
 80023f0:	f000 fd1e 	bl	8002e30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a29      	ldr	r2, [pc, #164]	@ (80024a0 <HAL_TIM_PWM_Start+0x15c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00e      	beq.n	800241c <HAL_TIM_PWM_Start+0xd8>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a28      	ldr	r2, [pc, #160]	@ (80024a4 <HAL_TIM_PWM_Start+0x160>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d009      	beq.n	800241c <HAL_TIM_PWM_Start+0xd8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a26      	ldr	r2, [pc, #152]	@ (80024a8 <HAL_TIM_PWM_Start+0x164>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d004      	beq.n	800241c <HAL_TIM_PWM_Start+0xd8>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a25      	ldr	r2, [pc, #148]	@ (80024ac <HAL_TIM_PWM_Start+0x168>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d101      	bne.n	8002420 <HAL_TIM_PWM_Start+0xdc>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <HAL_TIM_PWM_Start+0xde>
 8002420:	2300      	movs	r3, #0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d008      	beq.n	8002438 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2180      	movs	r1, #128	@ 0x80
 8002432:	0209      	lsls	r1, r1, #8
 8002434:	430a      	orrs	r2, r1
 8002436:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a18      	ldr	r2, [pc, #96]	@ (80024a0 <HAL_TIM_PWM_Start+0x15c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00f      	beq.n	8002462 <HAL_TIM_PWM_Start+0x11e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	2380      	movs	r3, #128	@ 0x80
 8002448:	05db      	lsls	r3, r3, #23
 800244a:	429a      	cmp	r2, r3
 800244c:	d009      	beq.n	8002462 <HAL_TIM_PWM_Start+0x11e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a17      	ldr	r2, [pc, #92]	@ (80024b0 <HAL_TIM_PWM_Start+0x16c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d004      	beq.n	8002462 <HAL_TIM_PWM_Start+0x11e>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a11      	ldr	r2, [pc, #68]	@ (80024a4 <HAL_TIM_PWM_Start+0x160>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d111      	bne.n	8002486 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2207      	movs	r2, #7
 800246a:	4013      	ands	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b06      	cmp	r3, #6
 8002472:	d010      	beq.n	8002496 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2101      	movs	r1, #1
 8002480:	430a      	orrs	r2, r1
 8002482:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002484:	e007      	b.n	8002496 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2101      	movs	r1, #1
 8002492:	430a      	orrs	r2, r1
 8002494:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	0018      	movs	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	b004      	add	sp, #16
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40012c00 	.word	0x40012c00
 80024a4:	40014000 	.word	0x40014000
 80024a8:	40014400 	.word	0x40014400
 80024ac:	40014800 	.word	0x40014800
 80024b0:	40000400 	.word	0x40000400

080024b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c0:	2317      	movs	r3, #23
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	223c      	movs	r2, #60	@ 0x3c
 80024cc:	5c9b      	ldrb	r3, [r3, r2]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e0ad      	b.n	8002632 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	223c      	movs	r2, #60	@ 0x3c
 80024da:	2101      	movs	r1, #1
 80024dc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b0c      	cmp	r3, #12
 80024e2:	d100      	bne.n	80024e6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80024e4:	e076      	b.n	80025d4 <HAL_TIM_PWM_ConfigChannel+0x120>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b0c      	cmp	r3, #12
 80024ea:	d900      	bls.n	80024ee <HAL_TIM_PWM_ConfigChannel+0x3a>
 80024ec:	e095      	b.n	800261a <HAL_TIM_PWM_ConfigChannel+0x166>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d04e      	beq.n	8002592 <HAL_TIM_PWM_ConfigChannel+0xde>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d900      	bls.n	80024fc <HAL_TIM_PWM_ConfigChannel+0x48>
 80024fa:	e08e      	b.n	800261a <HAL_TIM_PWM_ConfigChannel+0x166>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_TIM_PWM_ConfigChannel+0x56>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b04      	cmp	r3, #4
 8002506:	d021      	beq.n	800254c <HAL_TIM_PWM_ConfigChannel+0x98>
 8002508:	e087      	b.n	800261a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	0011      	movs	r1, r2
 8002512:	0018      	movs	r0, r3
 8002514:	f000 f9f6 	bl	8002904 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699a      	ldr	r2, [r3, #24]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2108      	movs	r1, #8
 8002524:	430a      	orrs	r2, r1
 8002526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2104      	movs	r1, #4
 8002534:	438a      	bics	r2, r1
 8002536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6999      	ldr	r1, [r3, #24]
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	619a      	str	r2, [r3, #24]
      break;
 800254a:	e06b      	b.n	8002624 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	0011      	movs	r1, r2
 8002554:	0018      	movs	r0, r3
 8002556:	f000 fa5d 	bl	8002a14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699a      	ldr	r2, [r3, #24]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2180      	movs	r1, #128	@ 0x80
 8002566:	0109      	lsls	r1, r1, #4
 8002568:	430a      	orrs	r2, r1
 800256a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699a      	ldr	r2, [r3, #24]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4931      	ldr	r1, [pc, #196]	@ (800263c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002578:	400a      	ands	r2, r1
 800257a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6999      	ldr	r1, [r3, #24]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	021a      	lsls	r2, r3, #8
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	619a      	str	r2, [r3, #24]
      break;
 8002590:	e048      	b.n	8002624 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	0011      	movs	r1, r2
 800259a:	0018      	movs	r0, r3
 800259c:	f000 fabe 	bl	8002b1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	69da      	ldr	r2, [r3, #28]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2108      	movs	r1, #8
 80025ac:	430a      	orrs	r2, r1
 80025ae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	69da      	ldr	r2, [r3, #28]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2104      	movs	r1, #4
 80025bc:	438a      	bics	r2, r1
 80025be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	69d9      	ldr	r1, [r3, #28]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	61da      	str	r2, [r3, #28]
      break;
 80025d2:	e027      	b.n	8002624 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	0011      	movs	r1, r2
 80025dc:	0018      	movs	r0, r3
 80025de:	f000 fb23 	bl	8002c28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	69da      	ldr	r2, [r3, #28]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2180      	movs	r1, #128	@ 0x80
 80025ee:	0109      	lsls	r1, r1, #4
 80025f0:	430a      	orrs	r2, r1
 80025f2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69da      	ldr	r2, [r3, #28]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	490f      	ldr	r1, [pc, #60]	@ (800263c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002600:	400a      	ands	r2, r1
 8002602:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	69d9      	ldr	r1, [r3, #28]
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	021a      	lsls	r2, r3, #8
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	61da      	str	r2, [r3, #28]
      break;
 8002618:	e004      	b.n	8002624 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800261a:	2317      	movs	r3, #23
 800261c:	18fb      	adds	r3, r7, r3
 800261e:	2201      	movs	r2, #1
 8002620:	701a      	strb	r2, [r3, #0]
      break;
 8002622:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	223c      	movs	r2, #60	@ 0x3c
 8002628:	2100      	movs	r1, #0
 800262a:	5499      	strb	r1, [r3, r2]

  return status;
 800262c:	2317      	movs	r3, #23
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	781b      	ldrb	r3, [r3, #0]
}
 8002632:	0018      	movs	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	b006      	add	sp, #24
 8002638:	bd80      	pop	{r7, pc}
 800263a:	46c0      	nop			@ (mov r8, r8)
 800263c:	fffffbff 	.word	0xfffffbff

08002640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800264a:	230f      	movs	r3, #15
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	223c      	movs	r2, #60	@ 0x3c
 8002656:	5c9b      	ldrb	r3, [r3, r2]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_TIM_ConfigClockSource+0x20>
 800265c:	2302      	movs	r3, #2
 800265e:	e0bc      	b.n	80027da <HAL_TIM_ConfigClockSource+0x19a>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	223c      	movs	r2, #60	@ 0x3c
 8002664:	2101      	movs	r1, #1
 8002666:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	223d      	movs	r2, #61	@ 0x3d
 800266c:	2102      	movs	r1, #2
 800266e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2277      	movs	r2, #119	@ 0x77
 800267c:	4393      	bics	r3, r2
 800267e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4a58      	ldr	r2, [pc, #352]	@ (80027e4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002684:	4013      	ands	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2280      	movs	r2, #128	@ 0x80
 8002696:	0192      	lsls	r2, r2, #6
 8002698:	4293      	cmp	r3, r2
 800269a:	d040      	beq.n	800271e <HAL_TIM_ConfigClockSource+0xde>
 800269c:	2280      	movs	r2, #128	@ 0x80
 800269e:	0192      	lsls	r2, r2, #6
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d900      	bls.n	80026a6 <HAL_TIM_ConfigClockSource+0x66>
 80026a4:	e088      	b.n	80027b8 <HAL_TIM_ConfigClockSource+0x178>
 80026a6:	2280      	movs	r2, #128	@ 0x80
 80026a8:	0152      	lsls	r2, r2, #5
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d100      	bne.n	80026b0 <HAL_TIM_ConfigClockSource+0x70>
 80026ae:	e088      	b.n	80027c2 <HAL_TIM_ConfigClockSource+0x182>
 80026b0:	2280      	movs	r2, #128	@ 0x80
 80026b2:	0152      	lsls	r2, r2, #5
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d900      	bls.n	80026ba <HAL_TIM_ConfigClockSource+0x7a>
 80026b8:	e07e      	b.n	80027b8 <HAL_TIM_ConfigClockSource+0x178>
 80026ba:	2b70      	cmp	r3, #112	@ 0x70
 80026bc:	d018      	beq.n	80026f0 <HAL_TIM_ConfigClockSource+0xb0>
 80026be:	d900      	bls.n	80026c2 <HAL_TIM_ConfigClockSource+0x82>
 80026c0:	e07a      	b.n	80027b8 <HAL_TIM_ConfigClockSource+0x178>
 80026c2:	2b60      	cmp	r3, #96	@ 0x60
 80026c4:	d04f      	beq.n	8002766 <HAL_TIM_ConfigClockSource+0x126>
 80026c6:	d900      	bls.n	80026ca <HAL_TIM_ConfigClockSource+0x8a>
 80026c8:	e076      	b.n	80027b8 <HAL_TIM_ConfigClockSource+0x178>
 80026ca:	2b50      	cmp	r3, #80	@ 0x50
 80026cc:	d03b      	beq.n	8002746 <HAL_TIM_ConfigClockSource+0x106>
 80026ce:	d900      	bls.n	80026d2 <HAL_TIM_ConfigClockSource+0x92>
 80026d0:	e072      	b.n	80027b8 <HAL_TIM_ConfigClockSource+0x178>
 80026d2:	2b40      	cmp	r3, #64	@ 0x40
 80026d4:	d057      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0x146>
 80026d6:	d900      	bls.n	80026da <HAL_TIM_ConfigClockSource+0x9a>
 80026d8:	e06e      	b.n	80027b8 <HAL_TIM_ConfigClockSource+0x178>
 80026da:	2b30      	cmp	r3, #48	@ 0x30
 80026dc:	d063      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0x166>
 80026de:	d86b      	bhi.n	80027b8 <HAL_TIM_ConfigClockSource+0x178>
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	d060      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0x166>
 80026e4:	d868      	bhi.n	80027b8 <HAL_TIM_ConfigClockSource+0x178>
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d05d      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0x166>
 80026ea:	2b10      	cmp	r3, #16
 80026ec:	d05b      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0x166>
 80026ee:	e063      	b.n	80027b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002700:	f000 fb76 	bl	8002df0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2277      	movs	r2, #119	@ 0x77
 8002710:	4313      	orrs	r3, r2
 8002712:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	609a      	str	r2, [r3, #8]
      break;
 800271c:	e052      	b.n	80027c4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800272e:	f000 fb5f 	bl	8002df0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2180      	movs	r1, #128	@ 0x80
 800273e:	01c9      	lsls	r1, r1, #7
 8002740:	430a      	orrs	r2, r1
 8002742:	609a      	str	r2, [r3, #8]
      break;
 8002744:	e03e      	b.n	80027c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002752:	001a      	movs	r2, r3
 8002754:	f000 fad2 	bl	8002cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2150      	movs	r1, #80	@ 0x50
 800275e:	0018      	movs	r0, r3
 8002760:	f000 fb2c 	bl	8002dbc <TIM_ITRx_SetConfig>
      break;
 8002764:	e02e      	b.n	80027c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002772:	001a      	movs	r2, r3
 8002774:	f000 faf0 	bl	8002d58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2160      	movs	r1, #96	@ 0x60
 800277e:	0018      	movs	r0, r3
 8002780:	f000 fb1c 	bl	8002dbc <TIM_ITRx_SetConfig>
      break;
 8002784:	e01e      	b.n	80027c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002792:	001a      	movs	r2, r3
 8002794:	f000 fab2 	bl	8002cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2140      	movs	r1, #64	@ 0x40
 800279e:	0018      	movs	r0, r3
 80027a0:	f000 fb0c 	bl	8002dbc <TIM_ITRx_SetConfig>
      break;
 80027a4:	e00e      	b.n	80027c4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	0019      	movs	r1, r3
 80027b0:	0010      	movs	r0, r2
 80027b2:	f000 fb03 	bl	8002dbc <TIM_ITRx_SetConfig>
      break;
 80027b6:	e005      	b.n	80027c4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80027b8:	230f      	movs	r3, #15
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
      break;
 80027c0:	e000      	b.n	80027c4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80027c2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	223d      	movs	r2, #61	@ 0x3d
 80027c8:	2101      	movs	r1, #1
 80027ca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	223c      	movs	r2, #60	@ 0x3c
 80027d0:	2100      	movs	r1, #0
 80027d2:	5499      	strb	r1, [r3, r2]

  return status;
 80027d4:	230f      	movs	r3, #15
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	781b      	ldrb	r3, [r3, #0]
}
 80027da:	0018      	movs	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	b004      	add	sp, #16
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			@ (mov r8, r8)
 80027e4:	ffff00ff 	.word	0xffff00ff

080027e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a3b      	ldr	r2, [pc, #236]	@ (80028e8 <TIM_Base_SetConfig+0x100>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d008      	beq.n	8002812 <TIM_Base_SetConfig+0x2a>
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	2380      	movs	r3, #128	@ 0x80
 8002804:	05db      	lsls	r3, r3, #23
 8002806:	429a      	cmp	r2, r3
 8002808:	d003      	beq.n	8002812 <TIM_Base_SetConfig+0x2a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a37      	ldr	r2, [pc, #220]	@ (80028ec <TIM_Base_SetConfig+0x104>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d108      	bne.n	8002824 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2270      	movs	r2, #112	@ 0x70
 8002816:	4393      	bics	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a30      	ldr	r2, [pc, #192]	@ (80028e8 <TIM_Base_SetConfig+0x100>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d018      	beq.n	800285e <TIM_Base_SetConfig+0x76>
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	2380      	movs	r3, #128	@ 0x80
 8002830:	05db      	lsls	r3, r3, #23
 8002832:	429a      	cmp	r2, r3
 8002834:	d013      	beq.n	800285e <TIM_Base_SetConfig+0x76>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a2c      	ldr	r2, [pc, #176]	@ (80028ec <TIM_Base_SetConfig+0x104>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00f      	beq.n	800285e <TIM_Base_SetConfig+0x76>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a2b      	ldr	r2, [pc, #172]	@ (80028f0 <TIM_Base_SetConfig+0x108>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00b      	beq.n	800285e <TIM_Base_SetConfig+0x76>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a2a      	ldr	r2, [pc, #168]	@ (80028f4 <TIM_Base_SetConfig+0x10c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d007      	beq.n	800285e <TIM_Base_SetConfig+0x76>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a29      	ldr	r2, [pc, #164]	@ (80028f8 <TIM_Base_SetConfig+0x110>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d003      	beq.n	800285e <TIM_Base_SetConfig+0x76>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a28      	ldr	r2, [pc, #160]	@ (80028fc <TIM_Base_SetConfig+0x114>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d108      	bne.n	8002870 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4a27      	ldr	r2, [pc, #156]	@ (8002900 <TIM_Base_SetConfig+0x118>)
 8002862:	4013      	ands	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4313      	orrs	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2280      	movs	r2, #128	@ 0x80
 8002874:	4393      	bics	r3, r2
 8002876:	001a      	movs	r2, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a13      	ldr	r2, [pc, #76]	@ (80028e8 <TIM_Base_SetConfig+0x100>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00b      	beq.n	80028b6 <TIM_Base_SetConfig+0xce>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a14      	ldr	r2, [pc, #80]	@ (80028f4 <TIM_Base_SetConfig+0x10c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d007      	beq.n	80028b6 <TIM_Base_SetConfig+0xce>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a13      	ldr	r2, [pc, #76]	@ (80028f8 <TIM_Base_SetConfig+0x110>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d003      	beq.n	80028b6 <TIM_Base_SetConfig+0xce>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a12      	ldr	r2, [pc, #72]	@ (80028fc <TIM_Base_SetConfig+0x114>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d103      	bne.n	80028be <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	691a      	ldr	r2, [r3, #16]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2201      	movs	r2, #1
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d106      	bne.n	80028de <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	2201      	movs	r2, #1
 80028d6:	4393      	bics	r3, r2
 80028d8:	001a      	movs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	611a      	str	r2, [r3, #16]
  }
}
 80028de:	46c0      	nop			@ (mov r8, r8)
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b004      	add	sp, #16
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	46c0      	nop			@ (mov r8, r8)
 80028e8:	40012c00 	.word	0x40012c00
 80028ec:	40000400 	.word	0x40000400
 80028f0:	40002000 	.word	0x40002000
 80028f4:	40014000 	.word	0x40014000
 80028f8:	40014400 	.word	0x40014400
 80028fc:	40014800 	.word	0x40014800
 8002900:	fffffcff 	.word	0xfffffcff

08002904 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	2201      	movs	r2, #1
 800291a:	4393      	bics	r3, r2
 800291c:	001a      	movs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2270      	movs	r2, #112	@ 0x70
 8002932:	4393      	bics	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2203      	movs	r2, #3
 800293a:	4393      	bics	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4313      	orrs	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2202      	movs	r2, #2
 800294c:	4393      	bics	r3, r2
 800294e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	4313      	orrs	r3, r2
 8002958:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a27      	ldr	r2, [pc, #156]	@ (80029fc <TIM_OC1_SetConfig+0xf8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00b      	beq.n	800297a <TIM_OC1_SetConfig+0x76>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a26      	ldr	r2, [pc, #152]	@ (8002a00 <TIM_OC1_SetConfig+0xfc>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d007      	beq.n	800297a <TIM_OC1_SetConfig+0x76>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a25      	ldr	r2, [pc, #148]	@ (8002a04 <TIM_OC1_SetConfig+0x100>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d003      	beq.n	800297a <TIM_OC1_SetConfig+0x76>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a24      	ldr	r2, [pc, #144]	@ (8002a08 <TIM_OC1_SetConfig+0x104>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d10c      	bne.n	8002994 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2208      	movs	r2, #8
 800297e:	4393      	bics	r3, r2
 8002980:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2204      	movs	r2, #4
 8002990:	4393      	bics	r3, r2
 8002992:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a19      	ldr	r2, [pc, #100]	@ (80029fc <TIM_OC1_SetConfig+0xf8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d00b      	beq.n	80029b4 <TIM_OC1_SetConfig+0xb0>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a18      	ldr	r2, [pc, #96]	@ (8002a00 <TIM_OC1_SetConfig+0xfc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d007      	beq.n	80029b4 <TIM_OC1_SetConfig+0xb0>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a17      	ldr	r2, [pc, #92]	@ (8002a04 <TIM_OC1_SetConfig+0x100>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d003      	beq.n	80029b4 <TIM_OC1_SetConfig+0xb0>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a16      	ldr	r2, [pc, #88]	@ (8002a08 <TIM_OC1_SetConfig+0x104>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d111      	bne.n	80029d8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4a15      	ldr	r2, [pc, #84]	@ (8002a0c <TIM_OC1_SetConfig+0x108>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4a14      	ldr	r2, [pc, #80]	@ (8002a10 <TIM_OC1_SetConfig+0x10c>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	621a      	str	r2, [r3, #32]
}
 80029f2:	46c0      	nop			@ (mov r8, r8)
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b006      	add	sp, #24
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			@ (mov r8, r8)
 80029fc:	40012c00 	.word	0x40012c00
 8002a00:	40014000 	.word	0x40014000
 8002a04:	40014400 	.word	0x40014400
 8002a08:	40014800 	.word	0x40014800
 8002a0c:	fffffeff 	.word	0xfffffeff
 8002a10:	fffffdff 	.word	0xfffffdff

08002a14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	2210      	movs	r2, #16
 8002a2a:	4393      	bics	r3, r2
 8002a2c:	001a      	movs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4a2e      	ldr	r2, [pc, #184]	@ (8002afc <TIM_OC2_SetConfig+0xe8>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4a2d      	ldr	r2, [pc, #180]	@ (8002b00 <TIM_OC2_SetConfig+0xec>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	4393      	bics	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a24      	ldr	r2, [pc, #144]	@ (8002b04 <TIM_OC2_SetConfig+0xf0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d10d      	bne.n	8002a92 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2280      	movs	r2, #128	@ 0x80
 8002a7a:	4393      	bics	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2240      	movs	r2, #64	@ 0x40
 8002a8e:	4393      	bics	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a1b      	ldr	r2, [pc, #108]	@ (8002b04 <TIM_OC2_SetConfig+0xf0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00b      	beq.n	8002ab2 <TIM_OC2_SetConfig+0x9e>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8002b08 <TIM_OC2_SetConfig+0xf4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d007      	beq.n	8002ab2 <TIM_OC2_SetConfig+0x9e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a19      	ldr	r2, [pc, #100]	@ (8002b0c <TIM_OC2_SetConfig+0xf8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d003      	beq.n	8002ab2 <TIM_OC2_SetConfig+0x9e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a18      	ldr	r2, [pc, #96]	@ (8002b10 <TIM_OC2_SetConfig+0xfc>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d113      	bne.n	8002ada <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4a17      	ldr	r2, [pc, #92]	@ (8002b14 <TIM_OC2_SetConfig+0x100>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4a16      	ldr	r2, [pc, #88]	@ (8002b18 <TIM_OC2_SetConfig+0x104>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	621a      	str	r2, [r3, #32]
}
 8002af4:	46c0      	nop			@ (mov r8, r8)
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b006      	add	sp, #24
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	ffff8fff 	.word	0xffff8fff
 8002b00:	fffffcff 	.word	0xfffffcff
 8002b04:	40012c00 	.word	0x40012c00
 8002b08:	40014000 	.word	0x40014000
 8002b0c:	40014400 	.word	0x40014400
 8002b10:	40014800 	.word	0x40014800
 8002b14:	fffffbff 	.word	0xfffffbff
 8002b18:	fffff7ff 	.word	0xfffff7ff

08002b1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	4a33      	ldr	r2, [pc, #204]	@ (8002c00 <TIM_OC3_SetConfig+0xe4>)
 8002b32:	401a      	ands	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2270      	movs	r2, #112	@ 0x70
 8002b48:	4393      	bics	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2203      	movs	r2, #3
 8002b50:	4393      	bics	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	4a28      	ldr	r2, [pc, #160]	@ (8002c04 <TIM_OC3_SetConfig+0xe8>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	021b      	lsls	r3, r3, #8
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a24      	ldr	r2, [pc, #144]	@ (8002c08 <TIM_OC3_SetConfig+0xec>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d10d      	bne.n	8002b96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	4a23      	ldr	r2, [pc, #140]	@ (8002c0c <TIM_OC3_SetConfig+0xf0>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	4a1f      	ldr	r2, [pc, #124]	@ (8002c10 <TIM_OC3_SetConfig+0xf4>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a1b      	ldr	r2, [pc, #108]	@ (8002c08 <TIM_OC3_SetConfig+0xec>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00b      	beq.n	8002bb6 <TIM_OC3_SetConfig+0x9a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c14 <TIM_OC3_SetConfig+0xf8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d007      	beq.n	8002bb6 <TIM_OC3_SetConfig+0x9a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8002c18 <TIM_OC3_SetConfig+0xfc>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d003      	beq.n	8002bb6 <TIM_OC3_SetConfig+0x9a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a1a      	ldr	r2, [pc, #104]	@ (8002c1c <TIM_OC3_SetConfig+0x100>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d113      	bne.n	8002bde <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4a19      	ldr	r2, [pc, #100]	@ (8002c20 <TIM_OC3_SetConfig+0x104>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4a18      	ldr	r2, [pc, #96]	@ (8002c24 <TIM_OC3_SetConfig+0x108>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	621a      	str	r2, [r3, #32]
}
 8002bf8:	46c0      	nop			@ (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b006      	add	sp, #24
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	fffffeff 	.word	0xfffffeff
 8002c04:	fffffdff 	.word	0xfffffdff
 8002c08:	40012c00 	.word	0x40012c00
 8002c0c:	fffff7ff 	.word	0xfffff7ff
 8002c10:	fffffbff 	.word	0xfffffbff
 8002c14:	40014000 	.word	0x40014000
 8002c18:	40014400 	.word	0x40014400
 8002c1c:	40014800 	.word	0x40014800
 8002c20:	ffffefff 	.word	0xffffefff
 8002c24:	ffffdfff 	.word	0xffffdfff

08002c28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	4a26      	ldr	r2, [pc, #152]	@ (8002cd8 <TIM_OC4_SetConfig+0xb0>)
 8002c3e:	401a      	ands	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4a22      	ldr	r2, [pc, #136]	@ (8002cdc <TIM_OC4_SetConfig+0xb4>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4a21      	ldr	r2, [pc, #132]	@ (8002ce0 <TIM_OC4_SetConfig+0xb8>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ce4 <TIM_OC4_SetConfig+0xbc>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	031b      	lsls	r3, r3, #12
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a19      	ldr	r2, [pc, #100]	@ (8002ce8 <TIM_OC4_SetConfig+0xc0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d00b      	beq.n	8002ca0 <TIM_OC4_SetConfig+0x78>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a18      	ldr	r2, [pc, #96]	@ (8002cec <TIM_OC4_SetConfig+0xc4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d007      	beq.n	8002ca0 <TIM_OC4_SetConfig+0x78>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a17      	ldr	r2, [pc, #92]	@ (8002cf0 <TIM_OC4_SetConfig+0xc8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d003      	beq.n	8002ca0 <TIM_OC4_SetConfig+0x78>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a16      	ldr	r2, [pc, #88]	@ (8002cf4 <TIM_OC4_SetConfig+0xcc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d109      	bne.n	8002cb4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	4a15      	ldr	r2, [pc, #84]	@ (8002cf8 <TIM_OC4_SetConfig+0xd0>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	019b      	lsls	r3, r3, #6
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	621a      	str	r2, [r3, #32]
}
 8002cce:	46c0      	nop			@ (mov r8, r8)
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b006      	add	sp, #24
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	46c0      	nop			@ (mov r8, r8)
 8002cd8:	ffffefff 	.word	0xffffefff
 8002cdc:	ffff8fff 	.word	0xffff8fff
 8002ce0:	fffffcff 	.word	0xfffffcff
 8002ce4:	ffffdfff 	.word	0xffffdfff
 8002ce8:	40012c00 	.word	0x40012c00
 8002cec:	40014000 	.word	0x40014000
 8002cf0:	40014400 	.word	0x40014400
 8002cf4:	40014800 	.word	0x40014800
 8002cf8:	ffffbfff 	.word	0xffffbfff

08002cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	2201      	movs	r2, #1
 8002d14:	4393      	bics	r3, r2
 8002d16:	001a      	movs	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	22f0      	movs	r2, #240	@ 0xf0
 8002d26:	4393      	bics	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	220a      	movs	r2, #10
 8002d38:	4393      	bics	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	621a      	str	r2, [r3, #32]
}
 8002d50:	46c0      	nop			@ (mov r8, r8)
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b006      	add	sp, #24
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	2210      	movs	r2, #16
 8002d70:	4393      	bics	r3, r2
 8002d72:	001a      	movs	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4a0d      	ldr	r2, [pc, #52]	@ (8002db8 <TIM_TI2_ConfigInputStage+0x60>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	031b      	lsls	r3, r3, #12
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	22a0      	movs	r2, #160	@ 0xa0
 8002d94:	4393      	bics	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	621a      	str	r2, [r3, #32]
}
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b006      	add	sp, #24
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	46c0      	nop			@ (mov r8, r8)
 8002db8:	ffff0fff 	.word	0xffff0fff

08002dbc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2270      	movs	r2, #112	@ 0x70
 8002dd0:	4393      	bics	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	2207      	movs	r2, #7
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	609a      	str	r2, [r3, #8]
}
 8002de6:	46c0      	nop			@ (mov r8, r8)
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b004      	add	sp, #16
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
 8002dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	4a09      	ldr	r2, [pc, #36]	@ (8002e2c <TIM_ETR_SetConfig+0x3c>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	021a      	lsls	r2, r3, #8
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	609a      	str	r2, [r3, #8]
}
 8002e24:	46c0      	nop			@ (mov r8, r8)
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b006      	add	sp, #24
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	ffff00ff 	.word	0xffff00ff

08002e30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	221f      	movs	r2, #31
 8002e40:	4013      	ands	r3, r2
 8002e42:	2201      	movs	r2, #1
 8002e44:	409a      	lsls	r2, r3
 8002e46:	0013      	movs	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	43d2      	mvns	r2, r2
 8002e52:	401a      	ands	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a1a      	ldr	r2, [r3, #32]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	211f      	movs	r1, #31
 8002e60:	400b      	ands	r3, r1
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4099      	lsls	r1, r3
 8002e66:	000b      	movs	r3, r1
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	621a      	str	r2, [r3, #32]
}
 8002e6e:	46c0      	nop			@ (mov r8, r8)
 8002e70:	46bd      	mov	sp, r7
 8002e72:	b006      	add	sp, #24
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	223c      	movs	r2, #60	@ 0x3c
 8002e86:	5c9b      	ldrb	r3, [r3, r2]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e047      	b.n	8002f20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	223c      	movs	r2, #60	@ 0x3c
 8002e94:	2101      	movs	r1, #1
 8002e96:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	223d      	movs	r2, #61	@ 0x3d
 8002e9c:	2102      	movs	r1, #2
 8002e9e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2270      	movs	r2, #112	@ 0x70
 8002eb4:	4393      	bics	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a16      	ldr	r2, [pc, #88]	@ (8002f28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d00f      	beq.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	2380      	movs	r3, #128	@ 0x80
 8002eda:	05db      	lsls	r3, r3, #23
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d009      	beq.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a11      	ldr	r2, [pc, #68]	@ (8002f2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a10      	ldr	r2, [pc, #64]	@ (8002f30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d10c      	bne.n	8002f0e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2280      	movs	r2, #128	@ 0x80
 8002ef8:	4393      	bics	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	223d      	movs	r2, #61	@ 0x3d
 8002f12:	2101      	movs	r1, #1
 8002f14:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	223c      	movs	r2, #60	@ 0x3c
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	0018      	movs	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b004      	add	sp, #16
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40012c00 	.word	0x40012c00
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40014000 	.word	0x40014000

08002f34 <memset>:
 8002f34:	0003      	movs	r3, r0
 8002f36:	1882      	adds	r2, r0, r2
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d100      	bne.n	8002f3e <memset+0xa>
 8002f3c:	4770      	bx	lr
 8002f3e:	7019      	strb	r1, [r3, #0]
 8002f40:	3301      	adds	r3, #1
 8002f42:	e7f9      	b.n	8002f38 <memset+0x4>

08002f44 <__libc_init_array>:
 8002f44:	b570      	push	{r4, r5, r6, lr}
 8002f46:	2600      	movs	r6, #0
 8002f48:	4c0c      	ldr	r4, [pc, #48]	@ (8002f7c <__libc_init_array+0x38>)
 8002f4a:	4d0d      	ldr	r5, [pc, #52]	@ (8002f80 <__libc_init_array+0x3c>)
 8002f4c:	1b64      	subs	r4, r4, r5
 8002f4e:	10a4      	asrs	r4, r4, #2
 8002f50:	42a6      	cmp	r6, r4
 8002f52:	d109      	bne.n	8002f68 <__libc_init_array+0x24>
 8002f54:	2600      	movs	r6, #0
 8002f56:	f000 f819 	bl	8002f8c <_init>
 8002f5a:	4c0a      	ldr	r4, [pc, #40]	@ (8002f84 <__libc_init_array+0x40>)
 8002f5c:	4d0a      	ldr	r5, [pc, #40]	@ (8002f88 <__libc_init_array+0x44>)
 8002f5e:	1b64      	subs	r4, r4, r5
 8002f60:	10a4      	asrs	r4, r4, #2
 8002f62:	42a6      	cmp	r6, r4
 8002f64:	d105      	bne.n	8002f72 <__libc_init_array+0x2e>
 8002f66:	bd70      	pop	{r4, r5, r6, pc}
 8002f68:	00b3      	lsls	r3, r6, #2
 8002f6a:	58eb      	ldr	r3, [r5, r3]
 8002f6c:	4798      	blx	r3
 8002f6e:	3601      	adds	r6, #1
 8002f70:	e7ee      	b.n	8002f50 <__libc_init_array+0xc>
 8002f72:	00b3      	lsls	r3, r6, #2
 8002f74:	58eb      	ldr	r3, [r5, r3]
 8002f76:	4798      	blx	r3
 8002f78:	3601      	adds	r6, #1
 8002f7a:	e7f2      	b.n	8002f62 <__libc_init_array+0x1e>
 8002f7c:	08002fd4 	.word	0x08002fd4
 8002f80:	08002fd4 	.word	0x08002fd4
 8002f84:	08002fd8 	.word	0x08002fd8
 8002f88:	08002fd4 	.word	0x08002fd4

08002f8c <_init>:
 8002f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8e:	46c0      	nop			@ (mov r8, r8)
 8002f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f92:	bc08      	pop	{r3}
 8002f94:	469e      	mov	lr, r3
 8002f96:	4770      	bx	lr

08002f98 <_fini>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	46c0      	nop			@ (mov r8, r8)
 8002f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9e:	bc08      	pop	{r3}
 8002fa0:	469e      	mov	lr, r3
 8002fa2:	4770      	bx	lr
