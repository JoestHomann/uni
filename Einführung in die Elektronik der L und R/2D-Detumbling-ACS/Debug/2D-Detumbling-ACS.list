
2D-Detumbling-ACS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f60  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003020  08003020  00004020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003050  08003050  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003050  08003050  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003050  08003050  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003050  08003050  00004050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003054  08003054  00004054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003058  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08003064  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08003064  000050c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6a2  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a3b  00000000  00000000  0000f6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00011118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094a  00000000  00000000  00011cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000113c6  00000000  00000000  0001263a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efd7  00000000  00000000  00023a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069f85  00000000  00000000  000329d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c95c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ae0  00000000  00000000  0009c9a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0009f480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003008 	.word	0x08003008

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003008 	.word	0x08003008

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fb33 	bl	8000890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f883 	bl	8000334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f9af 	bl	8000590 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000232:	f000 f921 	bl	8000478 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000236:	f000 f8df 	bl	80003f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Start PWM on
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);	// TIM3 Channel 3 (LD4 = Torquer X)
 800023a:	4b3b      	ldr	r3, [pc, #236]	@ (8000328 <main+0x108>)
 800023c:	2108      	movs	r1, #8
 800023e:	0018      	movs	r0, r3
 8000240:	f002 f8be 	bl	80023c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);	// TIM3 Channel 4 (LD3 = Torquer Y)
 8000244:	4b38      	ldr	r3, [pc, #224]	@ (8000328 <main+0x108>)
 8000246:	210c      	movs	r1, #12
 8000248:	0018      	movs	r0, r3
 800024a:	f002 f8b9 	bl	80023c0 <HAL_TIM_PWM_Start>

  // Set PWM duty cycle
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 75); // X-Magnetorquer to 75% -> Preliminary value for testing
 800024e:	4b36      	ldr	r3, [pc, #216]	@ (8000328 <main+0x108>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	224b      	movs	r2, #75	@ 0x4b
 8000254:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 25);	// Y-Magnetorquer to 25% -> Preliminary value for testing
 8000256:	4b34      	ldr	r3, [pc, #208]	@ (8000328 <main+0x108>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	2219      	movs	r2, #25
 800025c:	641a      	str	r2, [r3, #64]	@ 0x40


  // FXAS21002: Check WHO_AM_I register
  uint8_t who_am_i = 0;
 800025e:	1cfb      	adds	r3, r7, #3
 8000260:	2200      	movs	r2, #0
 8000262:	701a      	strb	r2, [r3, #0]

  // Read WHO_AM_I register (0x0C), expect 0xD7
  if (HAL_I2C_Mem_Read(&hi2c1, 0x42, 0x0C, I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000264:	4831      	ldr	r0, [pc, #196]	@ (800032c <main+0x10c>)
 8000266:	2301      	movs	r3, #1
 8000268:	425b      	negs	r3, r3
 800026a:	9302      	str	r3, [sp, #8]
 800026c:	2301      	movs	r3, #1
 800026e:	9301      	str	r3, [sp, #4]
 8000270:	1cfb      	adds	r3, r7, #3
 8000272:	9300      	str	r3, [sp, #0]
 8000274:	2301      	movs	r3, #1
 8000276:	220c      	movs	r2, #12
 8000278:	2142      	movs	r1, #66	@ 0x42
 800027a:	f000 fe79 	bl	8000f70 <HAL_I2C_Mem_Read>
 800027e:	1e03      	subs	r3, r0, #0
 8000280:	d001      	beq.n	8000286 <main+0x66>

      Error_Handler();	// I2C communication failed
 8000282:	f000 f9d1 	bl	8000628 <Error_Handler>
  }

  // If sensor does not return expected ID, turn on error LED and halt
  if (who_am_i == 0xD7) {
 8000286:	1cfb      	adds	r3, r7, #3
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2bd7      	cmp	r3, #215	@ 0xd7
 800028c:	d112      	bne.n	80002b4 <main+0x94>

      // Blink LD3 once as confirmation
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);  // Turn on LD3
 800028e:	2380      	movs	r3, #128	@ 0x80
 8000290:	009b      	lsls	r3, r3, #2
 8000292:	4827      	ldr	r0, [pc, #156]	@ (8000330 <main+0x110>)
 8000294:	2201      	movs	r2, #1
 8000296:	0019      	movs	r1, r3
 8000298:	f000 fda6 	bl	8000de8 <HAL_GPIO_WritePin>
      HAL_Delay(500);
 800029c:	23fa      	movs	r3, #250	@ 0xfa
 800029e:	005b      	lsls	r3, r3, #1
 80002a0:	0018      	movs	r0, r3
 80002a2:	f000 fb59 	bl	8000958 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);  // Turn off LD3
 80002a6:	2380      	movs	r3, #128	@ 0x80
 80002a8:	009b      	lsls	r3, r3, #2
 80002aa:	4821      	ldr	r0, [pc, #132]	@ (8000330 <main+0x110>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	0019      	movs	r1, r3
 80002b0:	f000 fd9a 	bl	8000de8 <HAL_GPIO_WritePin>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Buffer for two bytes: Z_MSB and Z_LSB
	  uint8_t gyro_z_raw[2] = {0};
 80002b4:	003b      	movs	r3, r7
 80002b6:	2200      	movs	r2, #0
 80002b8:	801a      	strh	r2, [r3, #0]

	  // Read 2 bytes starting at register 0x05 (OUT_Z_MSB)
	  if (HAL_I2C_Mem_Read(&hi2c1, 0x42, 0x05, I2C_MEMADD_SIZE_8BIT, gyro_z_raw, 2, HAL_MAX_DELAY) == HAL_OK) {
 80002ba:	481c      	ldr	r0, [pc, #112]	@ (800032c <main+0x10c>)
 80002bc:	2301      	movs	r3, #1
 80002be:	425b      	negs	r3, r3
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	2302      	movs	r3, #2
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	003b      	movs	r3, r7
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	2301      	movs	r3, #1
 80002cc:	2205      	movs	r2, #5
 80002ce:	2142      	movs	r1, #66	@ 0x42
 80002d0:	f000 fe4e 	bl	8000f70 <HAL_I2C_Mem_Read>
 80002d4:	1e03      	subs	r3, r0, #0
 80002d6:	d1ed      	bne.n	80002b4 <main+0x94>

	      // Combine MSB and LSB into signed 16-bit integer
	      int16_t gyro_z = (int16_t)((gyro_z_raw[0] << 8) | gyro_z_raw[1]);
 80002d8:	003b      	movs	r3, r7
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b21b      	sxth	r3, r3
 80002de:	021b      	lsls	r3, r3, #8
 80002e0:	b219      	sxth	r1, r3
 80002e2:	003b      	movs	r3, r7
 80002e4:	785b      	ldrb	r3, [r3, #1]
 80002e6:	b21a      	sxth	r2, r3
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	430a      	orrs	r2, r1
 80002ec:	801a      	strh	r2, [r3, #0]

	      // Now gyro_z holds the raw angular rate around Z (in LSB)

	      // Example: adjust LED brightness as test
	      uint8_t duty = 50;  // Default 50% = off
 80002ee:	1dfb      	adds	r3, r7, #7
 80002f0:	2232      	movs	r2, #50	@ 0x32
 80002f2:	701a      	strb	r2, [r3, #0]
	      if (gyro_z > 100) {
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2200      	movs	r2, #0
 80002f8:	5e9b      	ldrsh	r3, [r3, r2]
 80002fa:	2b64      	cmp	r3, #100	@ 0x64
 80002fc:	dd03      	ble.n	8000306 <main+0xe6>
	          duty = 99;  // Simulated positive rotation → LED hell
 80002fe:	1dfb      	adds	r3, r7, #7
 8000300:	2263      	movs	r2, #99	@ 0x63
 8000302:	701a      	strb	r2, [r3, #0]
 8000304:	e007      	b.n	8000316 <main+0xf6>
	      } else if (gyro_z < -100) {
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2200      	movs	r2, #0
 800030a:	5e9b      	ldrsh	r3, [r3, r2]
 800030c:	3364      	adds	r3, #100	@ 0x64
 800030e:	da02      	bge.n	8000316 <main+0xf6>
	          duty = 1;  // Simulated negative rotation → LED dunkler
 8000310:	1dfb      	adds	r3, r7, #7
 8000312:	2201      	movs	r2, #1
 8000314:	701a      	strb	r2, [r3, #0]
	      }

	      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty);  // Torquer X LED
 8000316:	4b04      	ldr	r3, [pc, #16]	@ (8000328 <main+0x108>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	1dfa      	adds	r2, r7, #7
 800031c:	7812      	ldrb	r2, [r2, #0]
 800031e:	63da      	str	r2, [r3, #60]	@ 0x3c

	      HAL_Delay(100);  // 10 Hz = später über Timer lösen
 8000320:	2064      	movs	r0, #100	@ 0x64
 8000322:	f000 fb19 	bl	8000958 <HAL_Delay>
  {
 8000326:	e7c5      	b.n	80002b4 <main+0x94>
 8000328:	2000007c 	.word	0x2000007c
 800032c:	20000028 	.word	0x20000028
 8000330:	48000800 	.word	0x48000800

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b590      	push	{r4, r7, lr}
 8000336:	b097      	sub	sp, #92	@ 0x5c
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	2428      	movs	r4, #40	@ 0x28
 800033c:	193b      	adds	r3, r7, r4
 800033e:	0018      	movs	r0, r3
 8000340:	2330      	movs	r3, #48	@ 0x30
 8000342:	001a      	movs	r2, r3
 8000344:	2100      	movs	r1, #0
 8000346:	f002 fe33 	bl	8002fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034a:	2318      	movs	r3, #24
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	0018      	movs	r0, r3
 8000350:	2310      	movs	r3, #16
 8000352:	001a      	movs	r2, r3
 8000354:	2100      	movs	r1, #0
 8000356:	f002 fe2b 	bl	8002fb0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	0018      	movs	r0, r3
 800035e:	2314      	movs	r3, #20
 8000360:	001a      	movs	r2, r3
 8000362:	2100      	movs	r1, #0
 8000364:	f002 fe24 	bl	8002fb0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000368:	0021      	movs	r1, r4
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2202      	movs	r2, #2
 800036e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2201      	movs	r2, #1
 8000374:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000376:	187b      	adds	r3, r7, r1
 8000378:	2210      	movs	r2, #16
 800037a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037c:	187b      	adds	r3, r7, r1
 800037e:	2202      	movs	r2, #2
 8000380:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000382:	187b      	adds	r3, r7, r1
 8000384:	2200      	movs	r2, #0
 8000386:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000388:	187b      	adds	r3, r7, r1
 800038a:	22a0      	movs	r2, #160	@ 0xa0
 800038c:	0392      	lsls	r2, r2, #14
 800038e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000390:	187b      	adds	r3, r7, r1
 8000392:	2200      	movs	r2, #0
 8000394:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000396:	187b      	adds	r3, r7, r1
 8000398:	0018      	movs	r0, r3
 800039a:	f001 fa4d 	bl	8001838 <HAL_RCC_OscConfig>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003a2:	f000 f941 	bl	8000628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a6:	2118      	movs	r1, #24
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	2207      	movs	r2, #7
 80003ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2202      	movs	r2, #2
 80003b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2200      	movs	r2, #0
 80003b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2200      	movs	r2, #0
 80003be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	2101      	movs	r1, #1
 80003c4:	0018      	movs	r0, r3
 80003c6:	f001 fd51 	bl	8001e6c <HAL_RCC_ClockConfig>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80003ce:	f000 f92b 	bl	8000628 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2220      	movs	r2, #32
 80003d6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	0018      	movs	r0, r3
 80003e2:	f001 fe67 	bl	80020b4 <HAL_RCCEx_PeriphCLKConfig>
 80003e6:	1e03      	subs	r3, r0, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0xba>
  {
    Error_Handler();
 80003ea:	f000 f91d 	bl	8000628 <Error_Handler>
  }
}
 80003ee:	46c0      	nop			@ (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b017      	add	sp, #92	@ 0x5c
 80003f4:	bd90      	pop	{r4, r7, pc}
	...

080003f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003fc:	4b1b      	ldr	r3, [pc, #108]	@ (800046c <MX_I2C1_Init+0x74>)
 80003fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000470 <MX_I2C1_Init+0x78>)
 8000400:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000402:	4b1a      	ldr	r3, [pc, #104]	@ (800046c <MX_I2C1_Init+0x74>)
 8000404:	4a1b      	ldr	r2, [pc, #108]	@ (8000474 <MX_I2C1_Init+0x7c>)
 8000406:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000408:	4b18      	ldr	r3, [pc, #96]	@ (800046c <MX_I2C1_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800040e:	4b17      	ldr	r3, [pc, #92]	@ (800046c <MX_I2C1_Init+0x74>)
 8000410:	2201      	movs	r2, #1
 8000412:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000414:	4b15      	ldr	r3, [pc, #84]	@ (800046c <MX_I2C1_Init+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800041a:	4b14      	ldr	r3, [pc, #80]	@ (800046c <MX_I2C1_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000420:	4b12      	ldr	r3, [pc, #72]	@ (800046c <MX_I2C1_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000426:	4b11      	ldr	r3, [pc, #68]	@ (800046c <MX_I2C1_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800042c:	4b0f      	ldr	r3, [pc, #60]	@ (800046c <MX_I2C1_Init+0x74>)
 800042e:	2200      	movs	r2, #0
 8000430:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000432:	4b0e      	ldr	r3, [pc, #56]	@ (800046c <MX_I2C1_Init+0x74>)
 8000434:	0018      	movs	r0, r3
 8000436:	f000 fcf5 	bl	8000e24 <HAL_I2C_Init>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800043e:	f000 f8f3 	bl	8000628 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000442:	4b0a      	ldr	r3, [pc, #40]	@ (800046c <MX_I2C1_Init+0x74>)
 8000444:	2100      	movs	r1, #0
 8000446:	0018      	movs	r0, r3
 8000448:	f001 f95e 	bl	8001708 <HAL_I2CEx_ConfigAnalogFilter>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d001      	beq.n	8000454 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000450:	f000 f8ea 	bl	8000628 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000454:	4b05      	ldr	r3, [pc, #20]	@ (800046c <MX_I2C1_Init+0x74>)
 8000456:	2100      	movs	r1, #0
 8000458:	0018      	movs	r0, r3
 800045a:	f001 f9a1 	bl	80017a0 <HAL_I2CEx_ConfigDigitalFilter>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000462:	f000 f8e1 	bl	8000628 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000028 	.word	0x20000028
 8000470:	40005400 	.word	0x40005400
 8000474:	00201d2b 	.word	0x00201d2b

08000478 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08e      	sub	sp, #56	@ 0x38
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800047e:	2328      	movs	r3, #40	@ 0x28
 8000480:	18fb      	adds	r3, r7, r3
 8000482:	0018      	movs	r0, r3
 8000484:	2310      	movs	r3, #16
 8000486:	001a      	movs	r2, r3
 8000488:	2100      	movs	r1, #0
 800048a:	f002 fd91 	bl	8002fb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800048e:	2320      	movs	r3, #32
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	0018      	movs	r0, r3
 8000494:	2308      	movs	r3, #8
 8000496:	001a      	movs	r2, r3
 8000498:	2100      	movs	r1, #0
 800049a:	f002 fd89 	bl	8002fb0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	0018      	movs	r0, r3
 80004a2:	231c      	movs	r3, #28
 80004a4:	001a      	movs	r2, r3
 80004a6:	2100      	movs	r1, #0
 80004a8:	f002 fd82 	bl	8002fb0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004ac:	4b36      	ldr	r3, [pc, #216]	@ (8000588 <MX_TIM3_Init+0x110>)
 80004ae:	4a37      	ldr	r2, [pc, #220]	@ (800058c <MX_TIM3_Init+0x114>)
 80004b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 80004b2:	4b35      	ldr	r3, [pc, #212]	@ (8000588 <MX_TIM3_Init+0x110>)
 80004b4:	222f      	movs	r2, #47	@ 0x2f
 80004b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b8:	4b33      	ldr	r3, [pc, #204]	@ (8000588 <MX_TIM3_Init+0x110>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80004be:	4b32      	ldr	r3, [pc, #200]	@ (8000588 <MX_TIM3_Init+0x110>)
 80004c0:	2264      	movs	r2, #100	@ 0x64
 80004c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c4:	4b30      	ldr	r3, [pc, #192]	@ (8000588 <MX_TIM3_Init+0x110>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000588 <MX_TIM3_Init+0x110>)
 80004cc:	2280      	movs	r2, #128	@ 0x80
 80004ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000588 <MX_TIM3_Init+0x110>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 fecc 	bl	8002270 <HAL_TIM_Base_Init>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80004dc:	f000 f8a4 	bl	8000628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004e0:	2128      	movs	r1, #40	@ 0x28
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2280      	movs	r2, #128	@ 0x80
 80004e6:	0152      	lsls	r2, r2, #5
 80004e8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004ea:	187a      	adds	r2, r7, r1
 80004ec:	4b26      	ldr	r3, [pc, #152]	@ (8000588 <MX_TIM3_Init+0x110>)
 80004ee:	0011      	movs	r1, r2
 80004f0:	0018      	movs	r0, r3
 80004f2:	f002 f8e3 	bl	80026bc <HAL_TIM_ConfigClockSource>
 80004f6:	1e03      	subs	r3, r0, #0
 80004f8:	d001      	beq.n	80004fe <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80004fa:	f000 f895 	bl	8000628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004fe:	4b22      	ldr	r3, [pc, #136]	@ (8000588 <MX_TIM3_Init+0x110>)
 8000500:	0018      	movs	r0, r3
 8000502:	f001 ff05 	bl	8002310 <HAL_TIM_PWM_Init>
 8000506:	1e03      	subs	r3, r0, #0
 8000508:	d001      	beq.n	800050e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800050a:	f000 f88d 	bl	8000628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800050e:	2120      	movs	r1, #32
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2200      	movs	r2, #0
 800051a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800051c:	187a      	adds	r2, r7, r1
 800051e:	4b1a      	ldr	r3, [pc, #104]	@ (8000588 <MX_TIM3_Init+0x110>)
 8000520:	0011      	movs	r1, r2
 8000522:	0018      	movs	r0, r3
 8000524:	f002 fce6 	bl	8002ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000528:	1e03      	subs	r3, r0, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800052c:	f000 f87c 	bl	8000628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2260      	movs	r2, #96	@ 0x60
 8000534:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2232      	movs	r2, #50	@ 0x32
 800053a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000548:	1d39      	adds	r1, r7, #4
 800054a:	4b0f      	ldr	r3, [pc, #60]	@ (8000588 <MX_TIM3_Init+0x110>)
 800054c:	2208      	movs	r2, #8
 800054e:	0018      	movs	r0, r3
 8000550:	f001 ffee 	bl	8002530 <HAL_TIM_PWM_ConfigChannel>
 8000554:	1e03      	subs	r3, r0, #0
 8000556:	d001      	beq.n	800055c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000558:	f000 f866 	bl	8000628 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000562:	1d39      	adds	r1, r7, #4
 8000564:	4b08      	ldr	r3, [pc, #32]	@ (8000588 <MX_TIM3_Init+0x110>)
 8000566:	220c      	movs	r2, #12
 8000568:	0018      	movs	r0, r3
 800056a:	f001 ffe1 	bl	8002530 <HAL_TIM_PWM_ConfigChannel>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 8000572:	f000 f859 	bl	8000628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000576:	4b04      	ldr	r3, [pc, #16]	@ (8000588 <MX_TIM3_Init+0x110>)
 8000578:	0018      	movs	r0, r3
 800057a:	f000 f8eb 	bl	8000754 <HAL_TIM_MspPostInit>

}
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	b00e      	add	sp, #56	@ 0x38
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	2000007c 	.word	0x2000007c
 800058c:	40000400 	.word	0x40000400

08000590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b089      	sub	sp, #36	@ 0x24
 8000594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	240c      	movs	r4, #12
 8000598:	193b      	adds	r3, r7, r4
 800059a:	0018      	movs	r0, r3
 800059c:	2314      	movs	r3, #20
 800059e:	001a      	movs	r2, r3
 80005a0:	2100      	movs	r1, #0
 80005a2:	f002 fd05 	bl	8002fb0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <MX_GPIO_Init+0x94>)
 80005a8:	695a      	ldr	r2, [r3, #20]
 80005aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000624 <MX_GPIO_Init+0x94>)
 80005ac:	2180      	movs	r1, #128	@ 0x80
 80005ae:	0289      	lsls	r1, r1, #10
 80005b0:	430a      	orrs	r2, r1
 80005b2:	615a      	str	r2, [r3, #20]
 80005b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <MX_GPIO_Init+0x94>)
 80005b6:	695a      	ldr	r2, [r3, #20]
 80005b8:	2380      	movs	r3, #128	@ 0x80
 80005ba:	029b      	lsls	r3, r3, #10
 80005bc:	4013      	ands	r3, r2
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	4b18      	ldr	r3, [pc, #96]	@ (8000624 <MX_GPIO_Init+0x94>)
 80005c4:	695a      	ldr	r2, [r3, #20]
 80005c6:	4b17      	ldr	r3, [pc, #92]	@ (8000624 <MX_GPIO_Init+0x94>)
 80005c8:	2180      	movs	r1, #128	@ 0x80
 80005ca:	0309      	lsls	r1, r1, #12
 80005cc:	430a      	orrs	r2, r1
 80005ce:	615a      	str	r2, [r3, #20]
 80005d0:	4b14      	ldr	r3, [pc, #80]	@ (8000624 <MX_GPIO_Init+0x94>)
 80005d2:	695a      	ldr	r2, [r3, #20]
 80005d4:	2380      	movs	r3, #128	@ 0x80
 80005d6:	031b      	lsls	r3, r3, #12
 80005d8:	4013      	ands	r3, r2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <MX_GPIO_Init+0x94>)
 80005e0:	695a      	ldr	r2, [r3, #20]
 80005e2:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <MX_GPIO_Init+0x94>)
 80005e4:	2180      	movs	r1, #128	@ 0x80
 80005e6:	02c9      	lsls	r1, r1, #11
 80005e8:	430a      	orrs	r2, r1
 80005ea:	615a      	str	r2, [r3, #20]
 80005ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <MX_GPIO_Init+0x94>)
 80005ee:	695a      	ldr	r2, [r3, #20]
 80005f0:	2380      	movs	r3, #128	@ 0x80
 80005f2:	02db      	lsls	r3, r3, #11
 80005f4:	4013      	ands	r3, r2
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : Seperation_Switch_Pin */
  GPIO_InitStruct.Pin = Seperation_Switch_Pin;
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	2201      	movs	r2, #1
 80005fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000600:	193b      	adds	r3, r7, r4
 8000602:	2200      	movs	r2, #0
 8000604:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000606:	193b      	adds	r3, r7, r4
 8000608:	2201      	movs	r2, #1
 800060a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Seperation_Switch_GPIO_Port, &GPIO_InitStruct);
 800060c:	193a      	adds	r2, r7, r4
 800060e:	2390      	movs	r3, #144	@ 0x90
 8000610:	05db      	lsls	r3, r3, #23
 8000612:	0011      	movs	r1, r2
 8000614:	0018      	movs	r0, r3
 8000616:	f000 fa77 	bl	8000b08 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b009      	add	sp, #36	@ 0x24
 8000620:	bd90      	pop	{r4, r7, pc}
 8000622:	46c0      	nop			@ (mov r8, r8)
 8000624:	40021000 	.word	0x40021000

08000628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062c:	b672      	cpsid	i
}
 800062e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000630:	46c0      	nop			@ (mov r8, r8)
 8000632:	e7fd      	b.n	8000630 <Error_Handler+0x8>

08000634 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063a:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <HAL_MspInit+0x44>)
 800063c:	699a      	ldr	r2, [r3, #24]
 800063e:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <HAL_MspInit+0x44>)
 8000640:	2101      	movs	r1, #1
 8000642:	430a      	orrs	r2, r1
 8000644:	619a      	str	r2, [r3, #24]
 8000646:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <HAL_MspInit+0x44>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	2201      	movs	r2, #1
 800064c:	4013      	ands	r3, r2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <HAL_MspInit+0x44>)
 8000654:	69da      	ldr	r2, [r3, #28]
 8000656:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <HAL_MspInit+0x44>)
 8000658:	2180      	movs	r1, #128	@ 0x80
 800065a:	0549      	lsls	r1, r1, #21
 800065c:	430a      	orrs	r2, r1
 800065e:	61da      	str	r2, [r3, #28]
 8000660:	4b05      	ldr	r3, [pc, #20]	@ (8000678 <HAL_MspInit+0x44>)
 8000662:	69da      	ldr	r2, [r3, #28]
 8000664:	2380      	movs	r3, #128	@ 0x80
 8000666:	055b      	lsls	r3, r3, #21
 8000668:	4013      	ands	r3, r2
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b002      	add	sp, #8
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	40021000 	.word	0x40021000

0800067c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b08b      	sub	sp, #44	@ 0x2c
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	2414      	movs	r4, #20
 8000686:	193b      	adds	r3, r7, r4
 8000688:	0018      	movs	r0, r3
 800068a:	2314      	movs	r3, #20
 800068c:	001a      	movs	r2, r3
 800068e:	2100      	movs	r1, #0
 8000690:	f002 fc8e 	bl	8002fb0 <memset>
  if(hi2c->Instance==I2C1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a1c      	ldr	r2, [pc, #112]	@ (800070c <HAL_I2C_MspInit+0x90>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d131      	bne.n	8000702 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <HAL_I2C_MspInit+0x94>)
 80006a0:	695a      	ldr	r2, [r3, #20]
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <HAL_I2C_MspInit+0x94>)
 80006a4:	2180      	movs	r1, #128	@ 0x80
 80006a6:	02c9      	lsls	r1, r1, #11
 80006a8:	430a      	orrs	r2, r1
 80006aa:	615a      	str	r2, [r3, #20]
 80006ac:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <HAL_I2C_MspInit+0x94>)
 80006ae:	695a      	ldr	r2, [r3, #20]
 80006b0:	2380      	movs	r3, #128	@ 0x80
 80006b2:	02db      	lsls	r3, r3, #11
 80006b4:	4013      	ands	r3, r2
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006ba:	0021      	movs	r1, r4
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	22c0      	movs	r2, #192	@ 0xc0
 80006c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2212      	movs	r2, #18
 80006c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2203      	movs	r2, #3
 80006d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2201      	movs	r2, #1
 80006d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000714 <HAL_I2C_MspInit+0x98>)
 80006de:	0019      	movs	r1, r3
 80006e0:	0010      	movs	r0, r2
 80006e2:	f000 fa11 	bl	8000b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <HAL_I2C_MspInit+0x94>)
 80006e8:	69da      	ldr	r2, [r3, #28]
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <HAL_I2C_MspInit+0x94>)
 80006ec:	2180      	movs	r1, #128	@ 0x80
 80006ee:	0389      	lsls	r1, r1, #14
 80006f0:	430a      	orrs	r2, r1
 80006f2:	61da      	str	r2, [r3, #28]
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <HAL_I2C_MspInit+0x94>)
 80006f6:	69da      	ldr	r2, [r3, #28]
 80006f8:	2380      	movs	r3, #128	@ 0x80
 80006fa:	039b      	lsls	r3, r3, #14
 80006fc:	4013      	ands	r3, r2
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b00b      	add	sp, #44	@ 0x2c
 8000708:	bd90      	pop	{r4, r7, pc}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	40005400 	.word	0x40005400
 8000710:	40021000 	.word	0x40021000
 8000714:	48000400 	.word	0x48000400

08000718 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a09      	ldr	r2, [pc, #36]	@ (800074c <HAL_TIM_Base_MspInit+0x34>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d10b      	bne.n	8000742 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <HAL_TIM_Base_MspInit+0x38>)
 800072c:	69da      	ldr	r2, [r3, #28]
 800072e:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <HAL_TIM_Base_MspInit+0x38>)
 8000730:	2102      	movs	r1, #2
 8000732:	430a      	orrs	r2, r1
 8000734:	61da      	str	r2, [r3, #28]
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <HAL_TIM_Base_MspInit+0x38>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	2202      	movs	r2, #2
 800073c:	4013      	ands	r3, r2
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b004      	add	sp, #16
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	40000400 	.word	0x40000400
 8000750:	40021000 	.word	0x40021000

08000754 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b089      	sub	sp, #36	@ 0x24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	240c      	movs	r4, #12
 800075e:	193b      	adds	r3, r7, r4
 8000760:	0018      	movs	r0, r3
 8000762:	2314      	movs	r3, #20
 8000764:	001a      	movs	r2, r3
 8000766:	2100      	movs	r1, #0
 8000768:	f002 fc22 	bl	8002fb0 <memset>
  if(htim->Instance==TIM3)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a20      	ldr	r2, [pc, #128]	@ (80007f4 <HAL_TIM_MspPostInit+0xa0>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d13a      	bne.n	80007ec <HAL_TIM_MspPostInit+0x98>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <HAL_TIM_MspPostInit+0xa4>)
 8000778:	695a      	ldr	r2, [r3, #20]
 800077a:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <HAL_TIM_MspPostInit+0xa4>)
 800077c:	2180      	movs	r1, #128	@ 0x80
 800077e:	0309      	lsls	r1, r1, #12
 8000780:	430a      	orrs	r2, r1
 8000782:	615a      	str	r2, [r3, #20]
 8000784:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <HAL_TIM_MspPostInit+0xa4>)
 8000786:	695a      	ldr	r2, [r3, #20]
 8000788:	2380      	movs	r3, #128	@ 0x80
 800078a:	031b      	lsls	r3, r3, #12
 800078c:	4013      	ands	r3, r2
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2280      	movs	r2, #128	@ 0x80
 8000796:	0052      	lsls	r2, r2, #1
 8000798:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	193b      	adds	r3, r7, r4
 800079c:	2202      	movs	r2, #2
 800079e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	2201      	movs	r2, #1
 80007b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	4a11      	ldr	r2, [pc, #68]	@ (80007fc <HAL_TIM_MspPostInit+0xa8>)
 80007b6:	0019      	movs	r1, r3
 80007b8:	0010      	movs	r0, r2
 80007ba:	f000 f9a5 	bl	8000b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007be:	0021      	movs	r1, r4
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2280      	movs	r2, #128	@ 0x80
 80007c4:	0092      	lsls	r2, r2, #2
 80007c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2202      	movs	r2, #2
 80007cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	4a06      	ldr	r2, [pc, #24]	@ (80007fc <HAL_TIM_MspPostInit+0xa8>)
 80007e4:	0019      	movs	r1, r3
 80007e6:	0010      	movs	r0, r2
 80007e8:	f000 f98e 	bl	8000b08 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80007ec:	46c0      	nop			@ (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b009      	add	sp, #36	@ 0x24
 80007f2:	bd90      	pop	{r4, r7, pc}
 80007f4:	40000400 	.word	0x40000400
 80007f8:	40021000 	.word	0x40021000
 80007fc:	48000800 	.word	0x48000800

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000804:	46c0      	nop			@ (mov r8, r8)
 8000806:	e7fd      	b.n	8000804 <NMI_Handler+0x4>

08000808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080c:	46c0      	nop			@ (mov r8, r8)
 800080e:	e7fd      	b.n	800080c <HardFault_Handler+0x4>

08000810 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000814:	46c0      	nop			@ (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000828:	f000 f87a 	bl	8000920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082c:	46c0      	nop			@ (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800083c:	480d      	ldr	r0, [pc, #52]	@ (8000874 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800083e:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000840:	f7ff fff7 	bl	8000832 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000844:	480c      	ldr	r0, [pc, #48]	@ (8000878 <LoopForever+0x6>)
  ldr r1, =_edata
 8000846:	490d      	ldr	r1, [pc, #52]	@ (800087c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000848:	4a0d      	ldr	r2, [pc, #52]	@ (8000880 <LoopForever+0xe>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800084c:	e002      	b.n	8000854 <LoopCopyDataInit>

0800084e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000852:	3304      	adds	r3, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000858:	d3f9      	bcc.n	800084e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085a:	4a0a      	ldr	r2, [pc, #40]	@ (8000884 <LoopForever+0x12>)
  ldr r4, =_ebss
 800085c:	4c0a      	ldr	r4, [pc, #40]	@ (8000888 <LoopForever+0x16>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000860:	e001      	b.n	8000866 <LoopFillZerobss>

08000862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000864:	3204      	adds	r2, #4

08000866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000868:	d3fb      	bcc.n	8000862 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800086a:	f002 fba9 	bl	8002fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086e:	f7ff fcd7 	bl	8000220 <main>

08000872 <LoopForever>:

LoopForever:
    b LoopForever
 8000872:	e7fe      	b.n	8000872 <LoopForever>
  ldr   r0, =_estack
 8000874:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800087c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000880:	08003058 	.word	0x08003058
  ldr r2, =_sbss
 8000884:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000888:	200000c8 	.word	0x200000c8

0800088c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC1_COMP_IRQHandler>
	...

08000890 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000894:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <HAL_Init+0x24>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <HAL_Init+0x24>)
 800089a:	2110      	movs	r1, #16
 800089c:	430a      	orrs	r2, r1
 800089e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008a0:	2000      	movs	r0, #0
 80008a2:	f000 f809 	bl	80008b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a6:	f7ff fec5 	bl	8000634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008aa:	2300      	movs	r3, #0
}
 80008ac:	0018      	movs	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			@ (mov r8, r8)
 80008b4:	40022000 	.word	0x40022000

080008b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <HAL_InitTick+0x5c>)
 80008c2:	681c      	ldr	r4, [r3, #0]
 80008c4:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <HAL_InitTick+0x60>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	0019      	movs	r1, r3
 80008ca:	23fa      	movs	r3, #250	@ 0xfa
 80008cc:	0098      	lsls	r0, r3, #2
 80008ce:	f7ff fc1b 	bl	8000108 <__udivsi3>
 80008d2:	0003      	movs	r3, r0
 80008d4:	0019      	movs	r1, r3
 80008d6:	0020      	movs	r0, r4
 80008d8:	f7ff fc16 	bl	8000108 <__udivsi3>
 80008dc:	0003      	movs	r3, r0
 80008de:	0018      	movs	r0, r3
 80008e0:	f000 f905 	bl	8000aee <HAL_SYSTICK_Config>
 80008e4:	1e03      	subs	r3, r0, #0
 80008e6:	d001      	beq.n	80008ec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008e8:	2301      	movs	r3, #1
 80008ea:	e00f      	b.n	800090c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	d80b      	bhi.n	800090a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	2301      	movs	r3, #1
 80008f6:	425b      	negs	r3, r3
 80008f8:	2200      	movs	r2, #0
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 f8e2 	bl	8000ac4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <HAL_InitTick+0x64>)
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000906:	2300      	movs	r3, #0
 8000908:	e000      	b.n	800090c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
}
 800090c:	0018      	movs	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	b003      	add	sp, #12
 8000912:	bd90      	pop	{r4, r7, pc}
 8000914:	20000000 	.word	0x20000000
 8000918:	20000008 	.word	0x20000008
 800091c:	20000004 	.word	0x20000004

08000920 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000924:	4b05      	ldr	r3, [pc, #20]	@ (800093c <HAL_IncTick+0x1c>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	001a      	movs	r2, r3
 800092a:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <HAL_IncTick+0x20>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	18d2      	adds	r2, r2, r3
 8000930:	4b03      	ldr	r3, [pc, #12]	@ (8000940 <HAL_IncTick+0x20>)
 8000932:	601a      	str	r2, [r3, #0]
}
 8000934:	46c0      	nop			@ (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			@ (mov r8, r8)
 800093c:	20000008 	.word	0x20000008
 8000940:	200000c4 	.word	0x200000c4

08000944 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  return uwTick;
 8000948:	4b02      	ldr	r3, [pc, #8]	@ (8000954 <HAL_GetTick+0x10>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	0018      	movs	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	200000c4 	.word	0x200000c4

08000958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000960:	f7ff fff0 	bl	8000944 <HAL_GetTick>
 8000964:	0003      	movs	r3, r0
 8000966:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	3301      	adds	r3, #1
 8000970:	d005      	beq.n	800097e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000972:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <HAL_Delay+0x44>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	001a      	movs	r2, r3
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	189b      	adds	r3, r3, r2
 800097c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	f7ff ffe0 	bl	8000944 <HAL_GetTick>
 8000984:	0002      	movs	r2, r0
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	429a      	cmp	r2, r3
 800098e:	d8f7      	bhi.n	8000980 <HAL_Delay+0x28>
  {
  }
}
 8000990:	46c0      	nop			@ (mov r8, r8)
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	b004      	add	sp, #16
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	20000008 	.word	0x20000008

080009a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	0002      	movs	r2, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80009b4:	d828      	bhi.n	8000a08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009b6:	4a2f      	ldr	r2, [pc, #188]	@ (8000a74 <__NVIC_SetPriority+0xd4>)
 80009b8:	1dfb      	adds	r3, r7, #7
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b25b      	sxtb	r3, r3
 80009be:	089b      	lsrs	r3, r3, #2
 80009c0:	33c0      	adds	r3, #192	@ 0xc0
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	589b      	ldr	r3, [r3, r2]
 80009c6:	1dfa      	adds	r2, r7, #7
 80009c8:	7812      	ldrb	r2, [r2, #0]
 80009ca:	0011      	movs	r1, r2
 80009cc:	2203      	movs	r2, #3
 80009ce:	400a      	ands	r2, r1
 80009d0:	00d2      	lsls	r2, r2, #3
 80009d2:	21ff      	movs	r1, #255	@ 0xff
 80009d4:	4091      	lsls	r1, r2
 80009d6:	000a      	movs	r2, r1
 80009d8:	43d2      	mvns	r2, r2
 80009da:	401a      	ands	r2, r3
 80009dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	019b      	lsls	r3, r3, #6
 80009e2:	22ff      	movs	r2, #255	@ 0xff
 80009e4:	401a      	ands	r2, r3
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	0018      	movs	r0, r3
 80009ec:	2303      	movs	r3, #3
 80009ee:	4003      	ands	r3, r0
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f4:	481f      	ldr	r0, [pc, #124]	@ (8000a74 <__NVIC_SetPriority+0xd4>)
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b25b      	sxtb	r3, r3
 80009fc:	089b      	lsrs	r3, r3, #2
 80009fe:	430a      	orrs	r2, r1
 8000a00:	33c0      	adds	r3, #192	@ 0xc0
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a06:	e031      	b.n	8000a6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a08:	4a1b      	ldr	r2, [pc, #108]	@ (8000a78 <__NVIC_SetPriority+0xd8>)
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	0019      	movs	r1, r3
 8000a10:	230f      	movs	r3, #15
 8000a12:	400b      	ands	r3, r1
 8000a14:	3b08      	subs	r3, #8
 8000a16:	089b      	lsrs	r3, r3, #2
 8000a18:	3306      	adds	r3, #6
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	18d3      	adds	r3, r2, r3
 8000a1e:	3304      	adds	r3, #4
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	1dfa      	adds	r2, r7, #7
 8000a24:	7812      	ldrb	r2, [r2, #0]
 8000a26:	0011      	movs	r1, r2
 8000a28:	2203      	movs	r2, #3
 8000a2a:	400a      	ands	r2, r1
 8000a2c:	00d2      	lsls	r2, r2, #3
 8000a2e:	21ff      	movs	r1, #255	@ 0xff
 8000a30:	4091      	lsls	r1, r2
 8000a32:	000a      	movs	r2, r1
 8000a34:	43d2      	mvns	r2, r2
 8000a36:	401a      	ands	r2, r3
 8000a38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	019b      	lsls	r3, r3, #6
 8000a3e:	22ff      	movs	r2, #255	@ 0xff
 8000a40:	401a      	ands	r2, r3
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	0018      	movs	r0, r3
 8000a48:	2303      	movs	r3, #3
 8000a4a:	4003      	ands	r3, r0
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a50:	4809      	ldr	r0, [pc, #36]	@ (8000a78 <__NVIC_SetPriority+0xd8>)
 8000a52:	1dfb      	adds	r3, r7, #7
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	001c      	movs	r4, r3
 8000a58:	230f      	movs	r3, #15
 8000a5a:	4023      	ands	r3, r4
 8000a5c:	3b08      	subs	r3, #8
 8000a5e:	089b      	lsrs	r3, r3, #2
 8000a60:	430a      	orrs	r2, r1
 8000a62:	3306      	adds	r3, #6
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	18c3      	adds	r3, r0, r3
 8000a68:	3304      	adds	r3, #4
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	46c0      	nop			@ (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b003      	add	sp, #12
 8000a72:	bd90      	pop	{r4, r7, pc}
 8000a74:	e000e100 	.word	0xe000e100
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	1e5a      	subs	r2, r3, #1
 8000a88:	2380      	movs	r3, #128	@ 0x80
 8000a8a:	045b      	lsls	r3, r3, #17
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d301      	bcc.n	8000a94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a90:	2301      	movs	r3, #1
 8000a92:	e010      	b.n	8000ab6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <SysTick_Config+0x44>)
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	3a01      	subs	r2, #1
 8000a9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	425b      	negs	r3, r3
 8000aa0:	2103      	movs	r1, #3
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff ff7c 	bl	80009a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa8:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <SysTick_Config+0x44>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aae:	4b04      	ldr	r3, [pc, #16]	@ (8000ac0 <SysTick_Config+0x44>)
 8000ab0:	2207      	movs	r2, #7
 8000ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b002      	add	sp, #8
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	e000e010 	.word	0xe000e010

08000ac4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
 8000ace:	210f      	movs	r1, #15
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	1c02      	adds	r2, r0, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	b25b      	sxtb	r3, r3
 8000ade:	0011      	movs	r1, r2
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff ff5d 	bl	80009a0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b004      	add	sp, #16
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	0018      	movs	r0, r3
 8000afa:	f7ff ffbf 	bl	8000a7c <SysTick_Config>
 8000afe:	0003      	movs	r3, r0
}
 8000b00:	0018      	movs	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b002      	add	sp, #8
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b16:	e14f      	b.n	8000db8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	697a      	ldr	r2, [r7, #20]
 8000b20:	4091      	lsls	r1, r2
 8000b22:	000a      	movs	r2, r1
 8000b24:	4013      	ands	r3, r2
 8000b26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d100      	bne.n	8000b30 <HAL_GPIO_Init+0x28>
 8000b2e:	e140      	b.n	8000db2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	2203      	movs	r2, #3
 8000b36:	4013      	ands	r3, r2
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d005      	beq.n	8000b48 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	2203      	movs	r2, #3
 8000b42:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d130      	bne.n	8000baa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	2203      	movs	r2, #3
 8000b54:	409a      	lsls	r2, r3
 8000b56:	0013      	movs	r3, r2
 8000b58:	43da      	mvns	r2, r3
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	68da      	ldr	r2, [r3, #12]
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	409a      	lsls	r2, r3
 8000b6a:	0013      	movs	r3, r2
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b7e:	2201      	movs	r2, #1
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
 8000b84:	0013      	movs	r3, r2
 8000b86:	43da      	mvns	r2, r3
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	091b      	lsrs	r3, r3, #4
 8000b94:	2201      	movs	r2, #1
 8000b96:	401a      	ands	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	409a      	lsls	r2, r3
 8000b9c:	0013      	movs	r3, r2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	2203      	movs	r2, #3
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d017      	beq.n	8000be6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	409a      	lsls	r2, r3
 8000bc4:	0013      	movs	r3, r2
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	689a      	ldr	r2, [r3, #8]
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	409a      	lsls	r2, r3
 8000bd8:	0013      	movs	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2203      	movs	r2, #3
 8000bec:	4013      	ands	r3, r2
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d123      	bne.n	8000c3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	08da      	lsrs	r2, r3, #3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3208      	adds	r2, #8
 8000bfa:	0092      	lsls	r2, r2, #2
 8000bfc:	58d3      	ldr	r3, [r2, r3]
 8000bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	2207      	movs	r2, #7
 8000c04:	4013      	ands	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	220f      	movs	r2, #15
 8000c0a:	409a      	lsls	r2, r3
 8000c0c:	0013      	movs	r3, r2
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	691a      	ldr	r2, [r3, #16]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	2107      	movs	r1, #7
 8000c1e:	400b      	ands	r3, r1
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	409a      	lsls	r2, r3
 8000c24:	0013      	movs	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	08da      	lsrs	r2, r3, #3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3208      	adds	r2, #8
 8000c34:	0092      	lsls	r2, r2, #2
 8000c36:	6939      	ldr	r1, [r7, #16]
 8000c38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	2203      	movs	r2, #3
 8000c46:	409a      	lsls	r2, r3
 8000c48:	0013      	movs	r3, r2
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2203      	movs	r2, #3
 8000c58:	401a      	ands	r2, r3
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	409a      	lsls	r2, r3
 8000c60:	0013      	movs	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	23c0      	movs	r3, #192	@ 0xc0
 8000c74:	029b      	lsls	r3, r3, #10
 8000c76:	4013      	ands	r3, r2
 8000c78:	d100      	bne.n	8000c7c <HAL_GPIO_Init+0x174>
 8000c7a:	e09a      	b.n	8000db2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7c:	4b54      	ldr	r3, [pc, #336]	@ (8000dd0 <HAL_GPIO_Init+0x2c8>)
 8000c7e:	699a      	ldr	r2, [r3, #24]
 8000c80:	4b53      	ldr	r3, [pc, #332]	@ (8000dd0 <HAL_GPIO_Init+0x2c8>)
 8000c82:	2101      	movs	r1, #1
 8000c84:	430a      	orrs	r2, r1
 8000c86:	619a      	str	r2, [r3, #24]
 8000c88:	4b51      	ldr	r3, [pc, #324]	@ (8000dd0 <HAL_GPIO_Init+0x2c8>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4013      	ands	r3, r2
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c94:	4a4f      	ldr	r2, [pc, #316]	@ (8000dd4 <HAL_GPIO_Init+0x2cc>)
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	089b      	lsrs	r3, r3, #2
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	589b      	ldr	r3, [r3, r2]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	220f      	movs	r2, #15
 8000cac:	409a      	lsls	r2, r3
 8000cae:	0013      	movs	r3, r2
 8000cb0:	43da      	mvns	r2, r3
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	2390      	movs	r3, #144	@ 0x90
 8000cbc:	05db      	lsls	r3, r3, #23
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d013      	beq.n	8000cea <HAL_GPIO_Init+0x1e2>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a44      	ldr	r2, [pc, #272]	@ (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d00d      	beq.n	8000ce6 <HAL_GPIO_Init+0x1de>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a43      	ldr	r2, [pc, #268]	@ (8000ddc <HAL_GPIO_Init+0x2d4>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d007      	beq.n	8000ce2 <HAL_GPIO_Init+0x1da>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a42      	ldr	r2, [pc, #264]	@ (8000de0 <HAL_GPIO_Init+0x2d8>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d101      	bne.n	8000cde <HAL_GPIO_Init+0x1d6>
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e006      	b.n	8000cec <HAL_GPIO_Init+0x1e4>
 8000cde:	2305      	movs	r3, #5
 8000ce0:	e004      	b.n	8000cec <HAL_GPIO_Init+0x1e4>
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	e002      	b.n	8000cec <HAL_GPIO_Init+0x1e4>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e000      	b.n	8000cec <HAL_GPIO_Init+0x1e4>
 8000cea:	2300      	movs	r3, #0
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	2103      	movs	r1, #3
 8000cf0:	400a      	ands	r2, r1
 8000cf2:	0092      	lsls	r2, r2, #2
 8000cf4:	4093      	lsls	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cfc:	4935      	ldr	r1, [pc, #212]	@ (8000dd4 <HAL_GPIO_Init+0x2cc>)
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	089b      	lsrs	r3, r3, #2
 8000d02:	3302      	adds	r3, #2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d0a:	4b36      	ldr	r3, [pc, #216]	@ (8000de4 <HAL_GPIO_Init+0x2dc>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	43da      	mvns	r2, r3
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	2380      	movs	r3, #128	@ 0x80
 8000d20:	035b      	lsls	r3, r3, #13
 8000d22:	4013      	ands	r3, r2
 8000d24:	d003      	beq.n	8000d2e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <HAL_GPIO_Init+0x2dc>)
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d34:	4b2b      	ldr	r3, [pc, #172]	@ (8000de4 <HAL_GPIO_Init+0x2dc>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	43da      	mvns	r2, r3
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	2380      	movs	r3, #128	@ 0x80
 8000d4a:	039b      	lsls	r3, r3, #14
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	d003      	beq.n	8000d58 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d58:	4b22      	ldr	r3, [pc, #136]	@ (8000de4 <HAL_GPIO_Init+0x2dc>)
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000d5e:	4b21      	ldr	r3, [pc, #132]	@ (8000de4 <HAL_GPIO_Init+0x2dc>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	43da      	mvns	r2, r3
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685a      	ldr	r2, [r3, #4]
 8000d72:	2380      	movs	r3, #128	@ 0x80
 8000d74:	029b      	lsls	r3, r3, #10
 8000d76:	4013      	ands	r3, r2
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d82:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <HAL_GPIO_Init+0x2dc>)
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000d88:	4b16      	ldr	r3, [pc, #88]	@ (8000de4 <HAL_GPIO_Init+0x2dc>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	43da      	mvns	r2, r3
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	2380      	movs	r3, #128	@ 0x80
 8000d9e:	025b      	lsls	r3, r3, #9
 8000da0:	4013      	ands	r3, r2
 8000da2:	d003      	beq.n	8000dac <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dac:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <HAL_GPIO_Init+0x2dc>)
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	3301      	adds	r3, #1
 8000db6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	40da      	lsrs	r2, r3
 8000dc0:	1e13      	subs	r3, r2, #0
 8000dc2:	d000      	beq.n	8000dc6 <HAL_GPIO_Init+0x2be>
 8000dc4:	e6a8      	b.n	8000b18 <HAL_GPIO_Init+0x10>
  } 
}
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	46c0      	nop			@ (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b006      	add	sp, #24
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010000 	.word	0x40010000
 8000dd8:	48000400 	.word	0x48000400
 8000ddc:	48000800 	.word	0x48000800
 8000de0:	48000c00 	.word	0x48000c00
 8000de4:	40010400 	.word	0x40010400

08000de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	0008      	movs	r0, r1
 8000df2:	0011      	movs	r1, r2
 8000df4:	1cbb      	adds	r3, r7, #2
 8000df6:	1c02      	adds	r2, r0, #0
 8000df8:	801a      	strh	r2, [r3, #0]
 8000dfa:	1c7b      	adds	r3, r7, #1
 8000dfc:	1c0a      	adds	r2, r1, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e00:	1c7b      	adds	r3, r7, #1
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d004      	beq.n	8000e12 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e08:	1cbb      	adds	r3, r7, #2
 8000e0a:	881a      	ldrh	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e10:	e003      	b.n	8000e1a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e12:	1cbb      	adds	r3, r7, #2
 8000e14:	881a      	ldrh	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b002      	add	sp, #8
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d101      	bne.n	8000e36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e08f      	b.n	8000f56 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2241      	movs	r2, #65	@ 0x41
 8000e3a:	5c9b      	ldrb	r3, [r3, r2]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d107      	bne.n	8000e52 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2240      	movs	r2, #64	@ 0x40
 8000e46:	2100      	movs	r1, #0
 8000e48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff fc15 	bl	800067c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2241      	movs	r2, #65	@ 0x41
 8000e56:	2124      	movs	r1, #36	@ 0x24
 8000e58:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2101      	movs	r1, #1
 8000e66:	438a      	bics	r2, r1
 8000e68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	493b      	ldr	r1, [pc, #236]	@ (8000f60 <HAL_I2C_Init+0x13c>)
 8000e74:	400a      	ands	r2, r1
 8000e76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4938      	ldr	r1, [pc, #224]	@ (8000f64 <HAL_I2C_Init+0x140>)
 8000e84:	400a      	ands	r2, r1
 8000e86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d108      	bne.n	8000ea2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2180      	movs	r1, #128	@ 0x80
 8000e9a:	0209      	lsls	r1, r1, #8
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	e007      	b.n	8000eb2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2184      	movs	r1, #132	@ 0x84
 8000eac:	0209      	lsls	r1, r1, #8
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d109      	bne.n	8000ece <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2180      	movs	r1, #128	@ 0x80
 8000ec6:	0109      	lsls	r1, r1, #4
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	e007      	b.n	8000ede <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4923      	ldr	r1, [pc, #140]	@ (8000f68 <HAL_I2C_Init+0x144>)
 8000eda:	400a      	ands	r2, r1
 8000edc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4920      	ldr	r1, [pc, #128]	@ (8000f6c <HAL_I2C_Init+0x148>)
 8000eea:	430a      	orrs	r2, r1
 8000eec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	68da      	ldr	r2, [r3, #12]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	491a      	ldr	r1, [pc, #104]	@ (8000f64 <HAL_I2C_Init+0x140>)
 8000efa:	400a      	ands	r2, r1
 8000efc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	691a      	ldr	r2, [r3, #16]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	431a      	orrs	r2, r3
 8000f08:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69d9      	ldr	r1, [r3, #28]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a1a      	ldr	r2, [r3, #32]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	430a      	orrs	r2, r1
 8000f26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2101      	movs	r1, #1
 8000f34:	430a      	orrs	r2, r1
 8000f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2241      	movs	r2, #65	@ 0x41
 8000f42:	2120      	movs	r1, #32
 8000f44:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2242      	movs	r2, #66	@ 0x42
 8000f50:	2100      	movs	r1, #0
 8000f52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	0018      	movs	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	f0ffffff 	.word	0xf0ffffff
 8000f64:	ffff7fff 	.word	0xffff7fff
 8000f68:	fffff7ff 	.word	0xfffff7ff
 8000f6c:	02008000 	.word	0x02008000

08000f70 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b089      	sub	sp, #36	@ 0x24
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	000c      	movs	r4, r1
 8000f7a:	0010      	movs	r0, r2
 8000f7c:	0019      	movs	r1, r3
 8000f7e:	230a      	movs	r3, #10
 8000f80:	18fb      	adds	r3, r7, r3
 8000f82:	1c22      	adds	r2, r4, #0
 8000f84:	801a      	strh	r2, [r3, #0]
 8000f86:	2308      	movs	r3, #8
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	1c02      	adds	r2, r0, #0
 8000f8c:	801a      	strh	r2, [r3, #0]
 8000f8e:	1dbb      	adds	r3, r7, #6
 8000f90:	1c0a      	adds	r2, r1, #0
 8000f92:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2241      	movs	r2, #65	@ 0x41
 8000f98:	5c9b      	ldrb	r3, [r3, r2]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b20      	cmp	r3, #32
 8000f9e:	d000      	beq.n	8000fa2 <HAL_I2C_Mem_Read+0x32>
 8000fa0:	e110      	b.n	80011c4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8000fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d004      	beq.n	8000fb2 <HAL_I2C_Mem_Read+0x42>
 8000fa8:	232c      	movs	r3, #44	@ 0x2c
 8000faa:	18fb      	adds	r3, r7, r3
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d105      	bne.n	8000fbe <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2280      	movs	r2, #128	@ 0x80
 8000fb6:	0092      	lsls	r2, r2, #2
 8000fb8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e103      	b.n	80011c6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2240      	movs	r2, #64	@ 0x40
 8000fc2:	5c9b      	ldrb	r3, [r3, r2]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d101      	bne.n	8000fcc <HAL_I2C_Mem_Read+0x5c>
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e0fc      	b.n	80011c6 <HAL_I2C_Mem_Read+0x256>
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2240      	movs	r2, #64	@ 0x40
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000fd4:	f7ff fcb6 	bl	8000944 <HAL_GetTick>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000fdc:	2380      	movs	r3, #128	@ 0x80
 8000fde:	0219      	lsls	r1, r3, #8
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2319      	movs	r3, #25
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f000 f979 	bl	80012e0 <I2C_WaitOnFlagUntilTimeout>
 8000fee:	1e03      	subs	r3, r0, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e0e7      	b.n	80011c6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2241      	movs	r2, #65	@ 0x41
 8000ffa:	2122      	movs	r1, #34	@ 0x22
 8000ffc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2242      	movs	r2, #66	@ 0x42
 8001002:	2140      	movs	r1, #64	@ 0x40
 8001004:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2200      	movs	r2, #0
 800100a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001010:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	222c      	movs	r2, #44	@ 0x2c
 8001016:	18ba      	adds	r2, r7, r2
 8001018:	8812      	ldrh	r2, [r2, #0]
 800101a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2200      	movs	r2, #0
 8001020:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001022:	1dbb      	adds	r3, r7, #6
 8001024:	881c      	ldrh	r4, [r3, #0]
 8001026:	2308      	movs	r3, #8
 8001028:	18fb      	adds	r3, r7, r3
 800102a:	881a      	ldrh	r2, [r3, #0]
 800102c:	230a      	movs	r3, #10
 800102e:	18fb      	adds	r3, r7, r3
 8001030:	8819      	ldrh	r1, [r3, #0]
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	0023      	movs	r3, r4
 800103e:	f000 f8cb 	bl	80011d8 <I2C_RequestMemoryRead>
 8001042:	1e03      	subs	r3, r0, #0
 8001044:	d005      	beq.n	8001052 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2240      	movs	r2, #64	@ 0x40
 800104a:	2100      	movs	r1, #0
 800104c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e0b9      	b.n	80011c6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001056:	b29b      	uxth	r3, r3
 8001058:	2bff      	cmp	r3, #255	@ 0xff
 800105a:	d911      	bls.n	8001080 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2201      	movs	r2, #1
 8001060:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001066:	b2da      	uxtb	r2, r3
 8001068:	2380      	movs	r3, #128	@ 0x80
 800106a:	045c      	lsls	r4, r3, #17
 800106c:	230a      	movs	r3, #10
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	8819      	ldrh	r1, [r3, #0]
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	4b56      	ldr	r3, [pc, #344]	@ (80011d0 <HAL_I2C_Mem_Read+0x260>)
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	0023      	movs	r3, r4
 800107a:	f000 fb0b 	bl	8001694 <I2C_TransferConfig>
 800107e:	e012      	b.n	80010a6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001084:	b29a      	uxth	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800108e:	b2da      	uxtb	r2, r3
 8001090:	2380      	movs	r3, #128	@ 0x80
 8001092:	049c      	lsls	r4, r3, #18
 8001094:	230a      	movs	r3, #10
 8001096:	18fb      	adds	r3, r7, r3
 8001098:	8819      	ldrh	r1, [r3, #0]
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	4b4c      	ldr	r3, [pc, #304]	@ (80011d0 <HAL_I2C_Mem_Read+0x260>)
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	0023      	movs	r3, r4
 80010a2:	f000 faf7 	bl	8001694 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80010a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	0013      	movs	r3, r2
 80010b0:	2200      	movs	r2, #0
 80010b2:	2104      	movs	r1, #4
 80010b4:	f000 f914 	bl	80012e0 <I2C_WaitOnFlagUntilTimeout>
 80010b8:	1e03      	subs	r3, r0, #0
 80010ba:	d001      	beq.n	80010c0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e082      	b.n	80011c6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010dc:	3b01      	subs	r3, #1
 80010de:	b29a      	uxth	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	3b01      	subs	r3, #1
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d03a      	beq.n	8001172 <HAL_I2C_Mem_Read+0x202>
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001100:	2b00      	cmp	r3, #0
 8001102:	d136      	bne.n	8001172 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	0013      	movs	r3, r2
 800110e:	2200      	movs	r2, #0
 8001110:	2180      	movs	r1, #128	@ 0x80
 8001112:	f000 f8e5 	bl	80012e0 <I2C_WaitOnFlagUntilTimeout>
 8001116:	1e03      	subs	r3, r0, #0
 8001118:	d001      	beq.n	800111e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e053      	b.n	80011c6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001122:	b29b      	uxth	r3, r3
 8001124:	2bff      	cmp	r3, #255	@ 0xff
 8001126:	d911      	bls.n	800114c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2201      	movs	r2, #1
 800112c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001132:	b2da      	uxtb	r2, r3
 8001134:	2380      	movs	r3, #128	@ 0x80
 8001136:	045c      	lsls	r4, r3, #17
 8001138:	230a      	movs	r3, #10
 800113a:	18fb      	adds	r3, r7, r3
 800113c:	8819      	ldrh	r1, [r3, #0]
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	2300      	movs	r3, #0
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	0023      	movs	r3, r4
 8001146:	f000 faa5 	bl	8001694 <I2C_TransferConfig>
 800114a:	e012      	b.n	8001172 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001150:	b29a      	uxth	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800115a:	b2da      	uxtb	r2, r3
 800115c:	2380      	movs	r3, #128	@ 0x80
 800115e:	049c      	lsls	r4, r3, #18
 8001160:	230a      	movs	r3, #10
 8001162:	18fb      	adds	r3, r7, r3
 8001164:	8819      	ldrh	r1, [r3, #0]
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	2300      	movs	r3, #0
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	0023      	movs	r3, r4
 800116e:	f000 fa91 	bl	8001694 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001176:	b29b      	uxth	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	d194      	bne.n	80010a6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	0018      	movs	r0, r3
 8001184:	f000 f94a 	bl	800141c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001188:	1e03      	subs	r3, r0, #0
 800118a:	d001      	beq.n	8001190 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e01a      	b.n	80011c6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2220      	movs	r2, #32
 8001196:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	490c      	ldr	r1, [pc, #48]	@ (80011d4 <HAL_I2C_Mem_Read+0x264>)
 80011a4:	400a      	ands	r2, r1
 80011a6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2241      	movs	r2, #65	@ 0x41
 80011ac:	2120      	movs	r1, #32
 80011ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2242      	movs	r2, #66	@ 0x42
 80011b4:	2100      	movs	r1, #0
 80011b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2240      	movs	r2, #64	@ 0x40
 80011bc:	2100      	movs	r1, #0
 80011be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	e000      	b.n	80011c6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80011c4:	2302      	movs	r3, #2
  }
}
 80011c6:	0018      	movs	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b007      	add	sp, #28
 80011cc:	bd90      	pop	{r4, r7, pc}
 80011ce:	46c0      	nop			@ (mov r8, r8)
 80011d0:	80002400 	.word	0x80002400
 80011d4:	fe00e800 	.word	0xfe00e800

080011d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80011d8:	b5b0      	push	{r4, r5, r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af02      	add	r7, sp, #8
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	000c      	movs	r4, r1
 80011e2:	0010      	movs	r0, r2
 80011e4:	0019      	movs	r1, r3
 80011e6:	250a      	movs	r5, #10
 80011e8:	197b      	adds	r3, r7, r5
 80011ea:	1c22      	adds	r2, r4, #0
 80011ec:	801a      	strh	r2, [r3, #0]
 80011ee:	2308      	movs	r3, #8
 80011f0:	18fb      	adds	r3, r7, r3
 80011f2:	1c02      	adds	r2, r0, #0
 80011f4:	801a      	strh	r2, [r3, #0]
 80011f6:	1dbb      	adds	r3, r7, #6
 80011f8:	1c0a      	adds	r2, r1, #0
 80011fa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80011fc:	1dbb      	adds	r3, r7, #6
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	197b      	adds	r3, r7, r5
 8001204:	8819      	ldrh	r1, [r3, #0]
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	4b23      	ldr	r3, [pc, #140]	@ (8001298 <I2C_RequestMemoryRead+0xc0>)
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2300      	movs	r3, #0
 800120e:	f000 fa41 	bl	8001694 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001214:	6a39      	ldr	r1, [r7, #32]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	0018      	movs	r0, r3
 800121a:	f000 f8b9 	bl	8001390 <I2C_WaitOnTXISFlagUntilTimeout>
 800121e:	1e03      	subs	r3, r0, #0
 8001220:	d001      	beq.n	8001226 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e033      	b.n	800128e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001226:	1dbb      	adds	r3, r7, #6
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d107      	bne.n	800123e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800122e:	2308      	movs	r3, #8
 8001230:	18fb      	adds	r3, r7, r3
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	629a      	str	r2, [r3, #40]	@ 0x28
 800123c:	e019      	b.n	8001272 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800123e:	2308      	movs	r3, #8
 8001240:	18fb      	adds	r3, r7, r3
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	b29b      	uxth	r3, r3
 8001248:	b2da      	uxtb	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001252:	6a39      	ldr	r1, [r7, #32]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	0018      	movs	r0, r3
 8001258:	f000 f89a 	bl	8001390 <I2C_WaitOnTXISFlagUntilTimeout>
 800125c:	1e03      	subs	r3, r0, #0
 800125e:	d001      	beq.n	8001264 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e014      	b.n	800128e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001264:	2308      	movs	r3, #8
 8001266:	18fb      	adds	r3, r7, r3
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001272:	6a3a      	ldr	r2, [r7, #32]
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	0013      	movs	r3, r2
 800127c:	2200      	movs	r2, #0
 800127e:	2140      	movs	r1, #64	@ 0x40
 8001280:	f000 f82e 	bl	80012e0 <I2C_WaitOnFlagUntilTimeout>
 8001284:	1e03      	subs	r3, r0, #0
 8001286:	d001      	beq.n	800128c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	0018      	movs	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	b004      	add	sp, #16
 8001294:	bdb0      	pop	{r4, r5, r7, pc}
 8001296:	46c0      	nop			@ (mov r8, r8)
 8001298:	80002000 	.word	0x80002000

0800129c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	2202      	movs	r2, #2
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d103      	bne.n	80012ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2200      	movs	r2, #0
 80012b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	2201      	movs	r2, #1
 80012c2:	4013      	ands	r3, r2
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d007      	beq.n	80012d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	699a      	ldr	r2, [r3, #24]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2101      	movs	r1, #1
 80012d4:	430a      	orrs	r2, r1
 80012d6:	619a      	str	r2, [r3, #24]
  }
}
 80012d8:	46c0      	nop			@ (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	b002      	add	sp, #8
 80012de:	bd80      	pop	{r7, pc}

080012e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	1dfb      	adds	r3, r7, #7
 80012ee:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012f0:	e03a      	b.n	8001368 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	6839      	ldr	r1, [r7, #0]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	0018      	movs	r0, r3
 80012fa:	f000 f8d3 	bl	80014a4 <I2C_IsErrorOccurred>
 80012fe:	1e03      	subs	r3, r0, #0
 8001300:	d001      	beq.n	8001306 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e040      	b.n	8001388 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	3301      	adds	r3, #1
 800130a:	d02d      	beq.n	8001368 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800130c:	f7ff fb1a 	bl	8000944 <HAL_GetTick>
 8001310:	0002      	movs	r2, r0
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	429a      	cmp	r2, r3
 800131a:	d302      	bcc.n	8001322 <I2C_WaitOnFlagUntilTimeout+0x42>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d122      	bne.n	8001368 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	4013      	ands	r3, r2
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	425a      	negs	r2, r3
 8001332:	4153      	adcs	r3, r2
 8001334:	b2db      	uxtb	r3, r3
 8001336:	001a      	movs	r2, r3
 8001338:	1dfb      	adds	r3, r7, #7
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	429a      	cmp	r2, r3
 800133e:	d113      	bne.n	8001368 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001344:	2220      	movs	r2, #32
 8001346:	431a      	orrs	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2241      	movs	r2, #65	@ 0x41
 8001350:	2120      	movs	r1, #32
 8001352:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2242      	movs	r2, #66	@ 0x42
 8001358:	2100      	movs	r1, #0
 800135a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2240      	movs	r2, #64	@ 0x40
 8001360:	2100      	movs	r1, #0
 8001362:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e00f      	b.n	8001388 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	4013      	ands	r3, r2
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	425a      	negs	r2, r3
 8001378:	4153      	adcs	r3, r2
 800137a:	b2db      	uxtb	r3, r3
 800137c:	001a      	movs	r2, r3
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	d0b5      	beq.n	80012f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	b004      	add	sp, #16
 800138e:	bd80      	pop	{r7, pc}

08001390 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800139c:	e032      	b.n	8001404 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	68b9      	ldr	r1, [r7, #8]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f000 f87d 	bl	80014a4 <I2C_IsErrorOccurred>
 80013aa:	1e03      	subs	r3, r0, #0
 80013ac:	d001      	beq.n	80013b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e030      	b.n	8001414 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	3301      	adds	r3, #1
 80013b6:	d025      	beq.n	8001404 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013b8:	f7ff fac4 	bl	8000944 <HAL_GetTick>
 80013bc:	0002      	movs	r2, r0
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d302      	bcc.n	80013ce <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d11a      	bne.n	8001404 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	2202      	movs	r2, #2
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d013      	beq.n	8001404 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e0:	2220      	movs	r2, #32
 80013e2:	431a      	orrs	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2241      	movs	r2, #65	@ 0x41
 80013ec:	2120      	movs	r1, #32
 80013ee:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2242      	movs	r2, #66	@ 0x42
 80013f4:	2100      	movs	r1, #0
 80013f6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2240      	movs	r2, #64	@ 0x40
 80013fc:	2100      	movs	r1, #0
 80013fe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e007      	b.n	8001414 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	2202      	movs	r2, #2
 800140c:	4013      	ands	r3, r2
 800140e:	2b02      	cmp	r3, #2
 8001410:	d1c5      	bne.n	800139e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	b004      	add	sp, #16
 800141a:	bd80      	pop	{r7, pc}

0800141c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001428:	e02f      	b.n	800148a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	0018      	movs	r0, r3
 8001432:	f000 f837 	bl	80014a4 <I2C_IsErrorOccurred>
 8001436:	1e03      	subs	r3, r0, #0
 8001438:	d001      	beq.n	800143e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e02d      	b.n	800149a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800143e:	f7ff fa81 	bl	8000944 <HAL_GetTick>
 8001442:	0002      	movs	r2, r0
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	429a      	cmp	r2, r3
 800144c:	d302      	bcc.n	8001454 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d11a      	bne.n	800148a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	2220      	movs	r2, #32
 800145c:	4013      	ands	r3, r2
 800145e:	2b20      	cmp	r3, #32
 8001460:	d013      	beq.n	800148a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	2220      	movs	r2, #32
 8001468:	431a      	orrs	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2241      	movs	r2, #65	@ 0x41
 8001472:	2120      	movs	r1, #32
 8001474:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2242      	movs	r2, #66	@ 0x42
 800147a:	2100      	movs	r1, #0
 800147c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2240      	movs	r2, #64	@ 0x40
 8001482:	2100      	movs	r1, #0
 8001484:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e007      	b.n	800149a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	2220      	movs	r2, #32
 8001492:	4013      	ands	r3, r2
 8001494:	2b20      	cmp	r3, #32
 8001496:	d1c8      	bne.n	800142a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	0018      	movs	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	b004      	add	sp, #16
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	@ 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b0:	2327      	movs	r3, #39	@ 0x27
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2210      	movs	r2, #16
 80014cc:	4013      	ands	r3, r2
 80014ce:	d100      	bne.n	80014d2 <I2C_IsErrorOccurred+0x2e>
 80014d0:	e079      	b.n	80015c6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2210      	movs	r2, #16
 80014d8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80014da:	e057      	b.n	800158c <I2C_IsErrorOccurred+0xe8>
 80014dc:	2227      	movs	r2, #39	@ 0x27
 80014de:	18bb      	adds	r3, r7, r2
 80014e0:	18ba      	adds	r2, r7, r2
 80014e2:	7812      	ldrb	r2, [r2, #0]
 80014e4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	3301      	adds	r3, #1
 80014ea:	d04f      	beq.n	800158c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80014ec:	f7ff fa2a 	bl	8000944 <HAL_GetTick>
 80014f0:	0002      	movs	r2, r0
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d302      	bcc.n	8001502 <I2C_IsErrorOccurred+0x5e>
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d144      	bne.n	800158c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	2380      	movs	r3, #128	@ 0x80
 800150a:	01db      	lsls	r3, r3, #7
 800150c:	4013      	ands	r3, r2
 800150e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001510:	2013      	movs	r0, #19
 8001512:	183b      	adds	r3, r7, r0
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	2142      	movs	r1, #66	@ 0x42
 8001518:	5c52      	ldrb	r2, [r2, r1]
 800151a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	699a      	ldr	r2, [r3, #24]
 8001522:	2380      	movs	r3, #128	@ 0x80
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	401a      	ands	r2, r3
 8001528:	2380      	movs	r3, #128	@ 0x80
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	429a      	cmp	r2, r3
 800152e:	d126      	bne.n	800157e <I2C_IsErrorOccurred+0xda>
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	2380      	movs	r3, #128	@ 0x80
 8001534:	01db      	lsls	r3, r3, #7
 8001536:	429a      	cmp	r2, r3
 8001538:	d021      	beq.n	800157e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800153a:	183b      	adds	r3, r7, r0
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b20      	cmp	r3, #32
 8001540:	d01d      	beq.n	800157e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2180      	movs	r1, #128	@ 0x80
 800154e:	01c9      	lsls	r1, r1, #7
 8001550:	430a      	orrs	r2, r1
 8001552:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001554:	f7ff f9f6 	bl	8000944 <HAL_GetTick>
 8001558:	0003      	movs	r3, r0
 800155a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800155c:	e00f      	b.n	800157e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800155e:	f7ff f9f1 	bl	8000944 <HAL_GetTick>
 8001562:	0002      	movs	r2, r0
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b19      	cmp	r3, #25
 800156a:	d908      	bls.n	800157e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800156c:	6a3b      	ldr	r3, [r7, #32]
 800156e:	2220      	movs	r2, #32
 8001570:	4313      	orrs	r3, r2
 8001572:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001574:	2327      	movs	r3, #39	@ 0x27
 8001576:	18fb      	adds	r3, r7, r3
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]

              break;
 800157c:	e006      	b.n	800158c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	2220      	movs	r2, #32
 8001586:	4013      	ands	r3, r2
 8001588:	2b20      	cmp	r3, #32
 800158a:	d1e8      	bne.n	800155e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2220      	movs	r2, #32
 8001594:	4013      	ands	r3, r2
 8001596:	2b20      	cmp	r3, #32
 8001598:	d004      	beq.n	80015a4 <I2C_IsErrorOccurred+0x100>
 800159a:	2327      	movs	r3, #39	@ 0x27
 800159c:	18fb      	adds	r3, r7, r3
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d09b      	beq.n	80014dc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80015a4:	2327      	movs	r3, #39	@ 0x27
 80015a6:	18fb      	adds	r3, r7, r3
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d103      	bne.n	80015b6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2220      	movs	r2, #32
 80015b4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80015b6:	6a3b      	ldr	r3, [r7, #32]
 80015b8:	2204      	movs	r2, #4
 80015ba:	4313      	orrs	r3, r2
 80015bc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80015be:	2327      	movs	r3, #39	@ 0x27
 80015c0:	18fb      	adds	r3, r7, r3
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	2380      	movs	r3, #128	@ 0x80
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4013      	ands	r3, r2
 80015d6:	d00c      	beq.n	80015f2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80015d8:	6a3b      	ldr	r3, [r7, #32]
 80015da:	2201      	movs	r2, #1
 80015dc:	4313      	orrs	r3, r2
 80015de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2280      	movs	r2, #128	@ 0x80
 80015e6:	0052      	lsls	r2, r2, #1
 80015e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80015ea:	2327      	movs	r3, #39	@ 0x27
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	2380      	movs	r3, #128	@ 0x80
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4013      	ands	r3, r2
 80015fa:	d00c      	beq.n	8001616 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	2208      	movs	r2, #8
 8001600:	4313      	orrs	r3, r2
 8001602:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2280      	movs	r2, #128	@ 0x80
 800160a:	00d2      	lsls	r2, r2, #3
 800160c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800160e:	2327      	movs	r3, #39	@ 0x27
 8001610:	18fb      	adds	r3, r7, r3
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	2380      	movs	r3, #128	@ 0x80
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4013      	ands	r3, r2
 800161e:	d00c      	beq.n	800163a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	2202      	movs	r2, #2
 8001624:	4313      	orrs	r3, r2
 8001626:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2280      	movs	r2, #128	@ 0x80
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001632:	2327      	movs	r3, #39	@ 0x27
 8001634:	18fb      	adds	r3, r7, r3
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800163a:	2327      	movs	r3, #39	@ 0x27
 800163c:	18fb      	adds	r3, r7, r3
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d01d      	beq.n	8001680 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	0018      	movs	r0, r3
 8001648:	f7ff fe28 	bl	800129c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	490e      	ldr	r1, [pc, #56]	@ (8001690 <I2C_IsErrorOccurred+0x1ec>)
 8001658:	400a      	ands	r2, r1
 800165a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	431a      	orrs	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2241      	movs	r2, #65	@ 0x41
 800166c:	2120      	movs	r1, #32
 800166e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2242      	movs	r2, #66	@ 0x42
 8001674:	2100      	movs	r1, #0
 8001676:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2240      	movs	r2, #64	@ 0x40
 800167c:	2100      	movs	r1, #0
 800167e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001680:	2327      	movs	r3, #39	@ 0x27
 8001682:	18fb      	adds	r3, r7, r3
 8001684:	781b      	ldrb	r3, [r3, #0]
}
 8001686:	0018      	movs	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	b00a      	add	sp, #40	@ 0x28
 800168c:	bd80      	pop	{r7, pc}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	fe00e800 	.word	0xfe00e800

08001694 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	0008      	movs	r0, r1
 800169e:	0011      	movs	r1, r2
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	240a      	movs	r4, #10
 80016a4:	193b      	adds	r3, r7, r4
 80016a6:	1c02      	adds	r2, r0, #0
 80016a8:	801a      	strh	r2, [r3, #0]
 80016aa:	2009      	movs	r0, #9
 80016ac:	183b      	adds	r3, r7, r0
 80016ae:	1c0a      	adds	r2, r1, #0
 80016b0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80016b2:	193b      	adds	r3, r7, r4
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	059b      	lsls	r3, r3, #22
 80016b8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80016ba:	183b      	adds	r3, r7, r0
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	0419      	lsls	r1, r3, #16
 80016c0:	23ff      	movs	r3, #255	@ 0xff
 80016c2:	041b      	lsls	r3, r3, #16
 80016c4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80016c6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80016cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ce:	4313      	orrs	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	085b      	lsrs	r3, r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016de:	0d51      	lsrs	r1, r2, #21
 80016e0:	2280      	movs	r2, #128	@ 0x80
 80016e2:	00d2      	lsls	r2, r2, #3
 80016e4:	400a      	ands	r2, r1
 80016e6:	4907      	ldr	r1, [pc, #28]	@ (8001704 <I2C_TransferConfig+0x70>)
 80016e8:	430a      	orrs	r2, r1
 80016ea:	43d2      	mvns	r2, r2
 80016ec:	401a      	ands	r2, r3
 80016ee:	0011      	movs	r1, r2
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80016fa:	46c0      	nop			@ (mov r8, r8)
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b007      	add	sp, #28
 8001700:	bd90      	pop	{r4, r7, pc}
 8001702:	46c0      	nop			@ (mov r8, r8)
 8001704:	03ff63ff 	.word	0x03ff63ff

08001708 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2241      	movs	r2, #65	@ 0x41
 8001716:	5c9b      	ldrb	r3, [r3, r2]
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b20      	cmp	r3, #32
 800171c:	d138      	bne.n	8001790 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2240      	movs	r2, #64	@ 0x40
 8001722:	5c9b      	ldrb	r3, [r3, r2]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d101      	bne.n	800172c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001728:	2302      	movs	r3, #2
 800172a:	e032      	b.n	8001792 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2240      	movs	r2, #64	@ 0x40
 8001730:	2101      	movs	r1, #1
 8001732:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2241      	movs	r2, #65	@ 0x41
 8001738:	2124      	movs	r1, #36	@ 0x24
 800173a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2101      	movs	r1, #1
 8001748:	438a      	bics	r2, r1
 800174a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4911      	ldr	r1, [pc, #68]	@ (800179c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001758:	400a      	ands	r2, r1
 800175a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6819      	ldr	r1, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2101      	movs	r1, #1
 8001778:	430a      	orrs	r2, r1
 800177a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2241      	movs	r2, #65	@ 0x41
 8001780:	2120      	movs	r1, #32
 8001782:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2240      	movs	r2, #64	@ 0x40
 8001788:	2100      	movs	r1, #0
 800178a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	e000      	b.n	8001792 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001790:	2302      	movs	r3, #2
  }
}
 8001792:	0018      	movs	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	b002      	add	sp, #8
 8001798:	bd80      	pop	{r7, pc}
 800179a:	46c0      	nop			@ (mov r8, r8)
 800179c:	ffffefff 	.word	0xffffefff

080017a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2241      	movs	r2, #65	@ 0x41
 80017ae:	5c9b      	ldrb	r3, [r3, r2]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b20      	cmp	r3, #32
 80017b4:	d139      	bne.n	800182a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2240      	movs	r2, #64	@ 0x40
 80017ba:	5c9b      	ldrb	r3, [r3, r2]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e033      	b.n	800182c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2240      	movs	r2, #64	@ 0x40
 80017c8:	2101      	movs	r1, #1
 80017ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2241      	movs	r2, #65	@ 0x41
 80017d0:	2124      	movs	r1, #36	@ 0x24
 80017d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2101      	movs	r1, #1
 80017e0:	438a      	bics	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4a11      	ldr	r2, [pc, #68]	@ (8001834 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2101      	movs	r1, #1
 8001812:	430a      	orrs	r2, r1
 8001814:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2241      	movs	r2, #65	@ 0x41
 800181a:	2120      	movs	r1, #32
 800181c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2240      	movs	r2, #64	@ 0x40
 8001822:	2100      	movs	r1, #0
 8001824:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	e000      	b.n	800182c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800182a:	2302      	movs	r3, #2
  }
}
 800182c:	0018      	movs	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	b004      	add	sp, #16
 8001832:	bd80      	pop	{r7, pc}
 8001834:	fffff0ff 	.word	0xfffff0ff

08001838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e301      	b.n	8001e4e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2201      	movs	r2, #1
 8001850:	4013      	ands	r3, r2
 8001852:	d100      	bne.n	8001856 <HAL_RCC_OscConfig+0x1e>
 8001854:	e08d      	b.n	8001972 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001856:	4bc3      	ldr	r3, [pc, #780]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	220c      	movs	r2, #12
 800185c:	4013      	ands	r3, r2
 800185e:	2b04      	cmp	r3, #4
 8001860:	d00e      	beq.n	8001880 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001862:	4bc0      	ldr	r3, [pc, #768]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	220c      	movs	r2, #12
 8001868:	4013      	ands	r3, r2
 800186a:	2b08      	cmp	r3, #8
 800186c:	d116      	bne.n	800189c <HAL_RCC_OscConfig+0x64>
 800186e:	4bbd      	ldr	r3, [pc, #756]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	2380      	movs	r3, #128	@ 0x80
 8001874:	025b      	lsls	r3, r3, #9
 8001876:	401a      	ands	r2, r3
 8001878:	2380      	movs	r3, #128	@ 0x80
 800187a:	025b      	lsls	r3, r3, #9
 800187c:	429a      	cmp	r2, r3
 800187e:	d10d      	bne.n	800189c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001880:	4bb8      	ldr	r3, [pc, #736]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	2380      	movs	r3, #128	@ 0x80
 8001886:	029b      	lsls	r3, r3, #10
 8001888:	4013      	ands	r3, r2
 800188a:	d100      	bne.n	800188e <HAL_RCC_OscConfig+0x56>
 800188c:	e070      	b.n	8001970 <HAL_RCC_OscConfig+0x138>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d000      	beq.n	8001898 <HAL_RCC_OscConfig+0x60>
 8001896:	e06b      	b.n	8001970 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e2d8      	b.n	8001e4e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d107      	bne.n	80018b4 <HAL_RCC_OscConfig+0x7c>
 80018a4:	4baf      	ldr	r3, [pc, #700]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4bae      	ldr	r3, [pc, #696]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 80018aa:	2180      	movs	r1, #128	@ 0x80
 80018ac:	0249      	lsls	r1, r1, #9
 80018ae:	430a      	orrs	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	e02f      	b.n	8001914 <HAL_RCC_OscConfig+0xdc>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10c      	bne.n	80018d6 <HAL_RCC_OscConfig+0x9e>
 80018bc:	4ba9      	ldr	r3, [pc, #676]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4ba8      	ldr	r3, [pc, #672]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 80018c2:	49a9      	ldr	r1, [pc, #676]	@ (8001b68 <HAL_RCC_OscConfig+0x330>)
 80018c4:	400a      	ands	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	4ba6      	ldr	r3, [pc, #664]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4ba5      	ldr	r3, [pc, #660]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 80018ce:	49a7      	ldr	r1, [pc, #668]	@ (8001b6c <HAL_RCC_OscConfig+0x334>)
 80018d0:	400a      	ands	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	e01e      	b.n	8001914 <HAL_RCC_OscConfig+0xdc>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b05      	cmp	r3, #5
 80018dc:	d10e      	bne.n	80018fc <HAL_RCC_OscConfig+0xc4>
 80018de:	4ba1      	ldr	r3, [pc, #644]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4ba0      	ldr	r3, [pc, #640]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 80018e4:	2180      	movs	r1, #128	@ 0x80
 80018e6:	02c9      	lsls	r1, r1, #11
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	4b9d      	ldr	r3, [pc, #628]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b9c      	ldr	r3, [pc, #624]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 80018f2:	2180      	movs	r1, #128	@ 0x80
 80018f4:	0249      	lsls	r1, r1, #9
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0xdc>
 80018fc:	4b99      	ldr	r3, [pc, #612]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b98      	ldr	r3, [pc, #608]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001902:	4999      	ldr	r1, [pc, #612]	@ (8001b68 <HAL_RCC_OscConfig+0x330>)
 8001904:	400a      	ands	r2, r1
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	4b96      	ldr	r3, [pc, #600]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b95      	ldr	r3, [pc, #596]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 800190e:	4997      	ldr	r1, [pc, #604]	@ (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001910:	400a      	ands	r2, r1
 8001912:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d014      	beq.n	8001946 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff f812 	bl	8000944 <HAL_GetTick>
 8001920:	0003      	movs	r3, r0
 8001922:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001926:	f7ff f80d 	bl	8000944 <HAL_GetTick>
 800192a:	0002      	movs	r2, r0
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b64      	cmp	r3, #100	@ 0x64
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e28a      	b.n	8001e4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001938:	4b8a      	ldr	r3, [pc, #552]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	2380      	movs	r3, #128	@ 0x80
 800193e:	029b      	lsls	r3, r3, #10
 8001940:	4013      	ands	r3, r2
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0xee>
 8001944:	e015      	b.n	8001972 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001946:	f7fe fffd 	bl	8000944 <HAL_GetTick>
 800194a:	0003      	movs	r3, r0
 800194c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001950:	f7fe fff8 	bl	8000944 <HAL_GetTick>
 8001954:	0002      	movs	r2, r0
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	@ 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e275      	b.n	8001e4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001962:	4b80      	ldr	r3, [pc, #512]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	2380      	movs	r3, #128	@ 0x80
 8001968:	029b      	lsls	r3, r3, #10
 800196a:	4013      	ands	r3, r2
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x118>
 800196e:	e000      	b.n	8001972 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2202      	movs	r2, #2
 8001978:	4013      	ands	r3, r2
 800197a:	d100      	bne.n	800197e <HAL_RCC_OscConfig+0x146>
 800197c:	e069      	b.n	8001a52 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800197e:	4b79      	ldr	r3, [pc, #484]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	220c      	movs	r2, #12
 8001984:	4013      	ands	r3, r2
 8001986:	d00b      	beq.n	80019a0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001988:	4b76      	ldr	r3, [pc, #472]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	220c      	movs	r2, #12
 800198e:	4013      	ands	r3, r2
 8001990:	2b08      	cmp	r3, #8
 8001992:	d11c      	bne.n	80019ce <HAL_RCC_OscConfig+0x196>
 8001994:	4b73      	ldr	r3, [pc, #460]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	2380      	movs	r3, #128	@ 0x80
 800199a:	025b      	lsls	r3, r3, #9
 800199c:	4013      	ands	r3, r2
 800199e:	d116      	bne.n	80019ce <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a0:	4b70      	ldr	r3, [pc, #448]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2202      	movs	r2, #2
 80019a6:	4013      	ands	r3, r2
 80019a8:	d005      	beq.n	80019b6 <HAL_RCC_OscConfig+0x17e>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e24b      	b.n	8001e4e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b6:	4b6b      	ldr	r3, [pc, #428]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	22f8      	movs	r2, #248	@ 0xf8
 80019bc:	4393      	bics	r3, r2
 80019be:	0019      	movs	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	00da      	lsls	r2, r3, #3
 80019c6:	4b67      	ldr	r3, [pc, #412]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019cc:	e041      	b.n	8001a52 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d024      	beq.n	8001a20 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d6:	4b63      	ldr	r3, [pc, #396]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4b62      	ldr	r3, [pc, #392]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 80019dc:	2101      	movs	r1, #1
 80019de:	430a      	orrs	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7fe ffaf 	bl	8000944 <HAL_GetTick>
 80019e6:	0003      	movs	r3, r0
 80019e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ec:	f7fe ffaa 	bl	8000944 <HAL_GetTick>
 80019f0:	0002      	movs	r2, r0
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e227      	b.n	8001e4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fe:	4b59      	ldr	r3, [pc, #356]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2202      	movs	r2, #2
 8001a04:	4013      	ands	r3, r2
 8001a06:	d0f1      	beq.n	80019ec <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a08:	4b56      	ldr	r3, [pc, #344]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	22f8      	movs	r2, #248	@ 0xf8
 8001a0e:	4393      	bics	r3, r2
 8001a10:	0019      	movs	r1, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	00da      	lsls	r2, r3, #3
 8001a18:	4b52      	ldr	r3, [pc, #328]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	e018      	b.n	8001a52 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a20:	4b50      	ldr	r3, [pc, #320]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b4f      	ldr	r3, [pc, #316]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001a26:	2101      	movs	r1, #1
 8001a28:	438a      	bics	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7fe ff8a 	bl	8000944 <HAL_GetTick>
 8001a30:	0003      	movs	r3, r0
 8001a32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a36:	f7fe ff85 	bl	8000944 <HAL_GetTick>
 8001a3a:	0002      	movs	r2, r0
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e202      	b.n	8001e4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a48:	4b46      	ldr	r3, [pc, #280]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d1f1      	bne.n	8001a36 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2208      	movs	r2, #8
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d036      	beq.n	8001aca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d019      	beq.n	8001a98 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a64:	4b3f      	ldr	r3, [pc, #252]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001a66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a68:	4b3e      	ldr	r3, [pc, #248]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a70:	f7fe ff68 	bl	8000944 <HAL_GetTick>
 8001a74:	0003      	movs	r3, r0
 8001a76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7a:	f7fe ff63 	bl	8000944 <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e1e0      	b.n	8001e4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8c:	4b35      	ldr	r3, [pc, #212]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a90:	2202      	movs	r2, #2
 8001a92:	4013      	ands	r3, r2
 8001a94:	d0f1      	beq.n	8001a7a <HAL_RCC_OscConfig+0x242>
 8001a96:	e018      	b.n	8001aca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a98:	4b32      	ldr	r3, [pc, #200]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001a9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a9c:	4b31      	ldr	r3, [pc, #196]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	438a      	bics	r2, r1
 8001aa2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa4:	f7fe ff4e 	bl	8000944 <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aae:	f7fe ff49 	bl	8000944 <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e1c6      	b.n	8001e4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac0:	4b28      	ldr	r3, [pc, #160]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d1f1      	bne.n	8001aae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2204      	movs	r2, #4
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d100      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x29e>
 8001ad4:	e0b4      	b.n	8001c40 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad6:	201f      	movs	r0, #31
 8001ad8:	183b      	adds	r3, r7, r0
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ade:	4b21      	ldr	r3, [pc, #132]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001ae0:	69da      	ldr	r2, [r3, #28]
 8001ae2:	2380      	movs	r3, #128	@ 0x80
 8001ae4:	055b      	lsls	r3, r3, #21
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d110      	bne.n	8001b0c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	4b1e      	ldr	r3, [pc, #120]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001aec:	69da      	ldr	r2, [r3, #28]
 8001aee:	4b1d      	ldr	r3, [pc, #116]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001af0:	2180      	movs	r1, #128	@ 0x80
 8001af2:	0549      	lsls	r1, r1, #21
 8001af4:	430a      	orrs	r2, r1
 8001af6:	61da      	str	r2, [r3, #28]
 8001af8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001afa:	69da      	ldr	r2, [r3, #28]
 8001afc:	2380      	movs	r3, #128	@ 0x80
 8001afe:	055b      	lsls	r3, r3, #21
 8001b00:	4013      	ands	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b06:	183b      	adds	r3, r7, r0
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0c:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	2380      	movs	r3, #128	@ 0x80
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4013      	ands	r3, r2
 8001b16:	d11a      	bne.n	8001b4e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b18:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001b1e:	2180      	movs	r1, #128	@ 0x80
 8001b20:	0049      	lsls	r1, r1, #1
 8001b22:	430a      	orrs	r2, r1
 8001b24:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b26:	f7fe ff0d 	bl	8000944 <HAL_GetTick>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b30:	f7fe ff08 	bl	8000944 <HAL_GetTick>
 8001b34:	0002      	movs	r2, r0
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b64      	cmp	r3, #100	@ 0x64
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e185      	b.n	8001e4e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b42:	4b0b      	ldr	r3, [pc, #44]	@ (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	2380      	movs	r3, #128	@ 0x80
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d10e      	bne.n	8001b74 <HAL_RCC_OscConfig+0x33c>
 8001b56:	4b03      	ldr	r3, [pc, #12]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001b58:	6a1a      	ldr	r2, [r3, #32]
 8001b5a:	4b02      	ldr	r3, [pc, #8]	@ (8001b64 <HAL_RCC_OscConfig+0x32c>)
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	621a      	str	r2, [r3, #32]
 8001b62:	e035      	b.n	8001bd0 <HAL_RCC_OscConfig+0x398>
 8001b64:	40021000 	.word	0x40021000
 8001b68:	fffeffff 	.word	0xfffeffff
 8001b6c:	fffbffff 	.word	0xfffbffff
 8001b70:	40007000 	.word	0x40007000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10c      	bne.n	8001b96 <HAL_RCC_OscConfig+0x35e>
 8001b7c:	4bb6      	ldr	r3, [pc, #728]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001b7e:	6a1a      	ldr	r2, [r3, #32]
 8001b80:	4bb5      	ldr	r3, [pc, #724]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001b82:	2101      	movs	r1, #1
 8001b84:	438a      	bics	r2, r1
 8001b86:	621a      	str	r2, [r3, #32]
 8001b88:	4bb3      	ldr	r3, [pc, #716]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001b8a:	6a1a      	ldr	r2, [r3, #32]
 8001b8c:	4bb2      	ldr	r3, [pc, #712]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001b8e:	2104      	movs	r1, #4
 8001b90:	438a      	bics	r2, r1
 8001b92:	621a      	str	r2, [r3, #32]
 8001b94:	e01c      	b.n	8001bd0 <HAL_RCC_OscConfig+0x398>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b05      	cmp	r3, #5
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x380>
 8001b9e:	4bae      	ldr	r3, [pc, #696]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001ba0:	6a1a      	ldr	r2, [r3, #32]
 8001ba2:	4bad      	ldr	r3, [pc, #692]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001ba4:	2104      	movs	r1, #4
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	621a      	str	r2, [r3, #32]
 8001baa:	4bab      	ldr	r3, [pc, #684]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001bac:	6a1a      	ldr	r2, [r3, #32]
 8001bae:	4baa      	ldr	r3, [pc, #680]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	621a      	str	r2, [r3, #32]
 8001bb6:	e00b      	b.n	8001bd0 <HAL_RCC_OscConfig+0x398>
 8001bb8:	4ba7      	ldr	r3, [pc, #668]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001bba:	6a1a      	ldr	r2, [r3, #32]
 8001bbc:	4ba6      	ldr	r3, [pc, #664]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	438a      	bics	r2, r1
 8001bc2:	621a      	str	r2, [r3, #32]
 8001bc4:	4ba4      	ldr	r3, [pc, #656]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001bc6:	6a1a      	ldr	r2, [r3, #32]
 8001bc8:	4ba3      	ldr	r3, [pc, #652]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001bca:	2104      	movs	r1, #4
 8001bcc:	438a      	bics	r2, r1
 8001bce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d014      	beq.n	8001c02 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd8:	f7fe feb4 	bl	8000944 <HAL_GetTick>
 8001bdc:	0003      	movs	r3, r0
 8001bde:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be0:	e009      	b.n	8001bf6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be2:	f7fe feaf 	bl	8000944 <HAL_GetTick>
 8001be6:	0002      	movs	r2, r0
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	4a9b      	ldr	r2, [pc, #620]	@ (8001e5c <HAL_RCC_OscConfig+0x624>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e12b      	b.n	8001e4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf6:	4b98      	ldr	r3, [pc, #608]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x3aa>
 8001c00:	e013      	b.n	8001c2a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c02:	f7fe fe9f 	bl	8000944 <HAL_GetTick>
 8001c06:	0003      	movs	r3, r0
 8001c08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0a:	e009      	b.n	8001c20 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c0c:	f7fe fe9a 	bl	8000944 <HAL_GetTick>
 8001c10:	0002      	movs	r2, r0
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	4a91      	ldr	r2, [pc, #580]	@ (8001e5c <HAL_RCC_OscConfig+0x624>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e116      	b.n	8001e4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c20:	4b8d      	ldr	r3, [pc, #564]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	2202      	movs	r2, #2
 8001c26:	4013      	ands	r3, r2
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c2a:	231f      	movs	r3, #31
 8001c2c:	18fb      	adds	r3, r7, r3
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d105      	bne.n	8001c40 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c34:	4b88      	ldr	r3, [pc, #544]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001c36:	69da      	ldr	r2, [r3, #28]
 8001c38:	4b87      	ldr	r3, [pc, #540]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001c3a:	4989      	ldr	r1, [pc, #548]	@ (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2210      	movs	r2, #16
 8001c46:	4013      	ands	r3, r2
 8001c48:	d063      	beq.n	8001d12 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d12a      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c52:	4b81      	ldr	r3, [pc, #516]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001c54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c56:	4b80      	ldr	r3, [pc, #512]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001c58:	2104      	movs	r1, #4
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001c5e:	4b7e      	ldr	r3, [pc, #504]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001c60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c62:	4b7d      	ldr	r3, [pc, #500]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001c64:	2101      	movs	r1, #1
 8001c66:	430a      	orrs	r2, r1
 8001c68:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6a:	f7fe fe6b 	bl	8000944 <HAL_GetTick>
 8001c6e:	0003      	movs	r3, r0
 8001c70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c74:	f7fe fe66 	bl	8000944 <HAL_GetTick>
 8001c78:	0002      	movs	r2, r0
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e0e3      	b.n	8001e4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c86:	4b74      	ldr	r3, [pc, #464]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d0f1      	beq.n	8001c74 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c90:	4b71      	ldr	r3, [pc, #452]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c94:	22f8      	movs	r2, #248	@ 0xf8
 8001c96:	4393      	bics	r3, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	00da      	lsls	r2, r3, #3
 8001ca0:	4b6d      	ldr	r3, [pc, #436]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ca6:	e034      	b.n	8001d12 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	3305      	adds	r3, #5
 8001cae:	d111      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001cb0:	4b69      	ldr	r3, [pc, #420]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001cb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cb4:	4b68      	ldr	r3, [pc, #416]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001cb6:	2104      	movs	r1, #4
 8001cb8:	438a      	bics	r2, r1
 8001cba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001cbc:	4b66      	ldr	r3, [pc, #408]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cc0:	22f8      	movs	r2, #248	@ 0xf8
 8001cc2:	4393      	bics	r3, r2
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	00da      	lsls	r2, r3, #3
 8001ccc:	4b62      	ldr	r3, [pc, #392]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cd2:	e01e      	b.n	8001d12 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001cd4:	4b60      	ldr	r3, [pc, #384]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001cd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cd8:	4b5f      	ldr	r3, [pc, #380]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001cda:	2104      	movs	r1, #4
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001ce0:	4b5d      	ldr	r3, [pc, #372]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001ce2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ce4:	4b5c      	ldr	r3, [pc, #368]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	438a      	bics	r2, r1
 8001cea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cec:	f7fe fe2a 	bl	8000944 <HAL_GetTick>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001cf6:	f7fe fe25 	bl	8000944 <HAL_GetTick>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e0a2      	b.n	8001e4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d08:	4b53      	ldr	r3, [pc, #332]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d1f1      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d100      	bne.n	8001d1c <HAL_RCC_OscConfig+0x4e4>
 8001d1a:	e097      	b.n	8001e4c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d1c:	4b4e      	ldr	r3, [pc, #312]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	220c      	movs	r2, #12
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d100      	bne.n	8001d2a <HAL_RCC_OscConfig+0x4f2>
 8001d28:	e06b      	b.n	8001e02 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d14c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d32:	4b49      	ldr	r3, [pc, #292]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	4b48      	ldr	r3, [pc, #288]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001d38:	494a      	ldr	r1, [pc, #296]	@ (8001e64 <HAL_RCC_OscConfig+0x62c>)
 8001d3a:	400a      	ands	r2, r1
 8001d3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3e:	f7fe fe01 	bl	8000944 <HAL_GetTick>
 8001d42:	0003      	movs	r3, r0
 8001d44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d48:	f7fe fdfc 	bl	8000944 <HAL_GetTick>
 8001d4c:	0002      	movs	r2, r0
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e079      	b.n	8001e4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	2380      	movs	r3, #128	@ 0x80
 8001d60:	049b      	lsls	r3, r3, #18
 8001d62:	4013      	ands	r3, r2
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d66:	4b3c      	ldr	r3, [pc, #240]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6a:	220f      	movs	r2, #15
 8001d6c:	4393      	bics	r3, r2
 8001d6e:	0019      	movs	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d74:	4b38      	ldr	r3, [pc, #224]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001d76:	430a      	orrs	r2, r1
 8001d78:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d7a:	4b37      	ldr	r3, [pc, #220]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	4a3a      	ldr	r2, [pc, #232]	@ (8001e68 <HAL_RCC_OscConfig+0x630>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	0019      	movs	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	4b32      	ldr	r3, [pc, #200]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001d90:	430a      	orrs	r2, r1
 8001d92:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d94:	4b30      	ldr	r3, [pc, #192]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b2f      	ldr	r3, [pc, #188]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001d9a:	2180      	movs	r1, #128	@ 0x80
 8001d9c:	0449      	lsls	r1, r1, #17
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7fe fdcf 	bl	8000944 <HAL_GetTick>
 8001da6:	0003      	movs	r3, r0
 8001da8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dac:	f7fe fdca 	bl	8000944 <HAL_GetTick>
 8001db0:	0002      	movs	r2, r0
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e047      	b.n	8001e4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dbe:	4b26      	ldr	r3, [pc, #152]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	2380      	movs	r3, #128	@ 0x80
 8001dc4:	049b      	lsls	r3, r3, #18
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0x574>
 8001dca:	e03f      	b.n	8001e4c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dcc:	4b22      	ldr	r3, [pc, #136]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b21      	ldr	r3, [pc, #132]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001dd2:	4924      	ldr	r1, [pc, #144]	@ (8001e64 <HAL_RCC_OscConfig+0x62c>)
 8001dd4:	400a      	ands	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7fe fdb4 	bl	8000944 <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de2:	f7fe fdaf 	bl	8000944 <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e02c      	b.n	8001e4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df4:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	@ 0x80
 8001dfa:	049b      	lsls	r3, r3, #18
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d1f0      	bne.n	8001de2 <HAL_RCC_OscConfig+0x5aa>
 8001e00:	e024      	b.n	8001e4c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e01f      	b.n	8001e4e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001e0e:	4b12      	ldr	r3, [pc, #72]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001e14:	4b10      	ldr	r3, [pc, #64]	@ (8001e58 <HAL_RCC_OscConfig+0x620>)
 8001e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e18:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	2380      	movs	r3, #128	@ 0x80
 8001e1e:	025b      	lsls	r3, r3, #9
 8001e20:	401a      	ands	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d10e      	bne.n	8001e48 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	401a      	ands	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d107      	bne.n	8001e48 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	23f0      	movs	r3, #240	@ 0xf0
 8001e3c:	039b      	lsls	r3, r3, #14
 8001e3e:	401a      	ands	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	0018      	movs	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	b008      	add	sp, #32
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	46c0      	nop			@ (mov r8, r8)
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	00001388 	.word	0x00001388
 8001e60:	efffffff 	.word	0xefffffff
 8001e64:	feffffff 	.word	0xfeffffff
 8001e68:	ffc2ffff 	.word	0xffc2ffff

08001e6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0b3      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e80:	4b5b      	ldr	r3, [pc, #364]	@ (8001ff0 <HAL_RCC_ClockConfig+0x184>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2201      	movs	r2, #1
 8001e86:	4013      	ands	r3, r2
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d911      	bls.n	8001eb2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b58      	ldr	r3, [pc, #352]	@ (8001ff0 <HAL_RCC_ClockConfig+0x184>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2201      	movs	r2, #1
 8001e94:	4393      	bics	r3, r2
 8001e96:	0019      	movs	r1, r3
 8001e98:	4b55      	ldr	r3, [pc, #340]	@ (8001ff0 <HAL_RCC_ClockConfig+0x184>)
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea0:	4b53      	ldr	r3, [pc, #332]	@ (8001ff0 <HAL_RCC_ClockConfig+0x184>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d001      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e09a      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d015      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d006      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ec6:	4b4b      	ldr	r3, [pc, #300]	@ (8001ff4 <HAL_RCC_ClockConfig+0x188>)
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4b4a      	ldr	r3, [pc, #296]	@ (8001ff4 <HAL_RCC_ClockConfig+0x188>)
 8001ecc:	21e0      	movs	r1, #224	@ 0xe0
 8001ece:	00c9      	lsls	r1, r1, #3
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed4:	4b47      	ldr	r3, [pc, #284]	@ (8001ff4 <HAL_RCC_ClockConfig+0x188>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	22f0      	movs	r2, #240	@ 0xf0
 8001eda:	4393      	bics	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	4b44      	ldr	r3, [pc, #272]	@ (8001ff4 <HAL_RCC_ClockConfig+0x188>)
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2201      	movs	r2, #1
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d040      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d107      	bne.n	8001f0a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	4b3e      	ldr	r3, [pc, #248]	@ (8001ff4 <HAL_RCC_ClockConfig+0x188>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	2380      	movs	r3, #128	@ 0x80
 8001f00:	029b      	lsls	r3, r3, #10
 8001f02:	4013      	ands	r3, r2
 8001f04:	d114      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e06e      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d107      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f12:	4b38      	ldr	r3, [pc, #224]	@ (8001ff4 <HAL_RCC_ClockConfig+0x188>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	2380      	movs	r3, #128	@ 0x80
 8001f18:	049b      	lsls	r3, r3, #18
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d108      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e062      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f22:	4b34      	ldr	r3, [pc, #208]	@ (8001ff4 <HAL_RCC_ClockConfig+0x188>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2202      	movs	r2, #2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e05b      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f30:	4b30      	ldr	r3, [pc, #192]	@ (8001ff4 <HAL_RCC_ClockConfig+0x188>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2203      	movs	r2, #3
 8001f36:	4393      	bics	r3, r2
 8001f38:	0019      	movs	r1, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff4 <HAL_RCC_ClockConfig+0x188>)
 8001f40:	430a      	orrs	r2, r1
 8001f42:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f44:	f7fe fcfe 	bl	8000944 <HAL_GetTick>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4c:	e009      	b.n	8001f62 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4e:	f7fe fcf9 	bl	8000944 <HAL_GetTick>
 8001f52:	0002      	movs	r2, r0
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	4a27      	ldr	r2, [pc, #156]	@ (8001ff8 <HAL_RCC_ClockConfig+0x18c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e042      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	4b24      	ldr	r3, [pc, #144]	@ (8001ff4 <HAL_RCC_ClockConfig+0x188>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	220c      	movs	r2, #12
 8001f68:	401a      	ands	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d1ec      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f74:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff0 <HAL_RCC_ClockConfig+0x184>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d211      	bcs.n	8001fa6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f82:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff0 <HAL_RCC_ClockConfig+0x184>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2201      	movs	r2, #1
 8001f88:	4393      	bics	r3, r2
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	4b18      	ldr	r3, [pc, #96]	@ (8001ff0 <HAL_RCC_ClockConfig+0x184>)
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f94:	4b16      	ldr	r3, [pc, #88]	@ (8001ff0 <HAL_RCC_ClockConfig+0x184>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d001      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e020      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2204      	movs	r2, #4
 8001fac:	4013      	ands	r3, r2
 8001fae:	d009      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb0:	4b10      	ldr	r3, [pc, #64]	@ (8001ff4 <HAL_RCC_ClockConfig+0x188>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	4a11      	ldr	r2, [pc, #68]	@ (8001ffc <HAL_RCC_ClockConfig+0x190>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	0019      	movs	r1, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff4 <HAL_RCC_ClockConfig+0x188>)
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fc4:	f000 f820 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8001fc8:	0001      	movs	r1, r0
 8001fca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <HAL_RCC_ClockConfig+0x188>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	220f      	movs	r2, #15
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8002000 <HAL_RCC_ClockConfig+0x194>)
 8001fd6:	5cd3      	ldrb	r3, [r2, r3]
 8001fd8:	000a      	movs	r2, r1
 8001fda:	40da      	lsrs	r2, r3
 8001fdc:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <HAL_RCC_ClockConfig+0x198>)
 8001fde:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7fe fc69 	bl	80008b8 <HAL_InitTick>
  
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b004      	add	sp, #16
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40022000 	.word	0x40022000
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	00001388 	.word	0x00001388
 8001ffc:	fffff8ff 	.word	0xfffff8ff
 8002000:	08003020 	.word	0x08003020
 8002004:	20000000 	.word	0x20000000

08002008 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002022:	4b20      	ldr	r3, [pc, #128]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	220c      	movs	r2, #12
 800202c:	4013      	ands	r3, r2
 800202e:	2b04      	cmp	r3, #4
 8002030:	d002      	beq.n	8002038 <HAL_RCC_GetSysClockFreq+0x30>
 8002032:	2b08      	cmp	r3, #8
 8002034:	d003      	beq.n	800203e <HAL_RCC_GetSysClockFreq+0x36>
 8002036:	e02c      	b.n	8002092 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002038:	4b1b      	ldr	r3, [pc, #108]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800203a:	613b      	str	r3, [r7, #16]
      break;
 800203c:	e02c      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	0c9b      	lsrs	r3, r3, #18
 8002042:	220f      	movs	r2, #15
 8002044:	4013      	ands	r3, r2
 8002046:	4a19      	ldr	r2, [pc, #100]	@ (80020ac <HAL_RCC_GetSysClockFreq+0xa4>)
 8002048:	5cd3      	ldrb	r3, [r2, r3]
 800204a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800204c:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800204e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002050:	220f      	movs	r2, #15
 8002052:	4013      	ands	r3, r2
 8002054:	4a16      	ldr	r2, [pc, #88]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002056:	5cd3      	ldrb	r3, [r2, r3]
 8002058:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	2380      	movs	r3, #128	@ 0x80
 800205e:	025b      	lsls	r3, r3, #9
 8002060:	4013      	ands	r3, r2
 8002062:	d009      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	4810      	ldr	r0, [pc, #64]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002068:	f7fe f84e 	bl	8000108 <__udivsi3>
 800206c:	0003      	movs	r3, r0
 800206e:	001a      	movs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4353      	muls	r3, r2
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	e009      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	000a      	movs	r2, r1
 800207c:	0152      	lsls	r2, r2, #5
 800207e:	1a52      	subs	r2, r2, r1
 8002080:	0193      	lsls	r3, r2, #6
 8002082:	1a9b      	subs	r3, r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	185b      	adds	r3, r3, r1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	613b      	str	r3, [r7, #16]
      break;
 8002090:	e002      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002092:	4b05      	ldr	r3, [pc, #20]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002094:	613b      	str	r3, [r7, #16]
      break;
 8002096:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002098:	693b      	ldr	r3, [r7, #16]
}
 800209a:	0018      	movs	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	b006      	add	sp, #24
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	46c0      	nop			@ (mov r8, r8)
 80020a4:	40021000 	.word	0x40021000
 80020a8:	007a1200 	.word	0x007a1200
 80020ac:	08003030 	.word	0x08003030
 80020b0:	08003040 	.word	0x08003040

080020b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	2380      	movs	r3, #128	@ 0x80
 80020ca:	025b      	lsls	r3, r3, #9
 80020cc:	4013      	ands	r3, r2
 80020ce:	d100      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80020d0:	e08e      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80020d2:	2017      	movs	r0, #23
 80020d4:	183b      	adds	r3, r7, r0
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020da:	4b5f      	ldr	r3, [pc, #380]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020dc:	69da      	ldr	r2, [r3, #28]
 80020de:	2380      	movs	r3, #128	@ 0x80
 80020e0:	055b      	lsls	r3, r3, #21
 80020e2:	4013      	ands	r3, r2
 80020e4:	d110      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020e8:	69da      	ldr	r2, [r3, #28]
 80020ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020ec:	2180      	movs	r1, #128	@ 0x80
 80020ee:	0549      	lsls	r1, r1, #21
 80020f0:	430a      	orrs	r2, r1
 80020f2:	61da      	str	r2, [r3, #28]
 80020f4:	4b58      	ldr	r3, [pc, #352]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020f6:	69da      	ldr	r2, [r3, #28]
 80020f8:	2380      	movs	r3, #128	@ 0x80
 80020fa:	055b      	lsls	r3, r3, #21
 80020fc:	4013      	ands	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002102:	183b      	adds	r3, r7, r0
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	4b54      	ldr	r3, [pc, #336]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	2380      	movs	r3, #128	@ 0x80
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4013      	ands	r3, r2
 8002112:	d11a      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002114:	4b51      	ldr	r3, [pc, #324]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b50      	ldr	r3, [pc, #320]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800211a:	2180      	movs	r1, #128	@ 0x80
 800211c:	0049      	lsls	r1, r1, #1
 800211e:	430a      	orrs	r2, r1
 8002120:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002122:	f7fe fc0f 	bl	8000944 <HAL_GetTick>
 8002126:	0003      	movs	r3, r0
 8002128:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212a:	e008      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212c:	f7fe fc0a 	bl	8000944 <HAL_GetTick>
 8002130:	0002      	movs	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b64      	cmp	r3, #100	@ 0x64
 8002138:	d901      	bls.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e087      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213e:	4b47      	ldr	r3, [pc, #284]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	2380      	movs	r3, #128	@ 0x80
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4013      	ands	r3, r2
 8002148:	d0f0      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800214a:	4b43      	ldr	r3, [pc, #268]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800214c:	6a1a      	ldr	r2, [r3, #32]
 800214e:	23c0      	movs	r3, #192	@ 0xc0
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4013      	ands	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d034      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	23c0      	movs	r3, #192	@ 0xc0
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4013      	ands	r3, r2
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	429a      	cmp	r2, r3
 800216a:	d02c      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800216c:	4b3a      	ldr	r3, [pc, #232]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	4a3b      	ldr	r2, [pc, #236]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002172:	4013      	ands	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002176:	4b38      	ldr	r3, [pc, #224]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002178:	6a1a      	ldr	r2, [r3, #32]
 800217a:	4b37      	ldr	r3, [pc, #220]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800217c:	2180      	movs	r1, #128	@ 0x80
 800217e:	0249      	lsls	r1, r1, #9
 8002180:	430a      	orrs	r2, r1
 8002182:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002184:	4b34      	ldr	r3, [pc, #208]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002186:	6a1a      	ldr	r2, [r3, #32]
 8002188:	4b33      	ldr	r3, [pc, #204]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800218a:	4936      	ldr	r1, [pc, #216]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800218c:	400a      	ands	r2, r1
 800218e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002190:	4b31      	ldr	r3, [pc, #196]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	4013      	ands	r3, r2
 800219c:	d013      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219e:	f7fe fbd1 	bl	8000944 <HAL_GetTick>
 80021a2:	0003      	movs	r3, r0
 80021a4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a6:	e009      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a8:	f7fe fbcc 	bl	8000944 <HAL_GetTick>
 80021ac:	0002      	movs	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	4a2d      	ldr	r2, [pc, #180]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d901      	bls.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e048      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021bc:	4b26      	ldr	r3, [pc, #152]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	2202      	movs	r2, #2
 80021c2:	4013      	ands	r3, r2
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021c6:	4b24      	ldr	r3, [pc, #144]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	4a25      	ldr	r2, [pc, #148]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	0019      	movs	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	4b20      	ldr	r3, [pc, #128]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021d6:	430a      	orrs	r2, r1
 80021d8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021da:	2317      	movs	r3, #23
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d105      	bne.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021e6:	69da      	ldr	r2, [r3, #28]
 80021e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021ea:	4920      	ldr	r1, [pc, #128]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021ec:	400a      	ands	r2, r1
 80021ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2201      	movs	r2, #1
 80021f6:	4013      	ands	r3, r2
 80021f8:	d009      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021fa:	4b17      	ldr	r3, [pc, #92]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	2203      	movs	r2, #3
 8002200:	4393      	bics	r3, r2
 8002202:	0019      	movs	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	4b13      	ldr	r3, [pc, #76]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800220a:	430a      	orrs	r2, r1
 800220c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2220      	movs	r2, #32
 8002214:	4013      	ands	r3, r2
 8002216:	d009      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002218:	4b0f      	ldr	r3, [pc, #60]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221c:	2210      	movs	r2, #16
 800221e:	4393      	bics	r3, r2
 8002220:	0019      	movs	r1, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	4b0c      	ldr	r3, [pc, #48]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002228:	430a      	orrs	r2, r1
 800222a:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2380      	movs	r3, #128	@ 0x80
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4013      	ands	r3, r2
 8002236:	d009      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002238:	4b07      	ldr	r3, [pc, #28]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800223a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223c:	2240      	movs	r2, #64	@ 0x40
 800223e:	4393      	bics	r3, r2
 8002240:	0019      	movs	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002248:	430a      	orrs	r2, r1
 800224a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	0018      	movs	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	b006      	add	sp, #24
 8002254:	bd80      	pop	{r7, pc}
 8002256:	46c0      	nop			@ (mov r8, r8)
 8002258:	40021000 	.word	0x40021000
 800225c:	40007000 	.word	0x40007000
 8002260:	fffffcff 	.word	0xfffffcff
 8002264:	fffeffff 	.word	0xfffeffff
 8002268:	00001388 	.word	0x00001388
 800226c:	efffffff 	.word	0xefffffff

08002270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e042      	b.n	8002308 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	223d      	movs	r2, #61	@ 0x3d
 8002286:	5c9b      	ldrb	r3, [r3, r2]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d107      	bne.n	800229e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	223c      	movs	r2, #60	@ 0x3c
 8002292:	2100      	movs	r1, #0
 8002294:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	0018      	movs	r0, r3
 800229a:	f7fe fa3d 	bl	8000718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	223d      	movs	r2, #61	@ 0x3d
 80022a2:	2102      	movs	r1, #2
 80022a4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3304      	adds	r3, #4
 80022ae:	0019      	movs	r1, r3
 80022b0:	0010      	movs	r0, r2
 80022b2:	f000 fad7 	bl	8002864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2246      	movs	r2, #70	@ 0x46
 80022ba:	2101      	movs	r1, #1
 80022bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	223e      	movs	r2, #62	@ 0x3e
 80022c2:	2101      	movs	r1, #1
 80022c4:	5499      	strb	r1, [r3, r2]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	223f      	movs	r2, #63	@ 0x3f
 80022ca:	2101      	movs	r1, #1
 80022cc:	5499      	strb	r1, [r3, r2]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2240      	movs	r2, #64	@ 0x40
 80022d2:	2101      	movs	r1, #1
 80022d4:	5499      	strb	r1, [r3, r2]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2241      	movs	r2, #65	@ 0x41
 80022da:	2101      	movs	r1, #1
 80022dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2242      	movs	r2, #66	@ 0x42
 80022e2:	2101      	movs	r1, #1
 80022e4:	5499      	strb	r1, [r3, r2]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2243      	movs	r2, #67	@ 0x43
 80022ea:	2101      	movs	r1, #1
 80022ec:	5499      	strb	r1, [r3, r2]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2244      	movs	r2, #68	@ 0x44
 80022f2:	2101      	movs	r1, #1
 80022f4:	5499      	strb	r1, [r3, r2]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2245      	movs	r2, #69	@ 0x45
 80022fa:	2101      	movs	r1, #1
 80022fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	223d      	movs	r2, #61	@ 0x3d
 8002302:	2101      	movs	r1, #1
 8002304:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	0018      	movs	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	b002      	add	sp, #8
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e042      	b.n	80023a8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	223d      	movs	r2, #61	@ 0x3d
 8002326:	5c9b      	ldrb	r3, [r3, r2]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d107      	bne.n	800233e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	223c      	movs	r2, #60	@ 0x3c
 8002332:	2100      	movs	r1, #0
 8002334:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	0018      	movs	r0, r3
 800233a:	f000 f839 	bl	80023b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	223d      	movs	r2, #61	@ 0x3d
 8002342:	2102      	movs	r1, #2
 8002344:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3304      	adds	r3, #4
 800234e:	0019      	movs	r1, r3
 8002350:	0010      	movs	r0, r2
 8002352:	f000 fa87 	bl	8002864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2246      	movs	r2, #70	@ 0x46
 800235a:	2101      	movs	r1, #1
 800235c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	223e      	movs	r2, #62	@ 0x3e
 8002362:	2101      	movs	r1, #1
 8002364:	5499      	strb	r1, [r3, r2]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	223f      	movs	r2, #63	@ 0x3f
 800236a:	2101      	movs	r1, #1
 800236c:	5499      	strb	r1, [r3, r2]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2240      	movs	r2, #64	@ 0x40
 8002372:	2101      	movs	r1, #1
 8002374:	5499      	strb	r1, [r3, r2]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2241      	movs	r2, #65	@ 0x41
 800237a:	2101      	movs	r1, #1
 800237c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2242      	movs	r2, #66	@ 0x42
 8002382:	2101      	movs	r1, #1
 8002384:	5499      	strb	r1, [r3, r2]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2243      	movs	r2, #67	@ 0x43
 800238a:	2101      	movs	r1, #1
 800238c:	5499      	strb	r1, [r3, r2]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2244      	movs	r2, #68	@ 0x44
 8002392:	2101      	movs	r1, #1
 8002394:	5499      	strb	r1, [r3, r2]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2245      	movs	r2, #69	@ 0x45
 800239a:	2101      	movs	r1, #1
 800239c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	223d      	movs	r2, #61	@ 0x3d
 80023a2:	2101      	movs	r1, #1
 80023a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	0018      	movs	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b002      	add	sp, #8
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023b8:	46c0      	nop			@ (mov r8, r8)
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b002      	add	sp, #8
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d108      	bne.n	80023e2 <HAL_TIM_PWM_Start+0x22>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	223e      	movs	r2, #62	@ 0x3e
 80023d4:	5c9b      	ldrb	r3, [r3, r2]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	1e5a      	subs	r2, r3, #1
 80023dc:	4193      	sbcs	r3, r2
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	e01f      	b.n	8002422 <HAL_TIM_PWM_Start+0x62>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d108      	bne.n	80023fa <HAL_TIM_PWM_Start+0x3a>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	223f      	movs	r2, #63	@ 0x3f
 80023ec:	5c9b      	ldrb	r3, [r3, r2]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	1e5a      	subs	r2, r3, #1
 80023f4:	4193      	sbcs	r3, r2
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	e013      	b.n	8002422 <HAL_TIM_PWM_Start+0x62>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d108      	bne.n	8002412 <HAL_TIM_PWM_Start+0x52>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2240      	movs	r2, #64	@ 0x40
 8002404:	5c9b      	ldrb	r3, [r3, r2]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	3b01      	subs	r3, #1
 800240a:	1e5a      	subs	r2, r3, #1
 800240c:	4193      	sbcs	r3, r2
 800240e:	b2db      	uxtb	r3, r3
 8002410:	e007      	b.n	8002422 <HAL_TIM_PWM_Start+0x62>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2241      	movs	r2, #65	@ 0x41
 8002416:	5c9b      	ldrb	r3, [r3, r2]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	1e5a      	subs	r2, r3, #1
 800241e:	4193      	sbcs	r3, r2
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e074      	b.n	8002514 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d104      	bne.n	800243a <HAL_TIM_PWM_Start+0x7a>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	223e      	movs	r2, #62	@ 0x3e
 8002434:	2102      	movs	r1, #2
 8002436:	5499      	strb	r1, [r3, r2]
 8002438:	e013      	b.n	8002462 <HAL_TIM_PWM_Start+0xa2>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b04      	cmp	r3, #4
 800243e:	d104      	bne.n	800244a <HAL_TIM_PWM_Start+0x8a>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	223f      	movs	r2, #63	@ 0x3f
 8002444:	2102      	movs	r1, #2
 8002446:	5499      	strb	r1, [r3, r2]
 8002448:	e00b      	b.n	8002462 <HAL_TIM_PWM_Start+0xa2>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b08      	cmp	r3, #8
 800244e:	d104      	bne.n	800245a <HAL_TIM_PWM_Start+0x9a>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2240      	movs	r2, #64	@ 0x40
 8002454:	2102      	movs	r1, #2
 8002456:	5499      	strb	r1, [r3, r2]
 8002458:	e003      	b.n	8002462 <HAL_TIM_PWM_Start+0xa2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2241      	movs	r2, #65	@ 0x41
 800245e:	2102      	movs	r1, #2
 8002460:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6839      	ldr	r1, [r7, #0]
 8002468:	2201      	movs	r2, #1
 800246a:	0018      	movs	r0, r3
 800246c:	f000 fd1e 	bl	8002eac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a29      	ldr	r2, [pc, #164]	@ (800251c <HAL_TIM_PWM_Start+0x15c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00e      	beq.n	8002498 <HAL_TIM_PWM_Start+0xd8>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a28      	ldr	r2, [pc, #160]	@ (8002520 <HAL_TIM_PWM_Start+0x160>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d009      	beq.n	8002498 <HAL_TIM_PWM_Start+0xd8>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a26      	ldr	r2, [pc, #152]	@ (8002524 <HAL_TIM_PWM_Start+0x164>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d004      	beq.n	8002498 <HAL_TIM_PWM_Start+0xd8>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a25      	ldr	r2, [pc, #148]	@ (8002528 <HAL_TIM_PWM_Start+0x168>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d101      	bne.n	800249c <HAL_TIM_PWM_Start+0xdc>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <HAL_TIM_PWM_Start+0xde>
 800249c:	2300      	movs	r3, #0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2180      	movs	r1, #128	@ 0x80
 80024ae:	0209      	lsls	r1, r1, #8
 80024b0:	430a      	orrs	r2, r1
 80024b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a18      	ldr	r2, [pc, #96]	@ (800251c <HAL_TIM_PWM_Start+0x15c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00f      	beq.n	80024de <HAL_TIM_PWM_Start+0x11e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	2380      	movs	r3, #128	@ 0x80
 80024c4:	05db      	lsls	r3, r3, #23
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d009      	beq.n	80024de <HAL_TIM_PWM_Start+0x11e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a17      	ldr	r2, [pc, #92]	@ (800252c <HAL_TIM_PWM_Start+0x16c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d004      	beq.n	80024de <HAL_TIM_PWM_Start+0x11e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a11      	ldr	r2, [pc, #68]	@ (8002520 <HAL_TIM_PWM_Start+0x160>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d111      	bne.n	8002502 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2207      	movs	r2, #7
 80024e6:	4013      	ands	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b06      	cmp	r3, #6
 80024ee:	d010      	beq.n	8002512 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2101      	movs	r1, #1
 80024fc:	430a      	orrs	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002500:	e007      	b.n	8002512 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2101      	movs	r1, #1
 800250e:	430a      	orrs	r2, r1
 8002510:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	0018      	movs	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	b004      	add	sp, #16
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40012c00 	.word	0x40012c00
 8002520:	40014000 	.word	0x40014000
 8002524:	40014400 	.word	0x40014400
 8002528:	40014800 	.word	0x40014800
 800252c:	40000400 	.word	0x40000400

08002530 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800253c:	2317      	movs	r3, #23
 800253e:	18fb      	adds	r3, r7, r3
 8002540:	2200      	movs	r2, #0
 8002542:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	223c      	movs	r2, #60	@ 0x3c
 8002548:	5c9b      	ldrb	r3, [r3, r2]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_TIM_PWM_ConfigChannel+0x22>
 800254e:	2302      	movs	r3, #2
 8002550:	e0ad      	b.n	80026ae <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	223c      	movs	r2, #60	@ 0x3c
 8002556:	2101      	movs	r1, #1
 8002558:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b0c      	cmp	r3, #12
 800255e:	d100      	bne.n	8002562 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002560:	e076      	b.n	8002650 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b0c      	cmp	r3, #12
 8002566:	d900      	bls.n	800256a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002568:	e095      	b.n	8002696 <HAL_TIM_PWM_ConfigChannel+0x166>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b08      	cmp	r3, #8
 800256e:	d04e      	beq.n	800260e <HAL_TIM_PWM_ConfigChannel+0xde>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b08      	cmp	r3, #8
 8002574:	d900      	bls.n	8002578 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002576:	e08e      	b.n	8002696 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_TIM_PWM_ConfigChannel+0x56>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b04      	cmp	r3, #4
 8002582:	d021      	beq.n	80025c8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002584:	e087      	b.n	8002696 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	0011      	movs	r1, r2
 800258e:	0018      	movs	r0, r3
 8002590:	f000 f9f6 	bl	8002980 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2108      	movs	r1, #8
 80025a0:	430a      	orrs	r2, r1
 80025a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699a      	ldr	r2, [r3, #24]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2104      	movs	r1, #4
 80025b0:	438a      	bics	r2, r1
 80025b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6999      	ldr	r1, [r3, #24]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	619a      	str	r2, [r3, #24]
      break;
 80025c6:	e06b      	b.n	80026a0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	0011      	movs	r1, r2
 80025d0:	0018      	movs	r0, r3
 80025d2:	f000 fa5d 	bl	8002a90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699a      	ldr	r2, [r3, #24]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2180      	movs	r1, #128	@ 0x80
 80025e2:	0109      	lsls	r1, r1, #4
 80025e4:	430a      	orrs	r2, r1
 80025e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4931      	ldr	r1, [pc, #196]	@ (80026b8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80025f4:	400a      	ands	r2, r1
 80025f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6999      	ldr	r1, [r3, #24]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	021a      	lsls	r2, r3, #8
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	619a      	str	r2, [r3, #24]
      break;
 800260c:	e048      	b.n	80026a0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	0011      	movs	r1, r2
 8002616:	0018      	movs	r0, r3
 8002618:	f000 fabe 	bl	8002b98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	69da      	ldr	r2, [r3, #28]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2108      	movs	r1, #8
 8002628:	430a      	orrs	r2, r1
 800262a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69da      	ldr	r2, [r3, #28]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2104      	movs	r1, #4
 8002638:	438a      	bics	r2, r1
 800263a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69d9      	ldr	r1, [r3, #28]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	61da      	str	r2, [r3, #28]
      break;
 800264e:	e027      	b.n	80026a0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	0011      	movs	r1, r2
 8002658:	0018      	movs	r0, r3
 800265a:	f000 fb23 	bl	8002ca4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69da      	ldr	r2, [r3, #28]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2180      	movs	r1, #128	@ 0x80
 800266a:	0109      	lsls	r1, r1, #4
 800266c:	430a      	orrs	r2, r1
 800266e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	69da      	ldr	r2, [r3, #28]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	490f      	ldr	r1, [pc, #60]	@ (80026b8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800267c:	400a      	ands	r2, r1
 800267e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	69d9      	ldr	r1, [r3, #28]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	021a      	lsls	r2, r3, #8
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	61da      	str	r2, [r3, #28]
      break;
 8002694:	e004      	b.n	80026a0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002696:	2317      	movs	r3, #23
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	2201      	movs	r2, #1
 800269c:	701a      	strb	r2, [r3, #0]
      break;
 800269e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	223c      	movs	r2, #60	@ 0x3c
 80026a4:	2100      	movs	r1, #0
 80026a6:	5499      	strb	r1, [r3, r2]

  return status;
 80026a8:	2317      	movs	r3, #23
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	781b      	ldrb	r3, [r3, #0]
}
 80026ae:	0018      	movs	r0, r3
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b006      	add	sp, #24
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	46c0      	nop			@ (mov r8, r8)
 80026b8:	fffffbff 	.word	0xfffffbff

080026bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026c6:	230f      	movs	r3, #15
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	223c      	movs	r2, #60	@ 0x3c
 80026d2:	5c9b      	ldrb	r3, [r3, r2]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_TIM_ConfigClockSource+0x20>
 80026d8:	2302      	movs	r3, #2
 80026da:	e0bc      	b.n	8002856 <HAL_TIM_ConfigClockSource+0x19a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	223c      	movs	r2, #60	@ 0x3c
 80026e0:	2101      	movs	r1, #1
 80026e2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	223d      	movs	r2, #61	@ 0x3d
 80026e8:	2102      	movs	r1, #2
 80026ea:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2277      	movs	r2, #119	@ 0x77
 80026f8:	4393      	bics	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	4a58      	ldr	r2, [pc, #352]	@ (8002860 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002700:	4013      	ands	r3, r2
 8002702:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2280      	movs	r2, #128	@ 0x80
 8002712:	0192      	lsls	r2, r2, #6
 8002714:	4293      	cmp	r3, r2
 8002716:	d040      	beq.n	800279a <HAL_TIM_ConfigClockSource+0xde>
 8002718:	2280      	movs	r2, #128	@ 0x80
 800271a:	0192      	lsls	r2, r2, #6
 800271c:	4293      	cmp	r3, r2
 800271e:	d900      	bls.n	8002722 <HAL_TIM_ConfigClockSource+0x66>
 8002720:	e088      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x178>
 8002722:	2280      	movs	r2, #128	@ 0x80
 8002724:	0152      	lsls	r2, r2, #5
 8002726:	4293      	cmp	r3, r2
 8002728:	d100      	bne.n	800272c <HAL_TIM_ConfigClockSource+0x70>
 800272a:	e088      	b.n	800283e <HAL_TIM_ConfigClockSource+0x182>
 800272c:	2280      	movs	r2, #128	@ 0x80
 800272e:	0152      	lsls	r2, r2, #5
 8002730:	4293      	cmp	r3, r2
 8002732:	d900      	bls.n	8002736 <HAL_TIM_ConfigClockSource+0x7a>
 8002734:	e07e      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x178>
 8002736:	2b70      	cmp	r3, #112	@ 0x70
 8002738:	d018      	beq.n	800276c <HAL_TIM_ConfigClockSource+0xb0>
 800273a:	d900      	bls.n	800273e <HAL_TIM_ConfigClockSource+0x82>
 800273c:	e07a      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x178>
 800273e:	2b60      	cmp	r3, #96	@ 0x60
 8002740:	d04f      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0x126>
 8002742:	d900      	bls.n	8002746 <HAL_TIM_ConfigClockSource+0x8a>
 8002744:	e076      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x178>
 8002746:	2b50      	cmp	r3, #80	@ 0x50
 8002748:	d03b      	beq.n	80027c2 <HAL_TIM_ConfigClockSource+0x106>
 800274a:	d900      	bls.n	800274e <HAL_TIM_ConfigClockSource+0x92>
 800274c:	e072      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x178>
 800274e:	2b40      	cmp	r3, #64	@ 0x40
 8002750:	d057      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x146>
 8002752:	d900      	bls.n	8002756 <HAL_TIM_ConfigClockSource+0x9a>
 8002754:	e06e      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x178>
 8002756:	2b30      	cmp	r3, #48	@ 0x30
 8002758:	d063      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x166>
 800275a:	d86b      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x178>
 800275c:	2b20      	cmp	r3, #32
 800275e:	d060      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x166>
 8002760:	d868      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x178>
 8002762:	2b00      	cmp	r3, #0
 8002764:	d05d      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x166>
 8002766:	2b10      	cmp	r3, #16
 8002768:	d05b      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x166>
 800276a:	e063      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800277c:	f000 fb76 	bl	8002e6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2277      	movs	r2, #119	@ 0x77
 800278c:	4313      	orrs	r3, r2
 800278e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	609a      	str	r2, [r3, #8]
      break;
 8002798:	e052      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027aa:	f000 fb5f 	bl	8002e6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2180      	movs	r1, #128	@ 0x80
 80027ba:	01c9      	lsls	r1, r1, #7
 80027bc:	430a      	orrs	r2, r1
 80027be:	609a      	str	r2, [r3, #8]
      break;
 80027c0:	e03e      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ce:	001a      	movs	r2, r3
 80027d0:	f000 fad2 	bl	8002d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2150      	movs	r1, #80	@ 0x50
 80027da:	0018      	movs	r0, r3
 80027dc:	f000 fb2c 	bl	8002e38 <TIM_ITRx_SetConfig>
      break;
 80027e0:	e02e      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ee:	001a      	movs	r2, r3
 80027f0:	f000 faf0 	bl	8002dd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2160      	movs	r1, #96	@ 0x60
 80027fa:	0018      	movs	r0, r3
 80027fc:	f000 fb1c 	bl	8002e38 <TIM_ITRx_SetConfig>
      break;
 8002800:	e01e      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800280e:	001a      	movs	r2, r3
 8002810:	f000 fab2 	bl	8002d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2140      	movs	r1, #64	@ 0x40
 800281a:	0018      	movs	r0, r3
 800281c:	f000 fb0c 	bl	8002e38 <TIM_ITRx_SetConfig>
      break;
 8002820:	e00e      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	0019      	movs	r1, r3
 800282c:	0010      	movs	r0, r2
 800282e:	f000 fb03 	bl	8002e38 <TIM_ITRx_SetConfig>
      break;
 8002832:	e005      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002834:	230f      	movs	r3, #15
 8002836:	18fb      	adds	r3, r7, r3
 8002838:	2201      	movs	r2, #1
 800283a:	701a      	strb	r2, [r3, #0]
      break;
 800283c:	e000      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800283e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	223d      	movs	r2, #61	@ 0x3d
 8002844:	2101      	movs	r1, #1
 8002846:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	223c      	movs	r2, #60	@ 0x3c
 800284c:	2100      	movs	r1, #0
 800284e:	5499      	strb	r1, [r3, r2]

  return status;
 8002850:	230f      	movs	r3, #15
 8002852:	18fb      	adds	r3, r7, r3
 8002854:	781b      	ldrb	r3, [r3, #0]
}
 8002856:	0018      	movs	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	b004      	add	sp, #16
 800285c:	bd80      	pop	{r7, pc}
 800285e:	46c0      	nop			@ (mov r8, r8)
 8002860:	ffff00ff 	.word	0xffff00ff

08002864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a3b      	ldr	r2, [pc, #236]	@ (8002964 <TIM_Base_SetConfig+0x100>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d008      	beq.n	800288e <TIM_Base_SetConfig+0x2a>
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	2380      	movs	r3, #128	@ 0x80
 8002880:	05db      	lsls	r3, r3, #23
 8002882:	429a      	cmp	r2, r3
 8002884:	d003      	beq.n	800288e <TIM_Base_SetConfig+0x2a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a37      	ldr	r2, [pc, #220]	@ (8002968 <TIM_Base_SetConfig+0x104>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d108      	bne.n	80028a0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2270      	movs	r2, #112	@ 0x70
 8002892:	4393      	bics	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4313      	orrs	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a30      	ldr	r2, [pc, #192]	@ (8002964 <TIM_Base_SetConfig+0x100>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d018      	beq.n	80028da <TIM_Base_SetConfig+0x76>
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	2380      	movs	r3, #128	@ 0x80
 80028ac:	05db      	lsls	r3, r3, #23
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d013      	beq.n	80028da <TIM_Base_SetConfig+0x76>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002968 <TIM_Base_SetConfig+0x104>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00f      	beq.n	80028da <TIM_Base_SetConfig+0x76>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a2b      	ldr	r2, [pc, #172]	@ (800296c <TIM_Base_SetConfig+0x108>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00b      	beq.n	80028da <TIM_Base_SetConfig+0x76>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002970 <TIM_Base_SetConfig+0x10c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d007      	beq.n	80028da <TIM_Base_SetConfig+0x76>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a29      	ldr	r2, [pc, #164]	@ (8002974 <TIM_Base_SetConfig+0x110>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d003      	beq.n	80028da <TIM_Base_SetConfig+0x76>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a28      	ldr	r2, [pc, #160]	@ (8002978 <TIM_Base_SetConfig+0x114>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d108      	bne.n	80028ec <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4a27      	ldr	r2, [pc, #156]	@ (800297c <TIM_Base_SetConfig+0x118>)
 80028de:	4013      	ands	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2280      	movs	r2, #128	@ 0x80
 80028f0:	4393      	bics	r3, r2
 80028f2:	001a      	movs	r2, r3
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a13      	ldr	r2, [pc, #76]	@ (8002964 <TIM_Base_SetConfig+0x100>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d00b      	beq.n	8002932 <TIM_Base_SetConfig+0xce>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a14      	ldr	r2, [pc, #80]	@ (8002970 <TIM_Base_SetConfig+0x10c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d007      	beq.n	8002932 <TIM_Base_SetConfig+0xce>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a13      	ldr	r2, [pc, #76]	@ (8002974 <TIM_Base_SetConfig+0x110>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d003      	beq.n	8002932 <TIM_Base_SetConfig+0xce>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a12      	ldr	r2, [pc, #72]	@ (8002978 <TIM_Base_SetConfig+0x114>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d103      	bne.n	800293a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	2201      	movs	r2, #1
 8002946:	4013      	ands	r3, r2
 8002948:	2b01      	cmp	r3, #1
 800294a:	d106      	bne.n	800295a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	2201      	movs	r2, #1
 8002952:	4393      	bics	r3, r2
 8002954:	001a      	movs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	611a      	str	r2, [r3, #16]
  }
}
 800295a:	46c0      	nop			@ (mov r8, r8)
 800295c:	46bd      	mov	sp, r7
 800295e:	b004      	add	sp, #16
 8002960:	bd80      	pop	{r7, pc}
 8002962:	46c0      	nop			@ (mov r8, r8)
 8002964:	40012c00 	.word	0x40012c00
 8002968:	40000400 	.word	0x40000400
 800296c:	40002000 	.word	0x40002000
 8002970:	40014000 	.word	0x40014000
 8002974:	40014400 	.word	0x40014400
 8002978:	40014800 	.word	0x40014800
 800297c:	fffffcff 	.word	0xfffffcff

08002980 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	2201      	movs	r2, #1
 8002996:	4393      	bics	r3, r2
 8002998:	001a      	movs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2270      	movs	r2, #112	@ 0x70
 80029ae:	4393      	bics	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2203      	movs	r2, #3
 80029b6:	4393      	bics	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2202      	movs	r2, #2
 80029c8:	4393      	bics	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a27      	ldr	r2, [pc, #156]	@ (8002a78 <TIM_OC1_SetConfig+0xf8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00b      	beq.n	80029f6 <TIM_OC1_SetConfig+0x76>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a26      	ldr	r2, [pc, #152]	@ (8002a7c <TIM_OC1_SetConfig+0xfc>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d007      	beq.n	80029f6 <TIM_OC1_SetConfig+0x76>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a25      	ldr	r2, [pc, #148]	@ (8002a80 <TIM_OC1_SetConfig+0x100>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d003      	beq.n	80029f6 <TIM_OC1_SetConfig+0x76>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a24      	ldr	r2, [pc, #144]	@ (8002a84 <TIM_OC1_SetConfig+0x104>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d10c      	bne.n	8002a10 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2208      	movs	r2, #8
 80029fa:	4393      	bics	r3, r2
 80029fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	4393      	bics	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a19      	ldr	r2, [pc, #100]	@ (8002a78 <TIM_OC1_SetConfig+0xf8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00b      	beq.n	8002a30 <TIM_OC1_SetConfig+0xb0>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a18      	ldr	r2, [pc, #96]	@ (8002a7c <TIM_OC1_SetConfig+0xfc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d007      	beq.n	8002a30 <TIM_OC1_SetConfig+0xb0>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a17      	ldr	r2, [pc, #92]	@ (8002a80 <TIM_OC1_SetConfig+0x100>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d003      	beq.n	8002a30 <TIM_OC1_SetConfig+0xb0>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a16      	ldr	r2, [pc, #88]	@ (8002a84 <TIM_OC1_SetConfig+0x104>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d111      	bne.n	8002a54 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4a15      	ldr	r2, [pc, #84]	@ (8002a88 <TIM_OC1_SetConfig+0x108>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4a14      	ldr	r2, [pc, #80]	@ (8002a8c <TIM_OC1_SetConfig+0x10c>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	621a      	str	r2, [r3, #32]
}
 8002a6e:	46c0      	nop			@ (mov r8, r8)
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b006      	add	sp, #24
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	46c0      	nop			@ (mov r8, r8)
 8002a78:	40012c00 	.word	0x40012c00
 8002a7c:	40014000 	.word	0x40014000
 8002a80:	40014400 	.word	0x40014400
 8002a84:	40014800 	.word	0x40014800
 8002a88:	fffffeff 	.word	0xfffffeff
 8002a8c:	fffffdff 	.word	0xfffffdff

08002a90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	2210      	movs	r2, #16
 8002aa6:	4393      	bics	r3, r2
 8002aa8:	001a      	movs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4a2e      	ldr	r2, [pc, #184]	@ (8002b78 <TIM_OC2_SetConfig+0xe8>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4a2d      	ldr	r2, [pc, #180]	@ (8002b7c <TIM_OC2_SetConfig+0xec>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	4393      	bics	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a24      	ldr	r2, [pc, #144]	@ (8002b80 <TIM_OC2_SetConfig+0xf0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d10d      	bne.n	8002b0e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2280      	movs	r2, #128	@ 0x80
 8002af6:	4393      	bics	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2240      	movs	r2, #64	@ 0x40
 8002b0a:	4393      	bics	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a1b      	ldr	r2, [pc, #108]	@ (8002b80 <TIM_OC2_SetConfig+0xf0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00b      	beq.n	8002b2e <TIM_OC2_SetConfig+0x9e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a1a      	ldr	r2, [pc, #104]	@ (8002b84 <TIM_OC2_SetConfig+0xf4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d007      	beq.n	8002b2e <TIM_OC2_SetConfig+0x9e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a19      	ldr	r2, [pc, #100]	@ (8002b88 <TIM_OC2_SetConfig+0xf8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d003      	beq.n	8002b2e <TIM_OC2_SetConfig+0x9e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a18      	ldr	r2, [pc, #96]	@ (8002b8c <TIM_OC2_SetConfig+0xfc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d113      	bne.n	8002b56 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4a17      	ldr	r2, [pc, #92]	@ (8002b90 <TIM_OC2_SetConfig+0x100>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4a16      	ldr	r2, [pc, #88]	@ (8002b94 <TIM_OC2_SetConfig+0x104>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	621a      	str	r2, [r3, #32]
}
 8002b70:	46c0      	nop			@ (mov r8, r8)
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b006      	add	sp, #24
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	ffff8fff 	.word	0xffff8fff
 8002b7c:	fffffcff 	.word	0xfffffcff
 8002b80:	40012c00 	.word	0x40012c00
 8002b84:	40014000 	.word	0x40014000
 8002b88:	40014400 	.word	0x40014400
 8002b8c:	40014800 	.word	0x40014800
 8002b90:	fffffbff 	.word	0xfffffbff
 8002b94:	fffff7ff 	.word	0xfffff7ff

08002b98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	4a33      	ldr	r2, [pc, #204]	@ (8002c7c <TIM_OC3_SetConfig+0xe4>)
 8002bae:	401a      	ands	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2270      	movs	r2, #112	@ 0x70
 8002bc4:	4393      	bics	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2203      	movs	r2, #3
 8002bcc:	4393      	bics	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	4a28      	ldr	r2, [pc, #160]	@ (8002c80 <TIM_OC3_SetConfig+0xe8>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a24      	ldr	r2, [pc, #144]	@ (8002c84 <TIM_OC3_SetConfig+0xec>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d10d      	bne.n	8002c12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	4a23      	ldr	r2, [pc, #140]	@ (8002c88 <TIM_OC3_SetConfig+0xf0>)
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8002c8c <TIM_OC3_SetConfig+0xf4>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a1b      	ldr	r2, [pc, #108]	@ (8002c84 <TIM_OC3_SetConfig+0xec>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00b      	beq.n	8002c32 <TIM_OC3_SetConfig+0x9a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a1c      	ldr	r2, [pc, #112]	@ (8002c90 <TIM_OC3_SetConfig+0xf8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d007      	beq.n	8002c32 <TIM_OC3_SetConfig+0x9a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a1b      	ldr	r2, [pc, #108]	@ (8002c94 <TIM_OC3_SetConfig+0xfc>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d003      	beq.n	8002c32 <TIM_OC3_SetConfig+0x9a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8002c98 <TIM_OC3_SetConfig+0x100>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d113      	bne.n	8002c5a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4a19      	ldr	r2, [pc, #100]	@ (8002c9c <TIM_OC3_SetConfig+0x104>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4a18      	ldr	r2, [pc, #96]	@ (8002ca0 <TIM_OC3_SetConfig+0x108>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	621a      	str	r2, [r3, #32]
}
 8002c74:	46c0      	nop			@ (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b006      	add	sp, #24
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	fffffeff 	.word	0xfffffeff
 8002c80:	fffffdff 	.word	0xfffffdff
 8002c84:	40012c00 	.word	0x40012c00
 8002c88:	fffff7ff 	.word	0xfffff7ff
 8002c8c:	fffffbff 	.word	0xfffffbff
 8002c90:	40014000 	.word	0x40014000
 8002c94:	40014400 	.word	0x40014400
 8002c98:	40014800 	.word	0x40014800
 8002c9c:	ffffefff 	.word	0xffffefff
 8002ca0:	ffffdfff 	.word	0xffffdfff

08002ca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	4a26      	ldr	r2, [pc, #152]	@ (8002d54 <TIM_OC4_SetConfig+0xb0>)
 8002cba:	401a      	ands	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4a22      	ldr	r2, [pc, #136]	@ (8002d58 <TIM_OC4_SetConfig+0xb4>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4a21      	ldr	r2, [pc, #132]	@ (8002d5c <TIM_OC4_SetConfig+0xb8>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	021b      	lsls	r3, r3, #8
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4a1d      	ldr	r2, [pc, #116]	@ (8002d60 <TIM_OC4_SetConfig+0xbc>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	031b      	lsls	r3, r3, #12
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a19      	ldr	r2, [pc, #100]	@ (8002d64 <TIM_OC4_SetConfig+0xc0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d00b      	beq.n	8002d1c <TIM_OC4_SetConfig+0x78>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a18      	ldr	r2, [pc, #96]	@ (8002d68 <TIM_OC4_SetConfig+0xc4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d007      	beq.n	8002d1c <TIM_OC4_SetConfig+0x78>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a17      	ldr	r2, [pc, #92]	@ (8002d6c <TIM_OC4_SetConfig+0xc8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d003      	beq.n	8002d1c <TIM_OC4_SetConfig+0x78>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a16      	ldr	r2, [pc, #88]	@ (8002d70 <TIM_OC4_SetConfig+0xcc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d109      	bne.n	8002d30 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	4a15      	ldr	r2, [pc, #84]	@ (8002d74 <TIM_OC4_SetConfig+0xd0>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	019b      	lsls	r3, r3, #6
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	621a      	str	r2, [r3, #32]
}
 8002d4a:	46c0      	nop			@ (mov r8, r8)
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b006      	add	sp, #24
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	46c0      	nop			@ (mov r8, r8)
 8002d54:	ffffefff 	.word	0xffffefff
 8002d58:	ffff8fff 	.word	0xffff8fff
 8002d5c:	fffffcff 	.word	0xfffffcff
 8002d60:	ffffdfff 	.word	0xffffdfff
 8002d64:	40012c00 	.word	0x40012c00
 8002d68:	40014000 	.word	0x40014000
 8002d6c:	40014400 	.word	0x40014400
 8002d70:	40014800 	.word	0x40014800
 8002d74:	ffffbfff 	.word	0xffffbfff

08002d78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	4393      	bics	r3, r2
 8002d92:	001a      	movs	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	22f0      	movs	r2, #240	@ 0xf0
 8002da2:	4393      	bics	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	220a      	movs	r2, #10
 8002db4:	4393      	bics	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	621a      	str	r2, [r3, #32]
}
 8002dcc:	46c0      	nop			@ (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b006      	add	sp, #24
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	2210      	movs	r2, #16
 8002dec:	4393      	bics	r3, r2
 8002dee:	001a      	movs	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002e34 <TIM_TI2_ConfigInputStage+0x60>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	031b      	lsls	r3, r3, #12
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	22a0      	movs	r2, #160	@ 0xa0
 8002e10:	4393      	bics	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	621a      	str	r2, [r3, #32]
}
 8002e2a:	46c0      	nop			@ (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b006      	add	sp, #24
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	46c0      	nop			@ (mov r8, r8)
 8002e34:	ffff0fff 	.word	0xffff0fff

08002e38 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2270      	movs	r2, #112	@ 0x70
 8002e4c:	4393      	bics	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	2207      	movs	r2, #7
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	609a      	str	r2, [r3, #8]
}
 8002e62:	46c0      	nop			@ (mov r8, r8)
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b004      	add	sp, #16
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	4a09      	ldr	r2, [pc, #36]	@ (8002ea8 <TIM_ETR_SetConfig+0x3c>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	021a      	lsls	r2, r3, #8
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	609a      	str	r2, [r3, #8]
}
 8002ea0:	46c0      	nop			@ (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b006      	add	sp, #24
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	ffff00ff 	.word	0xffff00ff

08002eac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	221f      	movs	r2, #31
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	0013      	movs	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	43d2      	mvns	r2, r2
 8002ece:	401a      	ands	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a1a      	ldr	r2, [r3, #32]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	211f      	movs	r1, #31
 8002edc:	400b      	ands	r3, r1
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4099      	lsls	r1, r3
 8002ee2:	000b      	movs	r3, r1
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	621a      	str	r2, [r3, #32]
}
 8002eea:	46c0      	nop			@ (mov r8, r8)
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b006      	add	sp, #24
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	223c      	movs	r2, #60	@ 0x3c
 8002f02:	5c9b      	ldrb	r3, [r3, r2]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e047      	b.n	8002f9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	223c      	movs	r2, #60	@ 0x3c
 8002f10:	2101      	movs	r1, #1
 8002f12:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	223d      	movs	r2, #61	@ 0x3d
 8002f18:	2102      	movs	r1, #2
 8002f1a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2270      	movs	r2, #112	@ 0x70
 8002f30:	4393      	bics	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a16      	ldr	r2, [pc, #88]	@ (8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00f      	beq.n	8002f70 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	2380      	movs	r3, #128	@ 0x80
 8002f56:	05db      	lsls	r3, r3, #23
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d009      	beq.n	8002f70 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a11      	ldr	r2, [pc, #68]	@ (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d004      	beq.n	8002f70 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a10      	ldr	r2, [pc, #64]	@ (8002fac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d10c      	bne.n	8002f8a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2280      	movs	r2, #128	@ 0x80
 8002f74:	4393      	bics	r3, r2
 8002f76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	223d      	movs	r2, #61	@ 0x3d
 8002f8e:	2101      	movs	r1, #1
 8002f90:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	223c      	movs	r2, #60	@ 0x3c
 8002f96:	2100      	movs	r1, #0
 8002f98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b004      	add	sp, #16
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40012c00 	.word	0x40012c00
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40014000 	.word	0x40014000

08002fb0 <memset>:
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	1882      	adds	r2, r0, r2
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d100      	bne.n	8002fba <memset+0xa>
 8002fb8:	4770      	bx	lr
 8002fba:	7019      	strb	r1, [r3, #0]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	e7f9      	b.n	8002fb4 <memset+0x4>

08002fc0 <__libc_init_array>:
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	2600      	movs	r6, #0
 8002fc4:	4c0c      	ldr	r4, [pc, #48]	@ (8002ff8 <__libc_init_array+0x38>)
 8002fc6:	4d0d      	ldr	r5, [pc, #52]	@ (8002ffc <__libc_init_array+0x3c>)
 8002fc8:	1b64      	subs	r4, r4, r5
 8002fca:	10a4      	asrs	r4, r4, #2
 8002fcc:	42a6      	cmp	r6, r4
 8002fce:	d109      	bne.n	8002fe4 <__libc_init_array+0x24>
 8002fd0:	2600      	movs	r6, #0
 8002fd2:	f000 f819 	bl	8003008 <_init>
 8002fd6:	4c0a      	ldr	r4, [pc, #40]	@ (8003000 <__libc_init_array+0x40>)
 8002fd8:	4d0a      	ldr	r5, [pc, #40]	@ (8003004 <__libc_init_array+0x44>)
 8002fda:	1b64      	subs	r4, r4, r5
 8002fdc:	10a4      	asrs	r4, r4, #2
 8002fde:	42a6      	cmp	r6, r4
 8002fe0:	d105      	bne.n	8002fee <__libc_init_array+0x2e>
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	00b3      	lsls	r3, r6, #2
 8002fe6:	58eb      	ldr	r3, [r5, r3]
 8002fe8:	4798      	blx	r3
 8002fea:	3601      	adds	r6, #1
 8002fec:	e7ee      	b.n	8002fcc <__libc_init_array+0xc>
 8002fee:	00b3      	lsls	r3, r6, #2
 8002ff0:	58eb      	ldr	r3, [r5, r3]
 8002ff2:	4798      	blx	r3
 8002ff4:	3601      	adds	r6, #1
 8002ff6:	e7f2      	b.n	8002fde <__libc_init_array+0x1e>
 8002ff8:	08003050 	.word	0x08003050
 8002ffc:	08003050 	.word	0x08003050
 8003000:	08003054 	.word	0x08003054
 8003004:	08003050 	.word	0x08003050

08003008 <_init>:
 8003008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300a:	46c0      	nop			@ (mov r8, r8)
 800300c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300e:	bc08      	pop	{r3}
 8003010:	469e      	mov	lr, r3
 8003012:	4770      	bx	lr

08003014 <_fini>:
 8003014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003016:	46c0      	nop			@ (mov r8, r8)
 8003018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301a:	bc08      	pop	{r3}
 800301c:	469e      	mov	lr, r3
 800301e:	4770      	bx	lr
