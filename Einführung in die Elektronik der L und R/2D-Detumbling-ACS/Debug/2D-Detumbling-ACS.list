
2D-Detumbling-ACS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003294  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003354  08003354  00004354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003384  08003384  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003384  08003384  00005010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003384  08003384  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003384  08003384  00004384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003388  08003388  00004388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800338c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000010  0800339c  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  0800339c  00005114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adf8  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c45  00000000  00000000  0000fe30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  00011a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000097b  00000000  00000000  00012690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000113c6  00000000  00000000  0001300b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f20e  00000000  00000000  000243d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069fd3  00000000  00000000  000335df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009d5b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd4  00000000  00000000  0009d5f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000a01cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800333c 	.word	0x0800333c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800333c 	.word	0x0800333c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fcc8 	bl	8000bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f84e 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f97e 	bl	800052c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000230:	f000 f8ec 	bl	800040c <MX_TIM3_Init>
  MX_TIM14_Init();
 8000234:	f000 f954 	bl	80004e0 <MX_TIM14_Init>
  MX_I2C1_Init();
 8000238:	f000 f8a8 	bl	800038c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //JH PC8
 800023c:	4b1e      	ldr	r3, [pc, #120]	@ (80002b8 <main+0x98>)
 800023e:	2108      	movs	r1, #8
 8000240:	0018      	movs	r0, r3
 8000242:	f002 faa7 	bl	8002794 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // PC9
 8000246:	4b1c      	ldr	r3, [pc, #112]	@ (80002b8 <main+0x98>)
 8000248:	210c      	movs	r1, #12
 800024a:	0018      	movs	r0, r3
 800024c:	f002 faa2 	bl	8002794 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 50);
 8000250:	4b19      	ldr	r3, [pc, #100]	@ (80002b8 <main+0x98>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2232      	movs	r2, #50	@ 0x32
 8000256:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 50);
 8000258:	4b17      	ldr	r3, [pc, #92]	@ (80002b8 <main+0x98>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2232      	movs	r2, #50	@ 0x32
 800025e:	641a      	str	r2, [r3, #64]	@ 0x40


  if (check_fxas21002())
 8000260:	f000 fae4 	bl	800082c <check_fxas21002>
 8000264:	1e03      	subs	r3, r0, #0
 8000266:	d005      	beq.n	8000274 <main+0x54>
  {
    blink_sos_pwm(&htim3, TIM_CHANNEL_3); // PC8: Erfolg
 8000268:	4b13      	ldr	r3, [pc, #76]	@ (80002b8 <main+0x98>)
 800026a:	2108      	movs	r1, #8
 800026c:	0018      	movs	r0, r3
 800026e:	f000 f9a9 	bl	80005c4 <blink_sos_pwm>
 8000272:	e004      	b.n	800027e <main+0x5e>
  }
  else
  {
    blink_sos_pwm(&htim3, TIM_CHANNEL_4); // PC9: Fehler
 8000274:	4b10      	ldr	r3, [pc, #64]	@ (80002b8 <main+0x98>)
 8000276:	210c      	movs	r1, #12
 8000278:	0018      	movs	r0, r3
 800027a:	f000 f9a3 	bl	80005c4 <blink_sos_pwm>
  }

  HAL_Delay(10000);  // 5 Sekunden Pause zwischen check
 800027e:	4b0f      	ldr	r3, [pc, #60]	@ (80002bc <main+0x9c>)
 8000280:	0018      	movs	r0, r3
 8000282:	f000 fcfd 	bl	8000c80 <HAL_Delay>

  if (check_fxos8700())
 8000286:	f000 faa3 	bl	80007d0 <check_fxos8700>
 800028a:	1e03      	subs	r3, r0, #0
 800028c:	d005      	beq.n	800029a <main+0x7a>
  {
    blink_sos_pwm(&htim3, TIM_CHANNEL_3); // PC8: Erfolg
 800028e:	4b0a      	ldr	r3, [pc, #40]	@ (80002b8 <main+0x98>)
 8000290:	2108      	movs	r1, #8
 8000292:	0018      	movs	r0, r3
 8000294:	f000 f996 	bl	80005c4 <blink_sos_pwm>
 8000298:	e004      	b.n	80002a4 <main+0x84>
  }
  else
  {
    blink_sos_pwm(&htim3, TIM_CHANNEL_4); // PC9: Fehler
 800029a:	4b07      	ldr	r3, [pc, #28]	@ (80002b8 <main+0x98>)
 800029c:	210c      	movs	r1, #12
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 f990 	bl	80005c4 <blink_sos_pwm>
  }

  HAL_Delay(5000);  // 5 Sekunden Pause vor Regeltaktstart
 80002a4:	4b06      	ldr	r3, [pc, #24]	@ (80002c0 <main+0xa0>)
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fcea 	bl	8000c80 <HAL_Delay>

  // Regelung startet
  HAL_TIM_Base_Start_IT(&htim14);  //JH Startet 10 Hz-Regeltakt
 80002ac:	4b05      	ldr	r3, [pc, #20]	@ (80002c4 <main+0xa4>)
 80002ae:	0018      	movs	r0, r3
 80002b0:	f002 f9ce 	bl	8002650 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b4:	46c0      	nop			@ (mov r8, r8)
 80002b6:	e7fd      	b.n	80002b4 <main+0x94>
 80002b8:	20000080 	.word	0x20000080
 80002bc:	00002710 	.word	0x00002710
 80002c0:	00001388 	.word	0x00001388
 80002c4:	200000c8 	.word	0x200000c8

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b590      	push	{r4, r7, lr}
 80002ca:	b097      	sub	sp, #92	@ 0x5c
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	2428      	movs	r4, #40	@ 0x28
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	0018      	movs	r0, r3
 80002d4:	2330      	movs	r3, #48	@ 0x30
 80002d6:	001a      	movs	r2, r3
 80002d8:	2100      	movs	r1, #0
 80002da:	f003 f803 	bl	80032e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002de:	2318      	movs	r3, #24
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	0018      	movs	r0, r3
 80002e4:	2310      	movs	r3, #16
 80002e6:	001a      	movs	r2, r3
 80002e8:	2100      	movs	r1, #0
 80002ea:	f002 fffb 	bl	80032e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	0018      	movs	r0, r3
 80002f2:	2314      	movs	r3, #20
 80002f4:	001a      	movs	r2, r3
 80002f6:	2100      	movs	r1, #0
 80002f8:	f002 fff4 	bl	80032e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002fc:	0021      	movs	r1, r4
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2202      	movs	r2, #2
 8000302:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2201      	movs	r2, #1
 8000308:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2210      	movs	r2, #16
 800030e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2202      	movs	r2, #2
 8000314:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2200      	movs	r2, #0
 800031a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800031c:	187b      	adds	r3, r7, r1
 800031e:	22a0      	movs	r2, #160	@ 0xa0
 8000320:	0392      	lsls	r2, r2, #14
 8000322:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2200      	movs	r2, #0
 8000328:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032a:	187b      	adds	r3, r7, r1
 800032c:	0018      	movs	r0, r3
 800032e:	f001 fc23 	bl	8001b78 <HAL_RCC_OscConfig>
 8000332:	1e03      	subs	r3, r0, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000336:	f000 fad5 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033a:	2118      	movs	r1, #24
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2207      	movs	r2, #7
 8000340:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2202      	movs	r2, #2
 8000346:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2200      	movs	r2, #0
 8000352:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2101      	movs	r1, #1
 8000358:	0018      	movs	r0, r3
 800035a:	f001 ff27 	bl	80021ac <HAL_RCC_ClockConfig>
 800035e:	1e03      	subs	r3, r0, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000362:	f000 fabf 	bl	80008e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2220      	movs	r2, #32
 800036a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2200      	movs	r2, #0
 8000370:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	0018      	movs	r0, r3
 8000376:	f002 f83d 	bl	80023f4 <HAL_RCCEx_PeriphCLKConfig>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800037e:	f000 fab1 	bl	80008e4 <Error_Handler>
  }
}
 8000382:	46c0      	nop			@ (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	b017      	add	sp, #92	@ 0x5c
 8000388:	bd90      	pop	{r4, r7, pc}
	...

0800038c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000390:	4b1b      	ldr	r3, [pc, #108]	@ (8000400 <MX_I2C1_Init+0x74>)
 8000392:	4a1c      	ldr	r2, [pc, #112]	@ (8000404 <MX_I2C1_Init+0x78>)
 8000394:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000396:	4b1a      	ldr	r3, [pc, #104]	@ (8000400 <MX_I2C1_Init+0x74>)
 8000398:	4a1b      	ldr	r2, [pc, #108]	@ (8000408 <MX_I2C1_Init+0x7c>)
 800039a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800039c:	4b18      	ldr	r3, [pc, #96]	@ (8000400 <MX_I2C1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003a2:	4b17      	ldr	r3, [pc, #92]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a8:	4b15      	ldr	r3, [pc, #84]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003ae:	4b14      	ldr	r3, [pc, #80]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003b4:	4b12      	ldr	r3, [pc, #72]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ba:	4b11      	ldr	r3, [pc, #68]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003c8:	0018      	movs	r0, r3
 80003ca:	f000 fecb 	bl	8001164 <HAL_I2C_Init>
 80003ce:	1e03      	subs	r3, r0, #0
 80003d0:	d001      	beq.n	80003d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003d2:	f000 fa87 	bl	80008e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003d8:	2100      	movs	r1, #0
 80003da:	0018      	movs	r0, r3
 80003dc:	f001 fb34 	bl	8001a48 <HAL_I2CEx_ConfigAnalogFilter>
 80003e0:	1e03      	subs	r3, r0, #0
 80003e2:	d001      	beq.n	80003e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003e4:	f000 fa7e 	bl	80008e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003e8:	4b05      	ldr	r3, [pc, #20]	@ (8000400 <MX_I2C1_Init+0x74>)
 80003ea:	2100      	movs	r1, #0
 80003ec:	0018      	movs	r0, r3
 80003ee:	f001 fb77 	bl	8001ae0 <HAL_I2CEx_ConfigDigitalFilter>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003f6:	f000 fa75 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003fa:	46c0      	nop			@ (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	2000002c 	.word	0x2000002c
 8000404:	40005400 	.word	0x40005400
 8000408:	00201d2b 	.word	0x00201d2b

0800040c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b08a      	sub	sp, #40	@ 0x28
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000412:	2320      	movs	r3, #32
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	0018      	movs	r0, r3
 8000418:	2308      	movs	r3, #8
 800041a:	001a      	movs	r2, r3
 800041c:	2100      	movs	r1, #0
 800041e:	f002 ff61 	bl	80032e4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	0018      	movs	r0, r3
 8000426:	231c      	movs	r3, #28
 8000428:	001a      	movs	r2, r3
 800042a:	2100      	movs	r1, #0
 800042c:	f002 ff5a 	bl	80032e4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000430:	4b29      	ldr	r3, [pc, #164]	@ (80004d8 <MX_TIM3_Init+0xcc>)
 8000432:	4a2a      	ldr	r2, [pc, #168]	@ (80004dc <MX_TIM3_Init+0xd0>)
 8000434:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 479;
 8000436:	4b28      	ldr	r3, [pc, #160]	@ (80004d8 <MX_TIM3_Init+0xcc>)
 8000438:	22e0      	movs	r2, #224	@ 0xe0
 800043a:	32ff      	adds	r2, #255	@ 0xff
 800043c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800043e:	4b26      	ldr	r3, [pc, #152]	@ (80004d8 <MX_TIM3_Init+0xcc>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000444:	4b24      	ldr	r3, [pc, #144]	@ (80004d8 <MX_TIM3_Init+0xcc>)
 8000446:	2264      	movs	r2, #100	@ 0x64
 8000448:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800044a:	4b23      	ldr	r3, [pc, #140]	@ (80004d8 <MX_TIM3_Init+0xcc>)
 800044c:	2200      	movs	r2, #0
 800044e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000450:	4b21      	ldr	r3, [pc, #132]	@ (80004d8 <MX_TIM3_Init+0xcc>)
 8000452:	2200      	movs	r2, #0
 8000454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000456:	4b20      	ldr	r3, [pc, #128]	@ (80004d8 <MX_TIM3_Init+0xcc>)
 8000458:	0018      	movs	r0, r3
 800045a:	f002 f94b 	bl	80026f4 <HAL_TIM_PWM_Init>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000462:	f000 fa3f 	bl	80008e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000466:	2120      	movs	r1, #32
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2200      	movs	r2, #0
 8000472:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000474:	187a      	adds	r2, r7, r1
 8000476:	4b18      	ldr	r3, [pc, #96]	@ (80004d8 <MX_TIM3_Init+0xcc>)
 8000478:	0011      	movs	r1, r2
 800047a:	0018      	movs	r0, r3
 800047c:	f002 fec4 	bl	8003208 <HAL_TIMEx_MasterConfigSynchronization>
 8000480:	1e03      	subs	r3, r0, #0
 8000482:	d001      	beq.n	8000488 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000484:	f000 fa2e 	bl	80008e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2260      	movs	r2, #96	@ 0x60
 800048c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2232      	movs	r2, #50	@ 0x32
 8000492:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004a0:	1d39      	adds	r1, r7, #4
 80004a2:	4b0d      	ldr	r3, [pc, #52]	@ (80004d8 <MX_TIM3_Init+0xcc>)
 80004a4:	2208      	movs	r2, #8
 80004a6:	0018      	movs	r0, r3
 80004a8:	f002 fb1a 	bl	8002ae0 <HAL_TIM_PWM_ConfigChannel>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 80004b0:	f000 fa18 	bl	80008e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004b4:	1d39      	adds	r1, r7, #4
 80004b6:	4b08      	ldr	r3, [pc, #32]	@ (80004d8 <MX_TIM3_Init+0xcc>)
 80004b8:	220c      	movs	r2, #12
 80004ba:	0018      	movs	r0, r3
 80004bc:	f002 fb10 	bl	8002ae0 <HAL_TIM_PWM_ConfigChannel>
 80004c0:	1e03      	subs	r3, r0, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 80004c4:	f000 fa0e 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004c8:	4b03      	ldr	r3, [pc, #12]	@ (80004d8 <MX_TIM3_Init+0xcc>)
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 fac8 	bl	8000a60 <HAL_TIM_MspPostInit>

}
 80004d0:	46c0      	nop			@ (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b00a      	add	sp, #40	@ 0x28
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000080 	.word	0x20000080
 80004dc:	40000400 	.word	0x40000400

080004e0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80004e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000520 <MX_TIM14_Init+0x40>)
 80004e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000524 <MX_TIM14_Init+0x44>)
 80004e8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 47999;
 80004ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000520 <MX_TIM14_Init+0x40>)
 80004ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000528 <MX_TIM14_Init+0x48>)
 80004ee:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000520 <MX_TIM14_Init+0x40>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 80004f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000520 <MX_TIM14_Init+0x40>)
 80004f8:	2263      	movs	r2, #99	@ 0x63
 80004fa:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004fc:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <MX_TIM14_Init+0x40>)
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000502:	4b07      	ldr	r3, [pc, #28]	@ (8000520 <MX_TIM14_Init+0x40>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000508:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <MX_TIM14_Init+0x40>)
 800050a:	0018      	movs	r0, r3
 800050c:	f002 f850 	bl	80025b0 <HAL_TIM_Base_Init>
 8000510:	1e03      	subs	r3, r0, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000514:	f000 f9e6 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000518:	46c0      	nop			@ (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	200000c8 	.word	0x200000c8
 8000524:	40002000 	.word	0x40002000
 8000528:	0000bb7f 	.word	0x0000bb7f

0800052c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b089      	sub	sp, #36	@ 0x24
 8000530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000532:	240c      	movs	r4, #12
 8000534:	193b      	adds	r3, r7, r4
 8000536:	0018      	movs	r0, r3
 8000538:	2314      	movs	r3, #20
 800053a:	001a      	movs	r2, r3
 800053c:	2100      	movs	r1, #0
 800053e:	f002 fed1 	bl	80032e4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b1f      	ldr	r3, [pc, #124]	@ (80005c0 <MX_GPIO_Init+0x94>)
 8000544:	695a      	ldr	r2, [r3, #20]
 8000546:	4b1e      	ldr	r3, [pc, #120]	@ (80005c0 <MX_GPIO_Init+0x94>)
 8000548:	2180      	movs	r1, #128	@ 0x80
 800054a:	0289      	lsls	r1, r1, #10
 800054c:	430a      	orrs	r2, r1
 800054e:	615a      	str	r2, [r3, #20]
 8000550:	4b1b      	ldr	r3, [pc, #108]	@ (80005c0 <MX_GPIO_Init+0x94>)
 8000552:	695a      	ldr	r2, [r3, #20]
 8000554:	2380      	movs	r3, #128	@ 0x80
 8000556:	029b      	lsls	r3, r3, #10
 8000558:	4013      	ands	r3, r2
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055e:	4b18      	ldr	r3, [pc, #96]	@ (80005c0 <MX_GPIO_Init+0x94>)
 8000560:	695a      	ldr	r2, [r3, #20]
 8000562:	4b17      	ldr	r3, [pc, #92]	@ (80005c0 <MX_GPIO_Init+0x94>)
 8000564:	2180      	movs	r1, #128	@ 0x80
 8000566:	0309      	lsls	r1, r1, #12
 8000568:	430a      	orrs	r2, r1
 800056a:	615a      	str	r2, [r3, #20]
 800056c:	4b14      	ldr	r3, [pc, #80]	@ (80005c0 <MX_GPIO_Init+0x94>)
 800056e:	695a      	ldr	r2, [r3, #20]
 8000570:	2380      	movs	r3, #128	@ 0x80
 8000572:	031b      	lsls	r3, r3, #12
 8000574:	4013      	ands	r3, r2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057a:	4b11      	ldr	r3, [pc, #68]	@ (80005c0 <MX_GPIO_Init+0x94>)
 800057c:	695a      	ldr	r2, [r3, #20]
 800057e:	4b10      	ldr	r3, [pc, #64]	@ (80005c0 <MX_GPIO_Init+0x94>)
 8000580:	2180      	movs	r1, #128	@ 0x80
 8000582:	02c9      	lsls	r1, r1, #11
 8000584:	430a      	orrs	r2, r1
 8000586:	615a      	str	r2, [r3, #20]
 8000588:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <MX_GPIO_Init+0x94>)
 800058a:	695a      	ldr	r2, [r3, #20]
 800058c:	2380      	movs	r3, #128	@ 0x80
 800058e:	02db      	lsls	r3, r3, #11
 8000590:	4013      	ands	r3, r2
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : Blue_Switch_Pin */
  GPIO_InitStruct.Pin = Blue_Switch_Pin;
 8000596:	193b      	adds	r3, r7, r4
 8000598:	2201      	movs	r2, #1
 800059a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059c:	193b      	adds	r3, r7, r4
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005a2:	193b      	adds	r3, r7, r4
 80005a4:	2201      	movs	r2, #1
 80005a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Blue_Switch_GPIO_Port, &GPIO_InitStruct);
 80005a8:	193a      	adds	r2, r7, r4
 80005aa:	2390      	movs	r3, #144	@ 0x90
 80005ac:	05db      	lsls	r3, r3, #23
 80005ae:	0011      	movs	r1, r2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f000 fc67 	bl	8000e84 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b009      	add	sp, #36	@ 0x24
 80005bc:	bd90      	pop	{r4, r7, pc}
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	40021000 	.word	0x40021000

080005c4 <blink_sos_pwm>:

/* USER CODE BEGIN 4 */

void blink_sos_pwm(TIM_HandleTypeDef* htim, uint32_t channel)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 3; i++) {  // S = ...
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
 80005d2:	e040      	b.n	8000656 <blink_sos_pwm+0x92>
    __HAL_TIM_SET_COMPARE(htim, channel, 100); // "an"
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d104      	bne.n	80005e4 <blink_sos_pwm+0x20>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2264      	movs	r2, #100	@ 0x64
 80005e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80005e2:	e013      	b.n	800060c <blink_sos_pwm+0x48>
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	2b04      	cmp	r3, #4
 80005e8:	d104      	bne.n	80005f4 <blink_sos_pwm+0x30>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	2364      	movs	r3, #100	@ 0x64
 80005f0:	6393      	str	r3, [r2, #56]	@ 0x38
 80005f2:	e00b      	b.n	800060c <blink_sos_pwm+0x48>
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	2b08      	cmp	r3, #8
 80005f8:	d104      	bne.n	8000604 <blink_sos_pwm+0x40>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	2364      	movs	r3, #100	@ 0x64
 8000600:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000602:	e003      	b.n	800060c <blink_sos_pwm+0x48>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	2364      	movs	r3, #100	@ 0x64
 800060a:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_Delay(150);
 800060c:	2096      	movs	r0, #150	@ 0x96
 800060e:	f000 fb37 	bl	8000c80 <HAL_Delay>
    __HAL_TIM_SET_COMPARE(htim, channel, 0);   // "aus"
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d104      	bne.n	8000622 <blink_sos_pwm+0x5e>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2200      	movs	r2, #0
 800061e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000620:	e013      	b.n	800064a <blink_sos_pwm+0x86>
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2b04      	cmp	r3, #4
 8000626:	d104      	bne.n	8000632 <blink_sos_pwm+0x6e>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	2300      	movs	r3, #0
 800062e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000630:	e00b      	b.n	800064a <blink_sos_pwm+0x86>
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	2b08      	cmp	r3, #8
 8000636:	d104      	bne.n	8000642 <blink_sos_pwm+0x7e>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	2300      	movs	r3, #0
 800063e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000640:	e003      	b.n	800064a <blink_sos_pwm+0x86>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_Delay(150);
 800064a:	2096      	movs	r0, #150	@ 0x96
 800064c:	f000 fb18 	bl	8000c80 <HAL_Delay>
  for (int i = 0; i < 3; i++) {  // S = ...
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	3301      	adds	r3, #1
 8000654:	617b      	str	r3, [r7, #20]
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	2b02      	cmp	r3, #2
 800065a:	ddbb      	ble.n	80005d4 <blink_sos_pwm+0x10>
  }

  HAL_Delay(300);
 800065c:	2396      	movs	r3, #150	@ 0x96
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fb0d 	bl	8000c80 <HAL_Delay>

  for (int i = 0; i < 3; i++) {  // O = ---
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	e042      	b.n	80006f2 <blink_sos_pwm+0x12e>
    __HAL_TIM_SET_COMPARE(htim, channel, 100);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d104      	bne.n	800067c <blink_sos_pwm+0xb8>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2264      	movs	r2, #100	@ 0x64
 8000678:	635a      	str	r2, [r3, #52]	@ 0x34
 800067a:	e013      	b.n	80006a4 <blink_sos_pwm+0xe0>
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	2b04      	cmp	r3, #4
 8000680:	d104      	bne.n	800068c <blink_sos_pwm+0xc8>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	2364      	movs	r3, #100	@ 0x64
 8000688:	6393      	str	r3, [r2, #56]	@ 0x38
 800068a:	e00b      	b.n	80006a4 <blink_sos_pwm+0xe0>
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	2b08      	cmp	r3, #8
 8000690:	d104      	bne.n	800069c <blink_sos_pwm+0xd8>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	2364      	movs	r3, #100	@ 0x64
 8000698:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800069a:	e003      	b.n	80006a4 <blink_sos_pwm+0xe0>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	2364      	movs	r3, #100	@ 0x64
 80006a2:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_Delay(450);
 80006a4:	23e1      	movs	r3, #225	@ 0xe1
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 fae9 	bl	8000c80 <HAL_Delay>
    __HAL_TIM_SET_COMPARE(htim, channel, 0);
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d104      	bne.n	80006be <blink_sos_pwm+0xfa>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2200      	movs	r2, #0
 80006ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80006bc:	e013      	b.n	80006e6 <blink_sos_pwm+0x122>
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	2b04      	cmp	r3, #4
 80006c2:	d104      	bne.n	80006ce <blink_sos_pwm+0x10a>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	2300      	movs	r3, #0
 80006ca:	6393      	str	r3, [r2, #56]	@ 0x38
 80006cc:	e00b      	b.n	80006e6 <blink_sos_pwm+0x122>
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	2b08      	cmp	r3, #8
 80006d2:	d104      	bne.n	80006de <blink_sos_pwm+0x11a>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	2300      	movs	r3, #0
 80006da:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80006dc:	e003      	b.n	80006e6 <blink_sos_pwm+0x122>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	2300      	movs	r3, #0
 80006e4:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_Delay(150);
 80006e6:	2096      	movs	r0, #150	@ 0x96
 80006e8:	f000 faca 	bl	8000c80 <HAL_Delay>
  for (int i = 0; i < 3; i++) {  // O = ---
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	3301      	adds	r3, #1
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	2b02      	cmp	r3, #2
 80006f6:	ddb9      	ble.n	800066c <blink_sos_pwm+0xa8>
  }

  HAL_Delay(300);
 80006f8:	2396      	movs	r3, #150	@ 0x96
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	0018      	movs	r0, r3
 80006fe:	f000 fabf 	bl	8000c80 <HAL_Delay>

  for (int i = 0; i < 3; i++) {  // S = ...
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	e040      	b.n	800078a <blink_sos_pwm+0x1c6>
    __HAL_TIM_SET_COMPARE(htim, channel, 100);
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d104      	bne.n	8000718 <blink_sos_pwm+0x154>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2264      	movs	r2, #100	@ 0x64
 8000714:	635a      	str	r2, [r3, #52]	@ 0x34
 8000716:	e013      	b.n	8000740 <blink_sos_pwm+0x17c>
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	2b04      	cmp	r3, #4
 800071c:	d104      	bne.n	8000728 <blink_sos_pwm+0x164>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	2364      	movs	r3, #100	@ 0x64
 8000724:	6393      	str	r3, [r2, #56]	@ 0x38
 8000726:	e00b      	b.n	8000740 <blink_sos_pwm+0x17c>
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	2b08      	cmp	r3, #8
 800072c:	d104      	bne.n	8000738 <blink_sos_pwm+0x174>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	2364      	movs	r3, #100	@ 0x64
 8000734:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000736:	e003      	b.n	8000740 <blink_sos_pwm+0x17c>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	2364      	movs	r3, #100	@ 0x64
 800073e:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_Delay(150);
 8000740:	2096      	movs	r0, #150	@ 0x96
 8000742:	f000 fa9d 	bl	8000c80 <HAL_Delay>
    __HAL_TIM_SET_COMPARE(htim, channel, 0);
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d104      	bne.n	8000756 <blink_sos_pwm+0x192>
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2200      	movs	r2, #0
 8000752:	635a      	str	r2, [r3, #52]	@ 0x34
 8000754:	e013      	b.n	800077e <blink_sos_pwm+0x1ba>
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	2b04      	cmp	r3, #4
 800075a:	d104      	bne.n	8000766 <blink_sos_pwm+0x1a2>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	2300      	movs	r3, #0
 8000762:	6393      	str	r3, [r2, #56]	@ 0x38
 8000764:	e00b      	b.n	800077e <blink_sos_pwm+0x1ba>
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b08      	cmp	r3, #8
 800076a:	d104      	bne.n	8000776 <blink_sos_pwm+0x1b2>
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	2300      	movs	r3, #0
 8000772:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000774:	e003      	b.n	800077e <blink_sos_pwm+0x1ba>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	2300      	movs	r3, #0
 800077c:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_Delay(150);
 800077e:	2096      	movs	r0, #150	@ 0x96
 8000780:	f000 fa7e 	bl	8000c80 <HAL_Delay>
  for (int i = 0; i < 3; i++) {  // S = ...
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	3301      	adds	r3, #1
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	2b02      	cmp	r3, #2
 800078e:	ddbb      	ble.n	8000708 <blink_sos_pwm+0x144>
  }

  // wieder neutral
  __HAL_TIM_SET_COMPARE(htim, channel, 50); // neutral → "aus"
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d104      	bne.n	80007a0 <blink_sos_pwm+0x1dc>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2232      	movs	r2, #50	@ 0x32
 800079c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800079e:	e013      	b.n	80007c8 <blink_sos_pwm+0x204>
  __HAL_TIM_SET_COMPARE(htim, channel, 50); // neutral → "aus"
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	d104      	bne.n	80007b0 <blink_sos_pwm+0x1ec>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	2332      	movs	r3, #50	@ 0x32
 80007ac:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80007ae:	e00b      	b.n	80007c8 <blink_sos_pwm+0x204>
  __HAL_TIM_SET_COMPARE(htim, channel, 50); // neutral → "aus"
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	2b08      	cmp	r3, #8
 80007b4:	d104      	bne.n	80007c0 <blink_sos_pwm+0x1fc>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	2332      	movs	r3, #50	@ 0x32
 80007bc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80007be:	e003      	b.n	80007c8 <blink_sos_pwm+0x204>
  __HAL_TIM_SET_COMPARE(htim, channel, 50); // neutral → "aus"
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	2332      	movs	r3, #50	@ 0x32
 80007c6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007c8:	46c0      	nop			@ (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b006      	add	sp, #24
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <check_fxos8700>:

uint8_t check_fxos8700(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af04      	add	r7, sp, #16
  uint8_t fxos_addr = 0x1E << 1;  // 7-bit Adresse links shift → 0x3C
 80007d6:	1dfb      	adds	r3, r7, #7
 80007d8:	223c      	movs	r2, #60	@ 0x3c
 80007da:	701a      	strb	r2, [r3, #0]
  uint8_t reg_addr = 0x0D;       // WHO_AM_I Register
 80007dc:	1dbb      	adds	r3, r7, #6
 80007de:	220d      	movs	r2, #13
 80007e0:	701a      	strb	r2, [r3, #0]
  uint8_t id = 0;
 80007e2:	1d7b      	adds	r3, r7, #5
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]

  if (HAL_I2C_Mem_Read(&hi2c1, fxos_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, &id, 1, 100) != HAL_OK)
 80007e8:	1dfb      	adds	r3, r7, #7
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	b299      	uxth	r1, r3
 80007ee:	1dbb      	adds	r3, r7, #6
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	480c      	ldr	r0, [pc, #48]	@ (8000828 <check_fxos8700+0x58>)
 80007f6:	2364      	movs	r3, #100	@ 0x64
 80007f8:	9302      	str	r3, [sp, #8]
 80007fa:	2301      	movs	r3, #1
 80007fc:	9301      	str	r3, [sp, #4]
 80007fe:	1d7b      	adds	r3, r7, #5
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	2301      	movs	r3, #1
 8000804:	f000 fd54 	bl	80012b0 <HAL_I2C_Mem_Read>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <check_fxos8700+0x40>
  {
    return 0;  // Lesevorgang fehlgeschlagen
 800080c:	2300      	movs	r3, #0
 800080e:	e006      	b.n	800081e <check_fxos8700+0x4e>
  }

  if (id == 0xC7)
 8000810:	1d7b      	adds	r3, r7, #5
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2bc7      	cmp	r3, #199	@ 0xc7
 8000816:	d101      	bne.n	800081c <check_fxos8700+0x4c>
  {
    return 1;  // Sensor korrekt erkannt
 8000818:	2301      	movs	r3, #1
 800081a:	e000      	b.n	800081e <check_fxos8700+0x4e>
  }

  return 0;  // Falscher Wert
 800081c:	2300      	movs	r3, #0
}
 800081e:	0018      	movs	r0, r3
 8000820:	46bd      	mov	sp, r7
 8000822:	b002      	add	sp, #8
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			@ (mov r8, r8)
 8000828:	2000002c 	.word	0x2000002c

0800082c <check_fxas21002>:

uint8_t check_fxas21002(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af04      	add	r7, sp, #16
  uint8_t fxas_addr = 0x20 << 1;           // 7-bit Adresse (0x20) << 1 für HAL
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	2240      	movs	r2, #64	@ 0x40
 8000836:	701a      	strb	r2, [r3, #0]
  uint8_t reg_addr = 0x0C;                 // WHO_AM_I Register
 8000838:	1dbb      	adds	r3, r7, #6
 800083a:	220c      	movs	r2, #12
 800083c:	701a      	strb	r2, [r3, #0]
  uint8_t id = 0;
 800083e:	1d7b      	adds	r3, r7, #5
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]

  if (HAL_I2C_Mem_Read(&hi2c1, fxas_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, &id, 1, 100) != HAL_OK)
 8000844:	1dfb      	adds	r3, r7, #7
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b299      	uxth	r1, r3
 800084a:	1dbb      	adds	r3, r7, #6
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b29a      	uxth	r2, r3
 8000850:	480c      	ldr	r0, [pc, #48]	@ (8000884 <check_fxas21002+0x58>)
 8000852:	2364      	movs	r3, #100	@ 0x64
 8000854:	9302      	str	r3, [sp, #8]
 8000856:	2301      	movs	r3, #1
 8000858:	9301      	str	r3, [sp, #4]
 800085a:	1d7b      	adds	r3, r7, #5
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2301      	movs	r3, #1
 8000860:	f000 fd26 	bl	80012b0 <HAL_I2C_Mem_Read>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d001      	beq.n	800086c <check_fxas21002+0x40>
  {
    return 0;  // Lesevorgang fehlgeschlagen
 8000868:	2300      	movs	r3, #0
 800086a:	e006      	b.n	800087a <check_fxas21002+0x4e>
  }

  if (id == 0xD7)
 800086c:	1d7b      	adds	r3, r7, #5
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2bd7      	cmp	r3, #215	@ 0xd7
 8000872:	d101      	bne.n	8000878 <check_fxas21002+0x4c>
  {
    return 1;  // ID korrekt
 8000874:	2301      	movs	r3, #1
 8000876:	e000      	b.n	800087a <check_fxas21002+0x4e>
  }

  return 0;  // Falsche ID
 8000878:	2300      	movs	r3, #0
}
 800087a:	0018      	movs	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	b002      	add	sp, #8
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	2000002c 	.word	0x2000002c

08000888 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //JH ->__weak prototype: No pre-declaration needed
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM14)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a10      	ldr	r2, [pc, #64]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d119      	bne.n	80008ce <HAL_TIM_PeriodElapsedCallback+0x46>
  {
    static uint8_t brightness = 50;
    brightness += 10; //JH
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	330a      	adds	r3, #10
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80008a4:	701a      	strb	r2, [r3, #0]
    if (brightness > 100) brightness = 0;
 80008a6:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b64      	cmp	r3, #100	@ 0x64
 80008ac:	d902      	bls.n	80008b4 <HAL_TIM_PeriodElapsedCallback+0x2c>
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, brightness);
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80008b6:	781a      	ldrb	r2, [r3, #0]
 80008b8:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 100 - brightness);
 80008be:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	001a      	movs	r2, r3
 80008c4:	2364      	movs	r3, #100	@ 0x64
 80008c6:	1a9a      	subs	r2, r3, r2
 80008c8:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}//JH
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	40002000 	.word	0x40002000
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20000080 	.word	0x20000080

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	46c0      	nop			@ (mov r8, r8)
 80008ee:	e7fd      	b.n	80008ec <Error_Handler+0x8>

080008f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <HAL_MspInit+0x44>)
 80008f8:	699a      	ldr	r2, [r3, #24]
 80008fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <HAL_MspInit+0x44>)
 80008fc:	2101      	movs	r1, #1
 80008fe:	430a      	orrs	r2, r1
 8000900:	619a      	str	r2, [r3, #24]
 8000902:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <HAL_MspInit+0x44>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	2201      	movs	r2, #1
 8000908:	4013      	ands	r3, r2
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <HAL_MspInit+0x44>)
 8000910:	69da      	ldr	r2, [r3, #28]
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <HAL_MspInit+0x44>)
 8000914:	2180      	movs	r1, #128	@ 0x80
 8000916:	0549      	lsls	r1, r1, #21
 8000918:	430a      	orrs	r2, r1
 800091a:	61da      	str	r2, [r3, #28]
 800091c:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <HAL_MspInit+0x44>)
 800091e:	69da      	ldr	r2, [r3, #28]
 8000920:	2380      	movs	r3, #128	@ 0x80
 8000922:	055b      	lsls	r3, r3, #21
 8000924:	4013      	ands	r3, r2
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b002      	add	sp, #8
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b08b      	sub	sp, #44	@ 0x2c
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	2414      	movs	r4, #20
 8000942:	193b      	adds	r3, r7, r4
 8000944:	0018      	movs	r0, r3
 8000946:	2314      	movs	r3, #20
 8000948:	001a      	movs	r2, r3
 800094a:	2100      	movs	r1, #0
 800094c:	f002 fcca 	bl	80032e4 <memset>
  if(hi2c->Instance==I2C1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a1c      	ldr	r2, [pc, #112]	@ (80009c8 <HAL_I2C_MspInit+0x90>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d131      	bne.n	80009be <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <HAL_I2C_MspInit+0x94>)
 800095c:	695a      	ldr	r2, [r3, #20]
 800095e:	4b1b      	ldr	r3, [pc, #108]	@ (80009cc <HAL_I2C_MspInit+0x94>)
 8000960:	2180      	movs	r1, #128	@ 0x80
 8000962:	02c9      	lsls	r1, r1, #11
 8000964:	430a      	orrs	r2, r1
 8000966:	615a      	str	r2, [r3, #20]
 8000968:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <HAL_I2C_MspInit+0x94>)
 800096a:	695a      	ldr	r2, [r3, #20]
 800096c:	2380      	movs	r3, #128	@ 0x80
 800096e:	02db      	lsls	r3, r3, #11
 8000970:	4013      	ands	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000976:	0021      	movs	r1, r4
 8000978:	187b      	adds	r3, r7, r1
 800097a:	22c0      	movs	r2, #192	@ 0xc0
 800097c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2212      	movs	r2, #18
 8000982:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2203      	movs	r2, #3
 800098e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2201      	movs	r2, #1
 8000994:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	187b      	adds	r3, r7, r1
 8000998:	4a0d      	ldr	r2, [pc, #52]	@ (80009d0 <HAL_I2C_MspInit+0x98>)
 800099a:	0019      	movs	r1, r3
 800099c:	0010      	movs	r0, r2
 800099e:	f000 fa71 	bl	8000e84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009a2:	4b0a      	ldr	r3, [pc, #40]	@ (80009cc <HAL_I2C_MspInit+0x94>)
 80009a4:	69da      	ldr	r2, [r3, #28]
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <HAL_I2C_MspInit+0x94>)
 80009a8:	2180      	movs	r1, #128	@ 0x80
 80009aa:	0389      	lsls	r1, r1, #14
 80009ac:	430a      	orrs	r2, r1
 80009ae:	61da      	str	r2, [r3, #28]
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <HAL_I2C_MspInit+0x94>)
 80009b2:	69da      	ldr	r2, [r3, #28]
 80009b4:	2380      	movs	r3, #128	@ 0x80
 80009b6:	039b      	lsls	r3, r3, #14
 80009b8:	4013      	ands	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b00b      	add	sp, #44	@ 0x2c
 80009c4:	bd90      	pop	{r4, r7, pc}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	40005400 	.word	0x40005400
 80009cc:	40021000 	.word	0x40021000
 80009d0:	48000400 	.word	0x48000400

080009d4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a09      	ldr	r2, [pc, #36]	@ (8000a08 <HAL_TIM_PWM_MspInit+0x34>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d10b      	bne.n	80009fe <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <HAL_TIM_PWM_MspInit+0x38>)
 80009e8:	69da      	ldr	r2, [r3, #28]
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <HAL_TIM_PWM_MspInit+0x38>)
 80009ec:	2102      	movs	r1, #2
 80009ee:	430a      	orrs	r2, r1
 80009f0:	61da      	str	r2, [r3, #28]
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <HAL_TIM_PWM_MspInit+0x38>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	2202      	movs	r2, #2
 80009f8:	4013      	ands	r3, r2
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b004      	add	sp, #16
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	40000400 	.word	0x40000400
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a58 <HAL_TIM_Base_MspInit+0x48>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d115      	bne.n	8000a4e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <HAL_TIM_Base_MspInit+0x4c>)
 8000a24:	69da      	ldr	r2, [r3, #28]
 8000a26:	4b0d      	ldr	r3, [pc, #52]	@ (8000a5c <HAL_TIM_Base_MspInit+0x4c>)
 8000a28:	2180      	movs	r1, #128	@ 0x80
 8000a2a:	0049      	lsls	r1, r1, #1
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	61da      	str	r2, [r3, #28]
 8000a30:	4b0a      	ldr	r3, [pc, #40]	@ (8000a5c <HAL_TIM_Base_MspInit+0x4c>)
 8000a32:	69da      	ldr	r2, [r3, #28]
 8000a34:	2380      	movs	r3, #128	@ 0x80
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	2013      	movs	r0, #19
 8000a44:	f000 f9ec 	bl	8000e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000a48:	2013      	movs	r0, #19
 8000a4a:	f000 f9fe 	bl	8000e4a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b004      	add	sp, #16
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	40002000 	.word	0x40002000
 8000a5c:	40021000 	.word	0x40021000

08000a60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b089      	sub	sp, #36	@ 0x24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	240c      	movs	r4, #12
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	2314      	movs	r3, #20
 8000a70:	001a      	movs	r2, r3
 8000a72:	2100      	movs	r1, #0
 8000a74:	f002 fc36 	bl	80032e4 <memset>
  if(htim->Instance==TIM3)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a20      	ldr	r2, [pc, #128]	@ (8000b00 <HAL_TIM_MspPostInit+0xa0>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d13a      	bne.n	8000af8 <HAL_TIM_MspPostInit+0x98>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b20      	ldr	r3, [pc, #128]	@ (8000b04 <HAL_TIM_MspPostInit+0xa4>)
 8000a84:	695a      	ldr	r2, [r3, #20]
 8000a86:	4b1f      	ldr	r3, [pc, #124]	@ (8000b04 <HAL_TIM_MspPostInit+0xa4>)
 8000a88:	2180      	movs	r1, #128	@ 0x80
 8000a8a:	0309      	lsls	r1, r1, #12
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	615a      	str	r2, [r3, #20]
 8000a90:	4b1c      	ldr	r3, [pc, #112]	@ (8000b04 <HAL_TIM_MspPostInit+0xa4>)
 8000a92:	695a      	ldr	r2, [r3, #20]
 8000a94:	2380      	movs	r3, #128	@ 0x80
 8000a96:	031b      	lsls	r3, r3, #12
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	2280      	movs	r2, #128	@ 0x80
 8000aa2:	0052      	lsls	r2, r2, #1
 8000aa4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	2201      	movs	r2, #1
 8000abc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	4a11      	ldr	r2, [pc, #68]	@ (8000b08 <HAL_TIM_MspPostInit+0xa8>)
 8000ac2:	0019      	movs	r1, r3
 8000ac4:	0010      	movs	r0, r2
 8000ac6:	f000 f9dd 	bl	8000e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000aca:	0021      	movs	r1, r4
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2280      	movs	r2, #128	@ 0x80
 8000ad0:	0092      	lsls	r2, r2, #2
 8000ad2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	4a06      	ldr	r2, [pc, #24]	@ (8000b08 <HAL_TIM_MspPostInit+0xa8>)
 8000af0:	0019      	movs	r1, r3
 8000af2:	0010      	movs	r0, r2
 8000af4:	f000 f9c6 	bl	8000e84 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000af8:	46c0      	nop			@ (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b009      	add	sp, #36	@ 0x24
 8000afe:	bd90      	pop	{r4, r7, pc}
 8000b00:	40000400 	.word	0x40000400
 8000b04:	40021000 	.word	0x40021000
 8000b08:	48000800 	.word	0x48000800

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b10:	46c0      	nop			@ (mov r8, r8)
 8000b12:	e7fd      	b.n	8000b10 <NMI_Handler+0x4>

08000b14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b18:	46c0      	nop			@ (mov r8, r8)
 8000b1a:	e7fd      	b.n	8000b18 <HardFault_Handler+0x4>

08000b1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b20:	46c0      	nop			@ (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2a:	46c0      	nop			@ (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b34:	f000 f888 	bl	8000c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b44:	4b03      	ldr	r3, [pc, #12]	@ (8000b54 <TIM14_IRQHandler+0x14>)
 8000b46:	0018      	movs	r0, r3
 8000b48:	f001 fedc 	bl	8002904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000b4c:	46c0      	nop			@ (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	200000c8 	.word	0x200000c8

08000b58 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b5c:	46c0      	nop			@ (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b64:	480d      	ldr	r0, [pc, #52]	@ (8000b9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b66:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000b68:	f7ff fff6 	bl	8000b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b6c:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6e:	490d      	ldr	r1, [pc, #52]	@ (8000ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <LoopForever+0xe>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b84:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb0 <LoopForever+0x16>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b92:	f002 fbaf 	bl	80032f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b96:	f7ff fb43 	bl	8000220 <main>

08000b9a <LoopForever>:

LoopForever:
    b LoopForever
 8000b9a:	e7fe      	b.n	8000b9a <LoopForever>
  ldr   r0, =_estack
 8000b9c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ba8:	0800338c 	.word	0x0800338c
  ldr r2, =_sbss
 8000bac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bb0:	20000114 	.word	0x20000114

08000bb4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC1_COMP_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bbc:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <HAL_Init+0x24>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <HAL_Init+0x24>)
 8000bc2:	2110      	movs	r1, #16
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f000 f809 	bl	8000be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bce:	f7ff fe8f 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
}
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	40022000 	.word	0x40022000

08000be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <HAL_InitTick+0x5c>)
 8000bea:	681c      	ldr	r4, [r3, #0]
 8000bec:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <HAL_InitTick+0x60>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	0019      	movs	r1, r3
 8000bf2:	23fa      	movs	r3, #250	@ 0xfa
 8000bf4:	0098      	lsls	r0, r3, #2
 8000bf6:	f7ff fa87 	bl	8000108 <__udivsi3>
 8000bfa:	0003      	movs	r3, r0
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	0020      	movs	r0, r4
 8000c00:	f7ff fa82 	bl	8000108 <__udivsi3>
 8000c04:	0003      	movs	r3, r0
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 f92f 	bl	8000e6a <HAL_SYSTICK_Config>
 8000c0c:	1e03      	subs	r3, r0, #0
 8000c0e:	d001      	beq.n	8000c14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	e00f      	b.n	8000c34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	d80b      	bhi.n	8000c32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	425b      	negs	r3, r3
 8000c20:	2200      	movs	r2, #0
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 f8fc 	bl	8000e20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <HAL_InitTick+0x64>)
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e000      	b.n	8000c34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b003      	add	sp, #12
 8000c3a:	bd90      	pop	{r4, r7, pc}
 8000c3c:	20000004 	.word	0x20000004
 8000c40:	2000000c 	.word	0x2000000c
 8000c44:	20000008 	.word	0x20000008

08000c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <HAL_IncTick+0x1c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	001a      	movs	r2, r3
 8000c52:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <HAL_IncTick+0x20>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	18d2      	adds	r2, r2, r3
 8000c58:	4b03      	ldr	r3, [pc, #12]	@ (8000c68 <HAL_IncTick+0x20>)
 8000c5a:	601a      	str	r2, [r3, #0]
}
 8000c5c:	46c0      	nop			@ (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	2000000c 	.word	0x2000000c
 8000c68:	20000110 	.word	0x20000110

08000c6c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b02      	ldr	r3, [pc, #8]	@ (8000c7c <HAL_GetTick+0x10>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	0018      	movs	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	20000110 	.word	0x20000110

08000c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c88:	f7ff fff0 	bl	8000c6c <HAL_GetTick>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	3301      	adds	r3, #1
 8000c98:	d005      	beq.n	8000ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <HAL_Delay+0x44>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	001a      	movs	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	189b      	adds	r3, r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	f7ff ffe0 	bl	8000c6c <HAL_GetTick>
 8000cac:	0002      	movs	r2, r0
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d8f7      	bhi.n	8000ca8 <HAL_Delay+0x28>
  {
  }
}
 8000cb8:	46c0      	nop			@ (mov r8, r8)
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b004      	add	sp, #16
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			@ (mov r8, r8)
 8000cc4:	2000000c 	.word	0x2000000c

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	0002      	movs	r2, r0
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cda:	d809      	bhi.n	8000cf0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	231f      	movs	r3, #31
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	4b04      	ldr	r3, [pc, #16]	@ (8000cf8 <__NVIC_EnableIRQ+0x30>)
 8000ce8:	2101      	movs	r1, #1
 8000cea:	4091      	lsls	r1, r2
 8000cec:	000a      	movs	r2, r1
 8000cee:	601a      	str	r2, [r3, #0]
  }
}
 8000cf0:	46c0      	nop			@ (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b002      	add	sp, #8
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	0002      	movs	r2, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d10:	d828      	bhi.n	8000d64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d12:	4a2f      	ldr	r2, [pc, #188]	@ (8000dd0 <__NVIC_SetPriority+0xd4>)
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b25b      	sxtb	r3, r3
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	33c0      	adds	r3, #192	@ 0xc0
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	589b      	ldr	r3, [r3, r2]
 8000d22:	1dfa      	adds	r2, r7, #7
 8000d24:	7812      	ldrb	r2, [r2, #0]
 8000d26:	0011      	movs	r1, r2
 8000d28:	2203      	movs	r2, #3
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	00d2      	lsls	r2, r2, #3
 8000d2e:	21ff      	movs	r1, #255	@ 0xff
 8000d30:	4091      	lsls	r1, r2
 8000d32:	000a      	movs	r2, r1
 8000d34:	43d2      	mvns	r2, r2
 8000d36:	401a      	ands	r2, r3
 8000d38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	019b      	lsls	r3, r3, #6
 8000d3e:	22ff      	movs	r2, #255	@ 0xff
 8000d40:	401a      	ands	r2, r3
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	0018      	movs	r0, r3
 8000d48:	2303      	movs	r3, #3
 8000d4a:	4003      	ands	r3, r0
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d50:	481f      	ldr	r0, [pc, #124]	@ (8000dd0 <__NVIC_SetPriority+0xd4>)
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b25b      	sxtb	r3, r3
 8000d58:	089b      	lsrs	r3, r3, #2
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	33c0      	adds	r3, #192	@ 0xc0
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d62:	e031      	b.n	8000dc8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d64:	4a1b      	ldr	r2, [pc, #108]	@ (8000dd4 <__NVIC_SetPriority+0xd8>)
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	0019      	movs	r1, r3
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	400b      	ands	r3, r1
 8000d70:	3b08      	subs	r3, #8
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	3306      	adds	r3, #6
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	18d3      	adds	r3, r2, r3
 8000d7a:	3304      	adds	r3, #4
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	1dfa      	adds	r2, r7, #7
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	0011      	movs	r1, r2
 8000d84:	2203      	movs	r2, #3
 8000d86:	400a      	ands	r2, r1
 8000d88:	00d2      	lsls	r2, r2, #3
 8000d8a:	21ff      	movs	r1, #255	@ 0xff
 8000d8c:	4091      	lsls	r1, r2
 8000d8e:	000a      	movs	r2, r1
 8000d90:	43d2      	mvns	r2, r2
 8000d92:	401a      	ands	r2, r3
 8000d94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	22ff      	movs	r2, #255	@ 0xff
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	0018      	movs	r0, r3
 8000da4:	2303      	movs	r3, #3
 8000da6:	4003      	ands	r3, r0
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dac:	4809      	ldr	r0, [pc, #36]	@ (8000dd4 <__NVIC_SetPriority+0xd8>)
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	001c      	movs	r4, r3
 8000db4:	230f      	movs	r3, #15
 8000db6:	4023      	ands	r3, r4
 8000db8:	3b08      	subs	r3, #8
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	3306      	adds	r3, #6
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	18c3      	adds	r3, r0, r3
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	601a      	str	r2, [r3, #0]
}
 8000dc8:	46c0      	nop			@ (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b003      	add	sp, #12
 8000dce:	bd90      	pop	{r4, r7, pc}
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	1e5a      	subs	r2, r3, #1
 8000de4:	2380      	movs	r3, #128	@ 0x80
 8000de6:	045b      	lsls	r3, r3, #17
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d301      	bcc.n	8000df0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dec:	2301      	movs	r3, #1
 8000dee:	e010      	b.n	8000e12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df0:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <SysTick_Config+0x44>)
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	3a01      	subs	r2, #1
 8000df6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df8:	2301      	movs	r3, #1
 8000dfa:	425b      	negs	r3, r3
 8000dfc:	2103      	movs	r1, #3
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f7ff ff7c 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e04:	4b05      	ldr	r3, [pc, #20]	@ (8000e1c <SysTick_Config+0x44>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0a:	4b04      	ldr	r3, [pc, #16]	@ (8000e1c <SysTick_Config+0x44>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	0018      	movs	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b002      	add	sp, #8
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	e000e010 	.word	0xe000e010

08000e20 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	1c02      	adds	r2, r0, #0
 8000e30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff ff5d 	bl	8000cfc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b004      	add	sp, #16
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	0002      	movs	r2, r0
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f7ff ff33 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b002      	add	sp, #8
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff ffaf 	bl	8000dd8 <SysTick_Config>
 8000e7a:	0003      	movs	r3, r0
}
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b002      	add	sp, #8
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e92:	e14f      	b.n	8001134 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2101      	movs	r1, #1
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	4091      	lsls	r1, r2
 8000e9e:	000a      	movs	r2, r1
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d100      	bne.n	8000eac <HAL_GPIO_Init+0x28>
 8000eaa:	e140      	b.n	800112e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d005      	beq.n	8000ec4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d130      	bne.n	8000f26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	409a      	lsls	r2, r3
 8000ed2:	0013      	movs	r3, r2
 8000ed4:	43da      	mvns	r2, r3
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	409a      	lsls	r2, r3
 8000ee6:	0013      	movs	r3, r2
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000efa:	2201      	movs	r2, #1
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
 8000f00:	0013      	movs	r3, r2
 8000f02:	43da      	mvns	r2, r3
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	091b      	lsrs	r3, r3, #4
 8000f10:	2201      	movs	r2, #1
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
 8000f18:	0013      	movs	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d017      	beq.n	8000f62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	0013      	movs	r3, r2
 8000f42:	43da      	mvns	r2, r3
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	409a      	lsls	r2, r3
 8000f54:	0013      	movs	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2203      	movs	r2, #3
 8000f68:	4013      	ands	r3, r2
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d123      	bne.n	8000fb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	08da      	lsrs	r2, r3, #3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3208      	adds	r2, #8
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	58d3      	ldr	r3, [r2, r3]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	2207      	movs	r2, #7
 8000f80:	4013      	ands	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	220f      	movs	r2, #15
 8000f86:	409a      	lsls	r2, r3
 8000f88:	0013      	movs	r3, r2
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	691a      	ldr	r2, [r3, #16]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	2107      	movs	r1, #7
 8000f9a:	400b      	ands	r3, r1
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	0013      	movs	r3, r2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	08da      	lsrs	r2, r3, #3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3208      	adds	r2, #8
 8000fb0:	0092      	lsls	r2, r2, #2
 8000fb2:	6939      	ldr	r1, [r7, #16]
 8000fb4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	0013      	movs	r3, r2
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	0013      	movs	r3, r2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	23c0      	movs	r3, #192	@ 0xc0
 8000ff0:	029b      	lsls	r3, r3, #10
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d100      	bne.n	8000ff8 <HAL_GPIO_Init+0x174>
 8000ff6:	e09a      	b.n	800112e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff8:	4b54      	ldr	r3, [pc, #336]	@ (800114c <HAL_GPIO_Init+0x2c8>)
 8000ffa:	699a      	ldr	r2, [r3, #24]
 8000ffc:	4b53      	ldr	r3, [pc, #332]	@ (800114c <HAL_GPIO_Init+0x2c8>)
 8000ffe:	2101      	movs	r1, #1
 8001000:	430a      	orrs	r2, r1
 8001002:	619a      	str	r2, [r3, #24]
 8001004:	4b51      	ldr	r3, [pc, #324]	@ (800114c <HAL_GPIO_Init+0x2c8>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	2201      	movs	r2, #1
 800100a:	4013      	ands	r3, r2
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001010:	4a4f      	ldr	r2, [pc, #316]	@ (8001150 <HAL_GPIO_Init+0x2cc>)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	089b      	lsrs	r3, r3, #2
 8001016:	3302      	adds	r3, #2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	589b      	ldr	r3, [r3, r2]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2203      	movs	r2, #3
 8001022:	4013      	ands	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	409a      	lsls	r2, r3
 800102a:	0013      	movs	r3, r2
 800102c:	43da      	mvns	r2, r3
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	2390      	movs	r3, #144	@ 0x90
 8001038:	05db      	lsls	r3, r3, #23
 800103a:	429a      	cmp	r2, r3
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0x1e2>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a44      	ldr	r2, [pc, #272]	@ (8001154 <HAL_GPIO_Init+0x2d0>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00d      	beq.n	8001062 <HAL_GPIO_Init+0x1de>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a43      	ldr	r2, [pc, #268]	@ (8001158 <HAL_GPIO_Init+0x2d4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d007      	beq.n	800105e <HAL_GPIO_Init+0x1da>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a42      	ldr	r2, [pc, #264]	@ (800115c <HAL_GPIO_Init+0x2d8>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_GPIO_Init+0x1d6>
 8001056:	2303      	movs	r3, #3
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x1e4>
 800105a:	2305      	movs	r3, #5
 800105c:	e004      	b.n	8001068 <HAL_GPIO_Init+0x1e4>
 800105e:	2302      	movs	r3, #2
 8001060:	e002      	b.n	8001068 <HAL_GPIO_Init+0x1e4>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <HAL_GPIO_Init+0x1e4>
 8001066:	2300      	movs	r3, #0
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	2103      	movs	r1, #3
 800106c:	400a      	ands	r2, r1
 800106e:	0092      	lsls	r2, r2, #2
 8001070:	4093      	lsls	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001078:	4935      	ldr	r1, [pc, #212]	@ (8001150 <HAL_GPIO_Init+0x2cc>)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3302      	adds	r3, #2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001086:	4b36      	ldr	r3, [pc, #216]	@ (8001160 <HAL_GPIO_Init+0x2dc>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	43da      	mvns	r2, r3
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	2380      	movs	r3, #128	@ 0x80
 800109c:	035b      	lsls	r3, r3, #13
 800109e:	4013      	ands	r3, r2
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001160 <HAL_GPIO_Init+0x2dc>)
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80010b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001160 <HAL_GPIO_Init+0x2dc>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	43da      	mvns	r2, r3
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	2380      	movs	r3, #128	@ 0x80
 80010c6:	039b      	lsls	r3, r3, #14
 80010c8:	4013      	ands	r3, r2
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010d4:	4b22      	ldr	r3, [pc, #136]	@ (8001160 <HAL_GPIO_Init+0x2dc>)
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80010da:	4b21      	ldr	r3, [pc, #132]	@ (8001160 <HAL_GPIO_Init+0x2dc>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	43da      	mvns	r2, r3
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	2380      	movs	r3, #128	@ 0x80
 80010f0:	029b      	lsls	r3, r3, #10
 80010f2:	4013      	ands	r3, r2
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010fe:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <HAL_GPIO_Init+0x2dc>)
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001104:	4b16      	ldr	r3, [pc, #88]	@ (8001160 <HAL_GPIO_Init+0x2dc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	43da      	mvns	r2, r3
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	2380      	movs	r3, #128	@ 0x80
 800111a:	025b      	lsls	r3, r3, #9
 800111c:	4013      	ands	r3, r2
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001128:	4b0d      	ldr	r3, [pc, #52]	@ (8001160 <HAL_GPIO_Init+0x2dc>)
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	3301      	adds	r3, #1
 8001132:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	40da      	lsrs	r2, r3
 800113c:	1e13      	subs	r3, r2, #0
 800113e:	d000      	beq.n	8001142 <HAL_GPIO_Init+0x2be>
 8001140:	e6a8      	b.n	8000e94 <HAL_GPIO_Init+0x10>
  } 
}
 8001142:	46c0      	nop			@ (mov r8, r8)
 8001144:	46c0      	nop			@ (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	b006      	add	sp, #24
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40021000 	.word	0x40021000
 8001150:	40010000 	.word	0x40010000
 8001154:	48000400 	.word	0x48000400
 8001158:	48000800 	.word	0x48000800
 800115c:	48000c00 	.word	0x48000c00
 8001160:	40010400 	.word	0x40010400

08001164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e08f      	b.n	8001296 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2241      	movs	r2, #65	@ 0x41
 800117a:	5c9b      	ldrb	r3, [r3, r2]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d107      	bne.n	8001192 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2240      	movs	r2, #64	@ 0x40
 8001186:	2100      	movs	r1, #0
 8001188:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	0018      	movs	r0, r3
 800118e:	f7ff fbd3 	bl	8000938 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2241      	movs	r2, #65	@ 0x41
 8001196:	2124      	movs	r1, #36	@ 0x24
 8001198:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2101      	movs	r1, #1
 80011a6:	438a      	bics	r2, r1
 80011a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	493b      	ldr	r1, [pc, #236]	@ (80012a0 <HAL_I2C_Init+0x13c>)
 80011b4:	400a      	ands	r2, r1
 80011b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4938      	ldr	r1, [pc, #224]	@ (80012a4 <HAL_I2C_Init+0x140>)
 80011c4:	400a      	ands	r2, r1
 80011c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d108      	bne.n	80011e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2180      	movs	r1, #128	@ 0x80
 80011da:	0209      	lsls	r1, r1, #8
 80011dc:	430a      	orrs	r2, r1
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	e007      	b.n	80011f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2184      	movs	r1, #132	@ 0x84
 80011ec:	0209      	lsls	r1, r1, #8
 80011ee:	430a      	orrs	r2, r1
 80011f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d109      	bne.n	800120e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2180      	movs	r1, #128	@ 0x80
 8001206:	0109      	lsls	r1, r1, #4
 8001208:	430a      	orrs	r2, r1
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	e007      	b.n	800121e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4923      	ldr	r1, [pc, #140]	@ (80012a8 <HAL_I2C_Init+0x144>)
 800121a:	400a      	ands	r2, r1
 800121c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4920      	ldr	r1, [pc, #128]	@ (80012ac <HAL_I2C_Init+0x148>)
 800122a:	430a      	orrs	r2, r1
 800122c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	491a      	ldr	r1, [pc, #104]	@ (80012a4 <HAL_I2C_Init+0x140>)
 800123a:	400a      	ands	r2, r1
 800123c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691a      	ldr	r2, [r3, #16]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	431a      	orrs	r2, r3
 8001248:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	430a      	orrs	r2, r1
 8001256:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69d9      	ldr	r1, [r3, #28]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1a      	ldr	r2, [r3, #32]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2101      	movs	r1, #1
 8001274:	430a      	orrs	r2, r1
 8001276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2241      	movs	r2, #65	@ 0x41
 8001282:	2120      	movs	r1, #32
 8001284:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2242      	movs	r2, #66	@ 0x42
 8001290:	2100      	movs	r1, #0
 8001292:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	0018      	movs	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	b002      	add	sp, #8
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			@ (mov r8, r8)
 80012a0:	f0ffffff 	.word	0xf0ffffff
 80012a4:	ffff7fff 	.word	0xffff7fff
 80012a8:	fffff7ff 	.word	0xfffff7ff
 80012ac:	02008000 	.word	0x02008000

080012b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b089      	sub	sp, #36	@ 0x24
 80012b4:	af02      	add	r7, sp, #8
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	000c      	movs	r4, r1
 80012ba:	0010      	movs	r0, r2
 80012bc:	0019      	movs	r1, r3
 80012be:	230a      	movs	r3, #10
 80012c0:	18fb      	adds	r3, r7, r3
 80012c2:	1c22      	adds	r2, r4, #0
 80012c4:	801a      	strh	r2, [r3, #0]
 80012c6:	2308      	movs	r3, #8
 80012c8:	18fb      	adds	r3, r7, r3
 80012ca:	1c02      	adds	r2, r0, #0
 80012cc:	801a      	strh	r2, [r3, #0]
 80012ce:	1dbb      	adds	r3, r7, #6
 80012d0:	1c0a      	adds	r2, r1, #0
 80012d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2241      	movs	r2, #65	@ 0x41
 80012d8:	5c9b      	ldrb	r3, [r3, r2]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b20      	cmp	r3, #32
 80012de:	d000      	beq.n	80012e2 <HAL_I2C_Mem_Read+0x32>
 80012e0:	e110      	b.n	8001504 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80012e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d004      	beq.n	80012f2 <HAL_I2C_Mem_Read+0x42>
 80012e8:	232c      	movs	r3, #44	@ 0x2c
 80012ea:	18fb      	adds	r3, r7, r3
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d105      	bne.n	80012fe <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2280      	movs	r2, #128	@ 0x80
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e103      	b.n	8001506 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2240      	movs	r2, #64	@ 0x40
 8001302:	5c9b      	ldrb	r3, [r3, r2]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d101      	bne.n	800130c <HAL_I2C_Mem_Read+0x5c>
 8001308:	2302      	movs	r3, #2
 800130a:	e0fc      	b.n	8001506 <HAL_I2C_Mem_Read+0x256>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2240      	movs	r2, #64	@ 0x40
 8001310:	2101      	movs	r1, #1
 8001312:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001314:	f7ff fcaa 	bl	8000c6c <HAL_GetTick>
 8001318:	0003      	movs	r3, r0
 800131a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800131c:	2380      	movs	r3, #128	@ 0x80
 800131e:	0219      	lsls	r1, r3, #8
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2319      	movs	r3, #25
 8001328:	2201      	movs	r2, #1
 800132a:	f000 f979 	bl	8001620 <I2C_WaitOnFlagUntilTimeout>
 800132e:	1e03      	subs	r3, r0, #0
 8001330:	d001      	beq.n	8001336 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e0e7      	b.n	8001506 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2241      	movs	r2, #65	@ 0x41
 800133a:	2122      	movs	r1, #34	@ 0x22
 800133c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2242      	movs	r2, #66	@ 0x42
 8001342:	2140      	movs	r1, #64	@ 0x40
 8001344:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001350:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	222c      	movs	r2, #44	@ 0x2c
 8001356:	18ba      	adds	r2, r7, r2
 8001358:	8812      	ldrh	r2, [r2, #0]
 800135a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001362:	1dbb      	adds	r3, r7, #6
 8001364:	881c      	ldrh	r4, [r3, #0]
 8001366:	2308      	movs	r3, #8
 8001368:	18fb      	adds	r3, r7, r3
 800136a:	881a      	ldrh	r2, [r3, #0]
 800136c:	230a      	movs	r3, #10
 800136e:	18fb      	adds	r3, r7, r3
 8001370:	8819      	ldrh	r1, [r3, #0]
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	0023      	movs	r3, r4
 800137e:	f000 f8cb 	bl	8001518 <I2C_RequestMemoryRead>
 8001382:	1e03      	subs	r3, r0, #0
 8001384:	d005      	beq.n	8001392 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2240      	movs	r2, #64	@ 0x40
 800138a:	2100      	movs	r1, #0
 800138c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e0b9      	b.n	8001506 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001396:	b29b      	uxth	r3, r3
 8001398:	2bff      	cmp	r3, #255	@ 0xff
 800139a:	d911      	bls.n	80013c0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2201      	movs	r2, #1
 80013a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	2380      	movs	r3, #128	@ 0x80
 80013aa:	045c      	lsls	r4, r3, #17
 80013ac:	230a      	movs	r3, #10
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	8819      	ldrh	r1, [r3, #0]
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	4b56      	ldr	r3, [pc, #344]	@ (8001510 <HAL_I2C_Mem_Read+0x260>)
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	0023      	movs	r3, r4
 80013ba:	f000 fb0b 	bl	80019d4 <I2C_TransferConfig>
 80013be:	e012      	b.n	80013e6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	2380      	movs	r3, #128	@ 0x80
 80013d2:	049c      	lsls	r4, r3, #18
 80013d4:	230a      	movs	r3, #10
 80013d6:	18fb      	adds	r3, r7, r3
 80013d8:	8819      	ldrh	r1, [r3, #0]
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001510 <HAL_I2C_Mem_Read+0x260>)
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	0023      	movs	r3, r4
 80013e2:	f000 faf7 	bl	80019d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80013e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	0013      	movs	r3, r2
 80013f0:	2200      	movs	r2, #0
 80013f2:	2104      	movs	r1, #4
 80013f4:	f000 f914 	bl	8001620 <I2C_WaitOnFlagUntilTimeout>
 80013f8:	1e03      	subs	r3, r0, #0
 80013fa:	d001      	beq.n	8001400 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e082      	b.n	8001506 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800141c:	3b01      	subs	r3, #1
 800141e:	b29a      	uxth	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001428:	b29b      	uxth	r3, r3
 800142a:	3b01      	subs	r3, #1
 800142c:	b29a      	uxth	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001436:	b29b      	uxth	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d03a      	beq.n	80014b2 <HAL_I2C_Mem_Read+0x202>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001440:	2b00      	cmp	r3, #0
 8001442:	d136      	bne.n	80014b2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	0013      	movs	r3, r2
 800144e:	2200      	movs	r2, #0
 8001450:	2180      	movs	r1, #128	@ 0x80
 8001452:	f000 f8e5 	bl	8001620 <I2C_WaitOnFlagUntilTimeout>
 8001456:	1e03      	subs	r3, r0, #0
 8001458:	d001      	beq.n	800145e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e053      	b.n	8001506 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001462:	b29b      	uxth	r3, r3
 8001464:	2bff      	cmp	r3, #255	@ 0xff
 8001466:	d911      	bls.n	800148c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2201      	movs	r2, #1
 800146c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001472:	b2da      	uxtb	r2, r3
 8001474:	2380      	movs	r3, #128	@ 0x80
 8001476:	045c      	lsls	r4, r3, #17
 8001478:	230a      	movs	r3, #10
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	8819      	ldrh	r1, [r3, #0]
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	2300      	movs	r3, #0
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	0023      	movs	r3, r4
 8001486:	f000 faa5 	bl	80019d4 <I2C_TransferConfig>
 800148a:	e012      	b.n	80014b2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001490:	b29a      	uxth	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800149a:	b2da      	uxtb	r2, r3
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	049c      	lsls	r4, r3, #18
 80014a0:	230a      	movs	r3, #10
 80014a2:	18fb      	adds	r3, r7, r3
 80014a4:	8819      	ldrh	r1, [r3, #0]
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	2300      	movs	r3, #0
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	0023      	movs	r3, r4
 80014ae:	f000 fa91 	bl	80019d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d194      	bne.n	80013e6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	0018      	movs	r0, r3
 80014c4:	f000 f94a 	bl	800175c <I2C_WaitOnSTOPFlagUntilTimeout>
 80014c8:	1e03      	subs	r3, r0, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e01a      	b.n	8001506 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2220      	movs	r2, #32
 80014d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	490c      	ldr	r1, [pc, #48]	@ (8001514 <HAL_I2C_Mem_Read+0x264>)
 80014e4:	400a      	ands	r2, r1
 80014e6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2241      	movs	r2, #65	@ 0x41
 80014ec:	2120      	movs	r1, #32
 80014ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2242      	movs	r2, #66	@ 0x42
 80014f4:	2100      	movs	r1, #0
 80014f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2240      	movs	r2, #64	@ 0x40
 80014fc:	2100      	movs	r1, #0
 80014fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	e000      	b.n	8001506 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001504:	2302      	movs	r3, #2
  }
}
 8001506:	0018      	movs	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	b007      	add	sp, #28
 800150c:	bd90      	pop	{r4, r7, pc}
 800150e:	46c0      	nop			@ (mov r8, r8)
 8001510:	80002400 	.word	0x80002400
 8001514:	fe00e800 	.word	0xfe00e800

08001518 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af02      	add	r7, sp, #8
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	000c      	movs	r4, r1
 8001522:	0010      	movs	r0, r2
 8001524:	0019      	movs	r1, r3
 8001526:	250a      	movs	r5, #10
 8001528:	197b      	adds	r3, r7, r5
 800152a:	1c22      	adds	r2, r4, #0
 800152c:	801a      	strh	r2, [r3, #0]
 800152e:	2308      	movs	r3, #8
 8001530:	18fb      	adds	r3, r7, r3
 8001532:	1c02      	adds	r2, r0, #0
 8001534:	801a      	strh	r2, [r3, #0]
 8001536:	1dbb      	adds	r3, r7, #6
 8001538:	1c0a      	adds	r2, r1, #0
 800153a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800153c:	1dbb      	adds	r3, r7, #6
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	197b      	adds	r3, r7, r5
 8001544:	8819      	ldrh	r1, [r3, #0]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	4b23      	ldr	r3, [pc, #140]	@ (80015d8 <I2C_RequestMemoryRead+0xc0>)
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2300      	movs	r3, #0
 800154e:	f000 fa41 	bl	80019d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001554:	6a39      	ldr	r1, [r7, #32]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	0018      	movs	r0, r3
 800155a:	f000 f8b9 	bl	80016d0 <I2C_WaitOnTXISFlagUntilTimeout>
 800155e:	1e03      	subs	r3, r0, #0
 8001560:	d001      	beq.n	8001566 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e033      	b.n	80015ce <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001566:	1dbb      	adds	r3, r7, #6
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d107      	bne.n	800157e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800156e:	2308      	movs	r3, #8
 8001570:	18fb      	adds	r3, r7, r3
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	629a      	str	r2, [r3, #40]	@ 0x28
 800157c:	e019      	b.n	80015b2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800157e:	2308      	movs	r3, #8
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	b29b      	uxth	r3, r3
 8001588:	b2da      	uxtb	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001592:	6a39      	ldr	r1, [r7, #32]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	0018      	movs	r0, r3
 8001598:	f000 f89a 	bl	80016d0 <I2C_WaitOnTXISFlagUntilTimeout>
 800159c:	1e03      	subs	r3, r0, #0
 800159e:	d001      	beq.n	80015a4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e014      	b.n	80015ce <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80015a4:	2308      	movs	r3, #8
 80015a6:	18fb      	adds	r3, r7, r3
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80015b2:	6a3a      	ldr	r2, [r7, #32]
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	0013      	movs	r3, r2
 80015bc:	2200      	movs	r2, #0
 80015be:	2140      	movs	r1, #64	@ 0x40
 80015c0:	f000 f82e 	bl	8001620 <I2C_WaitOnFlagUntilTimeout>
 80015c4:	1e03      	subs	r3, r0, #0
 80015c6:	d001      	beq.n	80015cc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	0018      	movs	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b004      	add	sp, #16
 80015d4:	bdb0      	pop	{r4, r5, r7, pc}
 80015d6:	46c0      	nop			@ (mov r8, r8)
 80015d8:	80002000 	.word	0x80002000

080015dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2202      	movs	r2, #2
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d103      	bne.n	80015fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2200      	movs	r2, #0
 80015f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2201      	movs	r2, #1
 8001602:	4013      	ands	r3, r2
 8001604:	2b01      	cmp	r3, #1
 8001606:	d007      	beq.n	8001618 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	699a      	ldr	r2, [r3, #24]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2101      	movs	r1, #1
 8001614:	430a      	orrs	r2, r1
 8001616:	619a      	str	r2, [r3, #24]
  }
}
 8001618:	46c0      	nop			@ (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	b002      	add	sp, #8
 800161e:	bd80      	pop	{r7, pc}

08001620 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	1dfb      	adds	r3, r7, #7
 800162e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001630:	e03a      	b.n	80016a8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	6839      	ldr	r1, [r7, #0]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	0018      	movs	r0, r3
 800163a:	f000 f8d3 	bl	80017e4 <I2C_IsErrorOccurred>
 800163e:	1e03      	subs	r3, r0, #0
 8001640:	d001      	beq.n	8001646 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e040      	b.n	80016c8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	3301      	adds	r3, #1
 800164a:	d02d      	beq.n	80016a8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800164c:	f7ff fb0e 	bl	8000c6c <HAL_GetTick>
 8001650:	0002      	movs	r2, r0
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d302      	bcc.n	8001662 <I2C_WaitOnFlagUntilTimeout+0x42>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d122      	bne.n	80016a8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	4013      	ands	r3, r2
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	425a      	negs	r2, r3
 8001672:	4153      	adcs	r3, r2
 8001674:	b2db      	uxtb	r3, r3
 8001676:	001a      	movs	r2, r3
 8001678:	1dfb      	adds	r3, r7, #7
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d113      	bne.n	80016a8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001684:	2220      	movs	r2, #32
 8001686:	431a      	orrs	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2241      	movs	r2, #65	@ 0x41
 8001690:	2120      	movs	r1, #32
 8001692:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2242      	movs	r2, #66	@ 0x42
 8001698:	2100      	movs	r1, #0
 800169a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2240      	movs	r2, #64	@ 0x40
 80016a0:	2100      	movs	r1, #0
 80016a2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e00f      	b.n	80016c8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	4013      	ands	r3, r2
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	425a      	negs	r2, r3
 80016b8:	4153      	adcs	r3, r2
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	001a      	movs	r2, r3
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d0b5      	beq.n	8001632 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	0018      	movs	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b004      	add	sp, #16
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016dc:	e032      	b.n	8001744 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	0018      	movs	r0, r3
 80016e6:	f000 f87d 	bl	80017e4 <I2C_IsErrorOccurred>
 80016ea:	1e03      	subs	r3, r0, #0
 80016ec:	d001      	beq.n	80016f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e030      	b.n	8001754 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	3301      	adds	r3, #1
 80016f6:	d025      	beq.n	8001744 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016f8:	f7ff fab8 	bl	8000c6c <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	429a      	cmp	r2, r3
 8001706:	d302      	bcc.n	800170e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d11a      	bne.n	8001744 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	2202      	movs	r2, #2
 8001716:	4013      	ands	r3, r2
 8001718:	2b02      	cmp	r3, #2
 800171a:	d013      	beq.n	8001744 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001720:	2220      	movs	r2, #32
 8001722:	431a      	orrs	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2241      	movs	r2, #65	@ 0x41
 800172c:	2120      	movs	r1, #32
 800172e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2242      	movs	r2, #66	@ 0x42
 8001734:	2100      	movs	r1, #0
 8001736:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2240      	movs	r2, #64	@ 0x40
 800173c:	2100      	movs	r1, #0
 800173e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e007      	b.n	8001754 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2202      	movs	r2, #2
 800174c:	4013      	ands	r3, r2
 800174e:	2b02      	cmp	r3, #2
 8001750:	d1c5      	bne.n	80016de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	0018      	movs	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	b004      	add	sp, #16
 800175a:	bd80      	pop	{r7, pc}

0800175c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001768:	e02f      	b.n	80017ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	0018      	movs	r0, r3
 8001772:	f000 f837 	bl	80017e4 <I2C_IsErrorOccurred>
 8001776:	1e03      	subs	r3, r0, #0
 8001778:	d001      	beq.n	800177e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e02d      	b.n	80017da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800177e:	f7ff fa75 	bl	8000c6c <HAL_GetTick>
 8001782:	0002      	movs	r2, r0
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	429a      	cmp	r2, r3
 800178c:	d302      	bcc.n	8001794 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d11a      	bne.n	80017ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	2220      	movs	r2, #32
 800179c:	4013      	ands	r3, r2
 800179e:	2b20      	cmp	r3, #32
 80017a0:	d013      	beq.n	80017ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a6:	2220      	movs	r2, #32
 80017a8:	431a      	orrs	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2241      	movs	r2, #65	@ 0x41
 80017b2:	2120      	movs	r1, #32
 80017b4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2242      	movs	r2, #66	@ 0x42
 80017ba:	2100      	movs	r1, #0
 80017bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2240      	movs	r2, #64	@ 0x40
 80017c2:	2100      	movs	r1, #0
 80017c4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e007      	b.n	80017da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	2220      	movs	r2, #32
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b20      	cmp	r3, #32
 80017d6:	d1c8      	bne.n	800176a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	0018      	movs	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	b004      	add	sp, #16
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	@ 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f0:	2327      	movs	r3, #39	@ 0x27
 80017f2:	18fb      	adds	r3, r7, r3
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	2210      	movs	r2, #16
 800180c:	4013      	ands	r3, r2
 800180e:	d100      	bne.n	8001812 <I2C_IsErrorOccurred+0x2e>
 8001810:	e079      	b.n	8001906 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2210      	movs	r2, #16
 8001818:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800181a:	e057      	b.n	80018cc <I2C_IsErrorOccurred+0xe8>
 800181c:	2227      	movs	r2, #39	@ 0x27
 800181e:	18bb      	adds	r3, r7, r2
 8001820:	18ba      	adds	r2, r7, r2
 8001822:	7812      	ldrb	r2, [r2, #0]
 8001824:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	3301      	adds	r3, #1
 800182a:	d04f      	beq.n	80018cc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800182c:	f7ff fa1e 	bl	8000c6c <HAL_GetTick>
 8001830:	0002      	movs	r2, r0
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	429a      	cmp	r2, r3
 800183a:	d302      	bcc.n	8001842 <I2C_IsErrorOccurred+0x5e>
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d144      	bne.n	80018cc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	2380      	movs	r3, #128	@ 0x80
 800184a:	01db      	lsls	r3, r3, #7
 800184c:	4013      	ands	r3, r2
 800184e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001850:	2013      	movs	r0, #19
 8001852:	183b      	adds	r3, r7, r0
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	2142      	movs	r1, #66	@ 0x42
 8001858:	5c52      	ldrb	r2, [r2, r1]
 800185a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	699a      	ldr	r2, [r3, #24]
 8001862:	2380      	movs	r3, #128	@ 0x80
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	401a      	ands	r2, r3
 8001868:	2380      	movs	r3, #128	@ 0x80
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	429a      	cmp	r2, r3
 800186e:	d126      	bne.n	80018be <I2C_IsErrorOccurred+0xda>
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	2380      	movs	r3, #128	@ 0x80
 8001874:	01db      	lsls	r3, r3, #7
 8001876:	429a      	cmp	r2, r3
 8001878:	d021      	beq.n	80018be <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800187a:	183b      	adds	r3, r7, r0
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b20      	cmp	r3, #32
 8001880:	d01d      	beq.n	80018be <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2180      	movs	r1, #128	@ 0x80
 800188e:	01c9      	lsls	r1, r1, #7
 8001890:	430a      	orrs	r2, r1
 8001892:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001894:	f7ff f9ea 	bl	8000c6c <HAL_GetTick>
 8001898:	0003      	movs	r3, r0
 800189a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800189c:	e00f      	b.n	80018be <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800189e:	f7ff f9e5 	bl	8000c6c <HAL_GetTick>
 80018a2:	0002      	movs	r2, r0
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b19      	cmp	r3, #25
 80018aa:	d908      	bls.n	80018be <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	2220      	movs	r2, #32
 80018b0:	4313      	orrs	r3, r2
 80018b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80018b4:	2327      	movs	r3, #39	@ 0x27
 80018b6:	18fb      	adds	r3, r7, r3
 80018b8:	2201      	movs	r2, #1
 80018ba:	701a      	strb	r2, [r3, #0]

              break;
 80018bc:	e006      	b.n	80018cc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2220      	movs	r2, #32
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b20      	cmp	r3, #32
 80018ca:	d1e8      	bne.n	800189e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	2220      	movs	r2, #32
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b20      	cmp	r3, #32
 80018d8:	d004      	beq.n	80018e4 <I2C_IsErrorOccurred+0x100>
 80018da:	2327      	movs	r3, #39	@ 0x27
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d09b      	beq.n	800181c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80018e4:	2327      	movs	r3, #39	@ 0x27
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d103      	bne.n	80018f6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2220      	movs	r2, #32
 80018f4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	2204      	movs	r2, #4
 80018fa:	4313      	orrs	r3, r2
 80018fc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80018fe:	2327      	movs	r3, #39	@ 0x27
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	2380      	movs	r3, #128	@ 0x80
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4013      	ands	r3, r2
 8001916:	d00c      	beq.n	8001932 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	2201      	movs	r2, #1
 800191c:	4313      	orrs	r3, r2
 800191e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2280      	movs	r2, #128	@ 0x80
 8001926:	0052      	lsls	r2, r2, #1
 8001928:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800192a:	2327      	movs	r3, #39	@ 0x27
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	2380      	movs	r3, #128	@ 0x80
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4013      	ands	r3, r2
 800193a:	d00c      	beq.n	8001956 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	2208      	movs	r2, #8
 8001940:	4313      	orrs	r3, r2
 8001942:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2280      	movs	r2, #128	@ 0x80
 800194a:	00d2      	lsls	r2, r2, #3
 800194c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800194e:	2327      	movs	r3, #39	@ 0x27
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	2380      	movs	r3, #128	@ 0x80
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4013      	ands	r3, r2
 800195e:	d00c      	beq.n	800197a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001960:	6a3b      	ldr	r3, [r7, #32]
 8001962:	2202      	movs	r2, #2
 8001964:	4313      	orrs	r3, r2
 8001966:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2280      	movs	r2, #128	@ 0x80
 800196e:	0092      	lsls	r2, r2, #2
 8001970:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001972:	2327      	movs	r3, #39	@ 0x27
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	2201      	movs	r2, #1
 8001978:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800197a:	2327      	movs	r3, #39	@ 0x27
 800197c:	18fb      	adds	r3, r7, r3
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d01d      	beq.n	80019c0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	0018      	movs	r0, r3
 8001988:	f7ff fe28 	bl	80015dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	490e      	ldr	r1, [pc, #56]	@ (80019d0 <I2C_IsErrorOccurred+0x1ec>)
 8001998:	400a      	ands	r2, r1
 800199a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2241      	movs	r2, #65	@ 0x41
 80019ac:	2120      	movs	r1, #32
 80019ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2242      	movs	r2, #66	@ 0x42
 80019b4:	2100      	movs	r1, #0
 80019b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2240      	movs	r2, #64	@ 0x40
 80019bc:	2100      	movs	r1, #0
 80019be:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80019c0:	2327      	movs	r3, #39	@ 0x27
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	781b      	ldrb	r3, [r3, #0]
}
 80019c6:	0018      	movs	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b00a      	add	sp, #40	@ 0x28
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	46c0      	nop			@ (mov r8, r8)
 80019d0:	fe00e800 	.word	0xfe00e800

080019d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	0008      	movs	r0, r1
 80019de:	0011      	movs	r1, r2
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	240a      	movs	r4, #10
 80019e4:	193b      	adds	r3, r7, r4
 80019e6:	1c02      	adds	r2, r0, #0
 80019e8:	801a      	strh	r2, [r3, #0]
 80019ea:	2009      	movs	r0, #9
 80019ec:	183b      	adds	r3, r7, r0
 80019ee:	1c0a      	adds	r2, r1, #0
 80019f0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019f2:	193b      	adds	r3, r7, r4
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	059b      	lsls	r3, r3, #22
 80019f8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80019fa:	183b      	adds	r3, r7, r0
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	0419      	lsls	r1, r3, #16
 8001a00:	23ff      	movs	r3, #255	@ 0xff
 8001a02:	041b      	lsls	r3, r3, #16
 8001a04:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a06:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	085b      	lsrs	r3, r3, #1
 8001a14:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a1e:	0d51      	lsrs	r1, r2, #21
 8001a20:	2280      	movs	r2, #128	@ 0x80
 8001a22:	00d2      	lsls	r2, r2, #3
 8001a24:	400a      	ands	r2, r1
 8001a26:	4907      	ldr	r1, [pc, #28]	@ (8001a44 <I2C_TransferConfig+0x70>)
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	43d2      	mvns	r2, r2
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	0011      	movs	r1, r2
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b007      	add	sp, #28
 8001a40:	bd90      	pop	{r4, r7, pc}
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	03ff63ff 	.word	0x03ff63ff

08001a48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2241      	movs	r2, #65	@ 0x41
 8001a56:	5c9b      	ldrb	r3, [r3, r2]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b20      	cmp	r3, #32
 8001a5c:	d138      	bne.n	8001ad0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2240      	movs	r2, #64	@ 0x40
 8001a62:	5c9b      	ldrb	r3, [r3, r2]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e032      	b.n	8001ad2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2240      	movs	r2, #64	@ 0x40
 8001a70:	2101      	movs	r1, #1
 8001a72:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2241      	movs	r2, #65	@ 0x41
 8001a78:	2124      	movs	r1, #36	@ 0x24
 8001a7a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2101      	movs	r1, #1
 8001a88:	438a      	bics	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4911      	ldr	r1, [pc, #68]	@ (8001adc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001a98:	400a      	ands	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6819      	ldr	r1, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2241      	movs	r2, #65	@ 0x41
 8001ac0:	2120      	movs	r1, #32
 8001ac2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2240      	movs	r2, #64	@ 0x40
 8001ac8:	2100      	movs	r1, #0
 8001aca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	e000      	b.n	8001ad2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ad0:	2302      	movs	r3, #2
  }
}
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b002      	add	sp, #8
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	46c0      	nop			@ (mov r8, r8)
 8001adc:	ffffefff 	.word	0xffffefff

08001ae0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2241      	movs	r2, #65	@ 0x41
 8001aee:	5c9b      	ldrb	r3, [r3, r2]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b20      	cmp	r3, #32
 8001af4:	d139      	bne.n	8001b6a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2240      	movs	r2, #64	@ 0x40
 8001afa:	5c9b      	ldrb	r3, [r3, r2]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e033      	b.n	8001b6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2240      	movs	r2, #64	@ 0x40
 8001b08:	2101      	movs	r1, #1
 8001b0a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2241      	movs	r2, #65	@ 0x41
 8001b10:	2124      	movs	r1, #36	@ 0x24
 8001b12:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2101      	movs	r1, #1
 8001b20:	438a      	bics	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4a11      	ldr	r2, [pc, #68]	@ (8001b74 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2101      	movs	r1, #1
 8001b52:	430a      	orrs	r2, r1
 8001b54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2241      	movs	r2, #65	@ 0x41
 8001b5a:	2120      	movs	r1, #32
 8001b5c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2240      	movs	r2, #64	@ 0x40
 8001b62:	2100      	movs	r1, #0
 8001b64:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e000      	b.n	8001b6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b6a:	2302      	movs	r3, #2
  }
}
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b004      	add	sp, #16
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	fffff0ff 	.word	0xfffff0ff

08001b78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e301      	b.n	800218e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4013      	ands	r3, r2
 8001b92:	d100      	bne.n	8001b96 <HAL_RCC_OscConfig+0x1e>
 8001b94:	e08d      	b.n	8001cb2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b96:	4bc3      	ldr	r3, [pc, #780]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d00e      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ba2:	4bc0      	ldr	r3, [pc, #768]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d116      	bne.n	8001bdc <HAL_RCC_OscConfig+0x64>
 8001bae:	4bbd      	ldr	r3, [pc, #756]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	2380      	movs	r3, #128	@ 0x80
 8001bb4:	025b      	lsls	r3, r3, #9
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	2380      	movs	r3, #128	@ 0x80
 8001bba:	025b      	lsls	r3, r3, #9
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d10d      	bne.n	8001bdc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc0:	4bb8      	ldr	r3, [pc, #736]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	2380      	movs	r3, #128	@ 0x80
 8001bc6:	029b      	lsls	r3, r3, #10
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d100      	bne.n	8001bce <HAL_RCC_OscConfig+0x56>
 8001bcc:	e070      	b.n	8001cb0 <HAL_RCC_OscConfig+0x138>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d000      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x60>
 8001bd6:	e06b      	b.n	8001cb0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e2d8      	b.n	800218e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d107      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x7c>
 8001be4:	4baf      	ldr	r3, [pc, #700]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4bae      	ldr	r3, [pc, #696]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001bea:	2180      	movs	r1, #128	@ 0x80
 8001bec:	0249      	lsls	r1, r1, #9
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	e02f      	b.n	8001c54 <HAL_RCC_OscConfig+0xdc>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10c      	bne.n	8001c16 <HAL_RCC_OscConfig+0x9e>
 8001bfc:	4ba9      	ldr	r3, [pc, #676]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4ba8      	ldr	r3, [pc, #672]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001c02:	49a9      	ldr	r1, [pc, #676]	@ (8001ea8 <HAL_RCC_OscConfig+0x330>)
 8001c04:	400a      	ands	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	4ba6      	ldr	r3, [pc, #664]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4ba5      	ldr	r3, [pc, #660]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001c0e:	49a7      	ldr	r1, [pc, #668]	@ (8001eac <HAL_RCC_OscConfig+0x334>)
 8001c10:	400a      	ands	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	e01e      	b.n	8001c54 <HAL_RCC_OscConfig+0xdc>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b05      	cmp	r3, #5
 8001c1c:	d10e      	bne.n	8001c3c <HAL_RCC_OscConfig+0xc4>
 8001c1e:	4ba1      	ldr	r3, [pc, #644]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4ba0      	ldr	r3, [pc, #640]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001c24:	2180      	movs	r1, #128	@ 0x80
 8001c26:	02c9      	lsls	r1, r1, #11
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	4b9d      	ldr	r3, [pc, #628]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b9c      	ldr	r3, [pc, #624]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001c32:	2180      	movs	r1, #128	@ 0x80
 8001c34:	0249      	lsls	r1, r1, #9
 8001c36:	430a      	orrs	r2, r1
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	e00b      	b.n	8001c54 <HAL_RCC_OscConfig+0xdc>
 8001c3c:	4b99      	ldr	r3, [pc, #612]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b98      	ldr	r3, [pc, #608]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001c42:	4999      	ldr	r1, [pc, #612]	@ (8001ea8 <HAL_RCC_OscConfig+0x330>)
 8001c44:	400a      	ands	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	4b96      	ldr	r3, [pc, #600]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b95      	ldr	r3, [pc, #596]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001c4e:	4997      	ldr	r1, [pc, #604]	@ (8001eac <HAL_RCC_OscConfig+0x334>)
 8001c50:	400a      	ands	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d014      	beq.n	8001c86 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7ff f806 	bl	8000c6c <HAL_GetTick>
 8001c60:	0003      	movs	r3, r0
 8001c62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c66:	f7ff f801 	bl	8000c6c <HAL_GetTick>
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b64      	cmp	r3, #100	@ 0x64
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e28a      	b.n	800218e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c78:	4b8a      	ldr	r3, [pc, #552]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2380      	movs	r3, #128	@ 0x80
 8001c7e:	029b      	lsls	r3, r3, #10
 8001c80:	4013      	ands	r3, r2
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0xee>
 8001c84:	e015      	b.n	8001cb2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7fe fff1 	bl	8000c6c <HAL_GetTick>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c90:	f7fe ffec 	bl	8000c6c <HAL_GetTick>
 8001c94:	0002      	movs	r2, r0
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b64      	cmp	r3, #100	@ 0x64
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e275      	b.n	800218e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca2:	4b80      	ldr	r3, [pc, #512]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	2380      	movs	r3, #128	@ 0x80
 8001ca8:	029b      	lsls	r3, r3, #10
 8001caa:	4013      	ands	r3, r2
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x118>
 8001cae:	e000      	b.n	8001cb2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d100      	bne.n	8001cbe <HAL_RCC_OscConfig+0x146>
 8001cbc:	e069      	b.n	8001d92 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cbe:	4b79      	ldr	r3, [pc, #484]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d00b      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cc8:	4b76      	ldr	r3, [pc, #472]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	220c      	movs	r2, #12
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d11c      	bne.n	8001d0e <HAL_RCC_OscConfig+0x196>
 8001cd4:	4b73      	ldr	r3, [pc, #460]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	2380      	movs	r3, #128	@ 0x80
 8001cda:	025b      	lsls	r3, r3, #9
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d116      	bne.n	8001d0e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce0:	4b70      	ldr	r3, [pc, #448]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d005      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x17e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d001      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e24b      	b.n	800218e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf6:	4b6b      	ldr	r3, [pc, #428]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	22f8      	movs	r2, #248	@ 0xf8
 8001cfc:	4393      	bics	r3, r2
 8001cfe:	0019      	movs	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	00da      	lsls	r2, r3, #3
 8001d06:	4b67      	ldr	r3, [pc, #412]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0c:	e041      	b.n	8001d92 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d024      	beq.n	8001d60 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d16:	4b63      	ldr	r3, [pc, #396]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4b62      	ldr	r3, [pc, #392]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d22:	f7fe ffa3 	bl	8000c6c <HAL_GetTick>
 8001d26:	0003      	movs	r3, r0
 8001d28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d2c:	f7fe ff9e 	bl	8000c6c <HAL_GetTick>
 8001d30:	0002      	movs	r2, r0
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e227      	b.n	800218e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3e:	4b59      	ldr	r3, [pc, #356]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2202      	movs	r2, #2
 8001d44:	4013      	ands	r3, r2
 8001d46:	d0f1      	beq.n	8001d2c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d48:	4b56      	ldr	r3, [pc, #344]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	22f8      	movs	r2, #248	@ 0xf8
 8001d4e:	4393      	bics	r3, r2
 8001d50:	0019      	movs	r1, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	00da      	lsls	r2, r3, #3
 8001d58:	4b52      	ldr	r3, [pc, #328]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	e018      	b.n	8001d92 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d60:	4b50      	ldr	r3, [pc, #320]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b4f      	ldr	r3, [pc, #316]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001d66:	2101      	movs	r1, #1
 8001d68:	438a      	bics	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7fe ff7e 	bl	8000c6c <HAL_GetTick>
 8001d70:	0003      	movs	r3, r0
 8001d72:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d76:	f7fe ff79 	bl	8000c6c <HAL_GetTick>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e202      	b.n	800218e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d88:	4b46      	ldr	r3, [pc, #280]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d1f1      	bne.n	8001d76 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2208      	movs	r2, #8
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d036      	beq.n	8001e0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d019      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001da6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001da8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001daa:	2101      	movs	r1, #1
 8001dac:	430a      	orrs	r2, r1
 8001dae:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db0:	f7fe ff5c 	bl	8000c6c <HAL_GetTick>
 8001db4:	0003      	movs	r3, r0
 8001db6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dba:	f7fe ff57 	bl	8000c6c <HAL_GetTick>
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e1e0      	b.n	800218e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dcc:	4b35      	ldr	r3, [pc, #212]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d0f1      	beq.n	8001dba <HAL_RCC_OscConfig+0x242>
 8001dd6:	e018      	b.n	8001e0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd8:	4b32      	ldr	r3, [pc, #200]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001dda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ddc:	4b31      	ldr	r3, [pc, #196]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001dde:	2101      	movs	r1, #1
 8001de0:	438a      	bics	r2, r1
 8001de2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de4:	f7fe ff42 	bl	8000c6c <HAL_GetTick>
 8001de8:	0003      	movs	r3, r0
 8001dea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dee:	f7fe ff3d 	bl	8000c6c <HAL_GetTick>
 8001df2:	0002      	movs	r2, r0
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e1c6      	b.n	800218e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e00:	4b28      	ldr	r3, [pc, #160]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e04:	2202      	movs	r2, #2
 8001e06:	4013      	ands	r3, r2
 8001e08:	d1f1      	bne.n	8001dee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2204      	movs	r2, #4
 8001e10:	4013      	ands	r3, r2
 8001e12:	d100      	bne.n	8001e16 <HAL_RCC_OscConfig+0x29e>
 8001e14:	e0b4      	b.n	8001f80 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e16:	201f      	movs	r0, #31
 8001e18:	183b      	adds	r3, r7, r0
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e1e:	4b21      	ldr	r3, [pc, #132]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001e20:	69da      	ldr	r2, [r3, #28]
 8001e22:	2380      	movs	r3, #128	@ 0x80
 8001e24:	055b      	lsls	r3, r3, #21
 8001e26:	4013      	ands	r3, r2
 8001e28:	d110      	bne.n	8001e4c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001e2c:	69da      	ldr	r2, [r3, #28]
 8001e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001e30:	2180      	movs	r1, #128	@ 0x80
 8001e32:	0549      	lsls	r1, r1, #21
 8001e34:	430a      	orrs	r2, r1
 8001e36:	61da      	str	r2, [r3, #28]
 8001e38:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001e3a:	69da      	ldr	r2, [r3, #28]
 8001e3c:	2380      	movs	r3, #128	@ 0x80
 8001e3e:	055b      	lsls	r3, r3, #21
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e46:	183b      	adds	r3, r7, r0
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	4b18      	ldr	r3, [pc, #96]	@ (8001eb0 <HAL_RCC_OscConfig+0x338>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	2380      	movs	r3, #128	@ 0x80
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4013      	ands	r3, r2
 8001e56:	d11a      	bne.n	8001e8e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e58:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <HAL_RCC_OscConfig+0x338>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b14      	ldr	r3, [pc, #80]	@ (8001eb0 <HAL_RCC_OscConfig+0x338>)
 8001e5e:	2180      	movs	r1, #128	@ 0x80
 8001e60:	0049      	lsls	r1, r1, #1
 8001e62:	430a      	orrs	r2, r1
 8001e64:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e66:	f7fe ff01 	bl	8000c6c <HAL_GetTick>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e70:	f7fe fefc 	bl	8000c6c <HAL_GetTick>
 8001e74:	0002      	movs	r2, r0
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	@ 0x64
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e185      	b.n	800218e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e82:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <HAL_RCC_OscConfig+0x338>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	2380      	movs	r3, #128	@ 0x80
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d10e      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x33c>
 8001e96:	4b03      	ldr	r3, [pc, #12]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001e98:	6a1a      	ldr	r2, [r3, #32]
 8001e9a:	4b02      	ldr	r3, [pc, #8]	@ (8001ea4 <HAL_RCC_OscConfig+0x32c>)
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	621a      	str	r2, [r3, #32]
 8001ea2:	e035      	b.n	8001f10 <HAL_RCC_OscConfig+0x398>
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	fffeffff 	.word	0xfffeffff
 8001eac:	fffbffff 	.word	0xfffbffff
 8001eb0:	40007000 	.word	0x40007000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10c      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x35e>
 8001ebc:	4bb6      	ldr	r3, [pc, #728]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001ebe:	6a1a      	ldr	r2, [r3, #32]
 8001ec0:	4bb5      	ldr	r3, [pc, #724]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	438a      	bics	r2, r1
 8001ec6:	621a      	str	r2, [r3, #32]
 8001ec8:	4bb3      	ldr	r3, [pc, #716]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001eca:	6a1a      	ldr	r2, [r3, #32]
 8001ecc:	4bb2      	ldr	r3, [pc, #712]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001ece:	2104      	movs	r1, #4
 8001ed0:	438a      	bics	r2, r1
 8001ed2:	621a      	str	r2, [r3, #32]
 8001ed4:	e01c      	b.n	8001f10 <HAL_RCC_OscConfig+0x398>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b05      	cmp	r3, #5
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x380>
 8001ede:	4bae      	ldr	r3, [pc, #696]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001ee0:	6a1a      	ldr	r2, [r3, #32]
 8001ee2:	4bad      	ldr	r3, [pc, #692]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001ee4:	2104      	movs	r1, #4
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	621a      	str	r2, [r3, #32]
 8001eea:	4bab      	ldr	r3, [pc, #684]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001eec:	6a1a      	ldr	r2, [r3, #32]
 8001eee:	4baa      	ldr	r3, [pc, #680]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	621a      	str	r2, [r3, #32]
 8001ef6:	e00b      	b.n	8001f10 <HAL_RCC_OscConfig+0x398>
 8001ef8:	4ba7      	ldr	r3, [pc, #668]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001efa:	6a1a      	ldr	r2, [r3, #32]
 8001efc:	4ba6      	ldr	r3, [pc, #664]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001efe:	2101      	movs	r1, #1
 8001f00:	438a      	bics	r2, r1
 8001f02:	621a      	str	r2, [r3, #32]
 8001f04:	4ba4      	ldr	r3, [pc, #656]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001f06:	6a1a      	ldr	r2, [r3, #32]
 8001f08:	4ba3      	ldr	r3, [pc, #652]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001f0a:	2104      	movs	r1, #4
 8001f0c:	438a      	bics	r2, r1
 8001f0e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d014      	beq.n	8001f42 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f18:	f7fe fea8 	bl	8000c6c <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f20:	e009      	b.n	8001f36 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f7fe fea3 	bl	8000c6c <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	4a9b      	ldr	r2, [pc, #620]	@ (800219c <HAL_RCC_OscConfig+0x624>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e12b      	b.n	800218e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f36:	4b98      	ldr	r3, [pc, #608]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x3aa>
 8001f40:	e013      	b.n	8001f6a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f42:	f7fe fe93 	bl	8000c6c <HAL_GetTick>
 8001f46:	0003      	movs	r3, r0
 8001f48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f4a:	e009      	b.n	8001f60 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f4c:	f7fe fe8e 	bl	8000c6c <HAL_GetTick>
 8001f50:	0002      	movs	r2, r0
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	4a91      	ldr	r2, [pc, #580]	@ (800219c <HAL_RCC_OscConfig+0x624>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e116      	b.n	800218e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f60:	4b8d      	ldr	r3, [pc, #564]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	2202      	movs	r2, #2
 8001f66:	4013      	ands	r3, r2
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f6a:	231f      	movs	r3, #31
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d105      	bne.n	8001f80 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f74:	4b88      	ldr	r3, [pc, #544]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001f76:	69da      	ldr	r2, [r3, #28]
 8001f78:	4b87      	ldr	r3, [pc, #540]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001f7a:	4989      	ldr	r1, [pc, #548]	@ (80021a0 <HAL_RCC_OscConfig+0x628>)
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2210      	movs	r2, #16
 8001f86:	4013      	ands	r3, r2
 8001f88:	d063      	beq.n	8002052 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d12a      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f92:	4b81      	ldr	r3, [pc, #516]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001f94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f96:	4b80      	ldr	r3, [pc, #512]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001f98:	2104      	movs	r1, #4
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001f9e:	4b7e      	ldr	r3, [pc, #504]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001fa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fa2:	4b7d      	ldr	r3, [pc, #500]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001faa:	f7fe fe5f 	bl	8000c6c <HAL_GetTick>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001fb4:	f7fe fe5a 	bl	8000c6c <HAL_GetTick>
 8001fb8:	0002      	movs	r2, r0
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e0e3      	b.n	800218e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001fc6:	4b74      	ldr	r3, [pc, #464]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fca:	2202      	movs	r2, #2
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d0f1      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001fd0:	4b71      	ldr	r3, [pc, #452]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd4:	22f8      	movs	r2, #248	@ 0xf8
 8001fd6:	4393      	bics	r3, r2
 8001fd8:	0019      	movs	r1, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	00da      	lsls	r2, r3, #3
 8001fe0:	4b6d      	ldr	r3, [pc, #436]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fe6:	e034      	b.n	8002052 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	3305      	adds	r3, #5
 8001fee:	d111      	bne.n	8002014 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ff0:	4b69      	ldr	r3, [pc, #420]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001ff2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ff4:	4b68      	ldr	r3, [pc, #416]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001ff6:	2104      	movs	r1, #4
 8001ff8:	438a      	bics	r2, r1
 8001ffa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ffc:	4b66      	ldr	r3, [pc, #408]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8001ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002000:	22f8      	movs	r2, #248	@ 0xf8
 8002002:	4393      	bics	r3, r2
 8002004:	0019      	movs	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	00da      	lsls	r2, r3, #3
 800200c:	4b62      	ldr	r3, [pc, #392]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 800200e:	430a      	orrs	r2, r1
 8002010:	635a      	str	r2, [r3, #52]	@ 0x34
 8002012:	e01e      	b.n	8002052 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002014:	4b60      	ldr	r3, [pc, #384]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8002016:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002018:	4b5f      	ldr	r3, [pc, #380]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 800201a:	2104      	movs	r1, #4
 800201c:	430a      	orrs	r2, r1
 800201e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002020:	4b5d      	ldr	r3, [pc, #372]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8002022:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002024:	4b5c      	ldr	r3, [pc, #368]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8002026:	2101      	movs	r1, #1
 8002028:	438a      	bics	r2, r1
 800202a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202c:	f7fe fe1e 	bl	8000c6c <HAL_GetTick>
 8002030:	0003      	movs	r3, r0
 8002032:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002036:	f7fe fe19 	bl	8000c6c <HAL_GetTick>
 800203a:	0002      	movs	r2, r0
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e0a2      	b.n	800218e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002048:	4b53      	ldr	r3, [pc, #332]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 800204a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800204c:	2202      	movs	r2, #2
 800204e:	4013      	ands	r3, r2
 8002050:	d1f1      	bne.n	8002036 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d100      	bne.n	800205c <HAL_RCC_OscConfig+0x4e4>
 800205a:	e097      	b.n	800218c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800205c:	4b4e      	ldr	r3, [pc, #312]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	220c      	movs	r2, #12
 8002062:	4013      	ands	r3, r2
 8002064:	2b08      	cmp	r3, #8
 8002066:	d100      	bne.n	800206a <HAL_RCC_OscConfig+0x4f2>
 8002068:	e06b      	b.n	8002142 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d14c      	bne.n	800210c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002072:	4b49      	ldr	r3, [pc, #292]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	4b48      	ldr	r3, [pc, #288]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8002078:	494a      	ldr	r1, [pc, #296]	@ (80021a4 <HAL_RCC_OscConfig+0x62c>)
 800207a:	400a      	ands	r2, r1
 800207c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7fe fdf5 	bl	8000c6c <HAL_GetTick>
 8002082:	0003      	movs	r3, r0
 8002084:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002088:	f7fe fdf0 	bl	8000c6c <HAL_GetTick>
 800208c:	0002      	movs	r2, r0
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e079      	b.n	800218e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209a:	4b3f      	ldr	r3, [pc, #252]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	2380      	movs	r3, #128	@ 0x80
 80020a0:	049b      	lsls	r3, r3, #18
 80020a2:	4013      	ands	r3, r2
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 80020a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020aa:	220f      	movs	r2, #15
 80020ac:	4393      	bics	r3, r2
 80020ae:	0019      	movs	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020b4:	4b38      	ldr	r3, [pc, #224]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 80020b6:	430a      	orrs	r2, r1
 80020b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020ba:	4b37      	ldr	r3, [pc, #220]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4a3a      	ldr	r2, [pc, #232]	@ (80021a8 <HAL_RCC_OscConfig+0x630>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	0019      	movs	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020cc:	431a      	orrs	r2, r3
 80020ce:	4b32      	ldr	r3, [pc, #200]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 80020d0:	430a      	orrs	r2, r1
 80020d2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d4:	4b30      	ldr	r3, [pc, #192]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 80020da:	2180      	movs	r1, #128	@ 0x80
 80020dc:	0449      	lsls	r1, r1, #17
 80020de:	430a      	orrs	r2, r1
 80020e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7fe fdc3 	bl	8000c6c <HAL_GetTick>
 80020e6:	0003      	movs	r3, r0
 80020e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ec:	f7fe fdbe 	bl	8000c6c <HAL_GetTick>
 80020f0:	0002      	movs	r2, r0
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e047      	b.n	800218e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020fe:	4b26      	ldr	r3, [pc, #152]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	2380      	movs	r3, #128	@ 0x80
 8002104:	049b      	lsls	r3, r3, #18
 8002106:	4013      	ands	r3, r2
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x574>
 800210a:	e03f      	b.n	800218c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210c:	4b22      	ldr	r3, [pc, #136]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b21      	ldr	r3, [pc, #132]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8002112:	4924      	ldr	r1, [pc, #144]	@ (80021a4 <HAL_RCC_OscConfig+0x62c>)
 8002114:	400a      	ands	r2, r1
 8002116:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7fe fda8 	bl	8000c6c <HAL_GetTick>
 800211c:	0003      	movs	r3, r0
 800211e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002122:	f7fe fda3 	bl	8000c6c <HAL_GetTick>
 8002126:	0002      	movs	r2, r0
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e02c      	b.n	800218e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002134:	4b18      	ldr	r3, [pc, #96]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2380      	movs	r3, #128	@ 0x80
 800213a:	049b      	lsls	r3, r3, #18
 800213c:	4013      	ands	r3, r2
 800213e:	d1f0      	bne.n	8002122 <HAL_RCC_OscConfig+0x5aa>
 8002140:	e024      	b.n	800218c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e01f      	b.n	800218e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800214e:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002154:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <HAL_RCC_OscConfig+0x620>)
 8002156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002158:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	2380      	movs	r3, #128	@ 0x80
 800215e:	025b      	lsls	r3, r3, #9
 8002160:	401a      	ands	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002166:	429a      	cmp	r2, r3
 8002168:	d10e      	bne.n	8002188 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	220f      	movs	r2, #15
 800216e:	401a      	ands	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002174:	429a      	cmp	r2, r3
 8002176:	d107      	bne.n	8002188 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	23f0      	movs	r3, #240	@ 0xf0
 800217c:	039b      	lsls	r3, r3, #14
 800217e:	401a      	ands	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	0018      	movs	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	b008      	add	sp, #32
 8002194:	bd80      	pop	{r7, pc}
 8002196:	46c0      	nop			@ (mov r8, r8)
 8002198:	40021000 	.word	0x40021000
 800219c:	00001388 	.word	0x00001388
 80021a0:	efffffff 	.word	0xefffffff
 80021a4:	feffffff 	.word	0xfeffffff
 80021a8:	ffc2ffff 	.word	0xffc2ffff

080021ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0b3      	b.n	8002328 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021c0:	4b5b      	ldr	r3, [pc, #364]	@ (8002330 <HAL_RCC_ClockConfig+0x184>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2201      	movs	r2, #1
 80021c6:	4013      	ands	r3, r2
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d911      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b58      	ldr	r3, [pc, #352]	@ (8002330 <HAL_RCC_ClockConfig+0x184>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2201      	movs	r2, #1
 80021d4:	4393      	bics	r3, r2
 80021d6:	0019      	movs	r1, r3
 80021d8:	4b55      	ldr	r3, [pc, #340]	@ (8002330 <HAL_RCC_ClockConfig+0x184>)
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e0:	4b53      	ldr	r3, [pc, #332]	@ (8002330 <HAL_RCC_ClockConfig+0x184>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2201      	movs	r2, #1
 80021e6:	4013      	ands	r3, r2
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e09a      	b.n	8002328 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2202      	movs	r2, #2
 80021f8:	4013      	ands	r3, r2
 80021fa:	d015      	beq.n	8002228 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2204      	movs	r2, #4
 8002202:	4013      	ands	r3, r2
 8002204:	d006      	beq.n	8002214 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002206:	4b4b      	ldr	r3, [pc, #300]	@ (8002334 <HAL_RCC_ClockConfig+0x188>)
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	4b4a      	ldr	r3, [pc, #296]	@ (8002334 <HAL_RCC_ClockConfig+0x188>)
 800220c:	21e0      	movs	r1, #224	@ 0xe0
 800220e:	00c9      	lsls	r1, r1, #3
 8002210:	430a      	orrs	r2, r1
 8002212:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002214:	4b47      	ldr	r3, [pc, #284]	@ (8002334 <HAL_RCC_ClockConfig+0x188>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	22f0      	movs	r2, #240	@ 0xf0
 800221a:	4393      	bics	r3, r2
 800221c:	0019      	movs	r1, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	4b44      	ldr	r3, [pc, #272]	@ (8002334 <HAL_RCC_ClockConfig+0x188>)
 8002224:	430a      	orrs	r2, r1
 8002226:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2201      	movs	r2, #1
 800222e:	4013      	ands	r3, r2
 8002230:	d040      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d107      	bne.n	800224a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	4b3e      	ldr	r3, [pc, #248]	@ (8002334 <HAL_RCC_ClockConfig+0x188>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	2380      	movs	r3, #128	@ 0x80
 8002240:	029b      	lsls	r3, r3, #10
 8002242:	4013      	ands	r3, r2
 8002244:	d114      	bne.n	8002270 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e06e      	b.n	8002328 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d107      	bne.n	8002262 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002252:	4b38      	ldr	r3, [pc, #224]	@ (8002334 <HAL_RCC_ClockConfig+0x188>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	2380      	movs	r3, #128	@ 0x80
 8002258:	049b      	lsls	r3, r3, #18
 800225a:	4013      	ands	r3, r2
 800225c:	d108      	bne.n	8002270 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e062      	b.n	8002328 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002262:	4b34      	ldr	r3, [pc, #208]	@ (8002334 <HAL_RCC_ClockConfig+0x188>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2202      	movs	r2, #2
 8002268:	4013      	ands	r3, r2
 800226a:	d101      	bne.n	8002270 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e05b      	b.n	8002328 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002270:	4b30      	ldr	r3, [pc, #192]	@ (8002334 <HAL_RCC_ClockConfig+0x188>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2203      	movs	r2, #3
 8002276:	4393      	bics	r3, r2
 8002278:	0019      	movs	r1, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	4b2d      	ldr	r3, [pc, #180]	@ (8002334 <HAL_RCC_ClockConfig+0x188>)
 8002280:	430a      	orrs	r2, r1
 8002282:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002284:	f7fe fcf2 	bl	8000c6c <HAL_GetTick>
 8002288:	0003      	movs	r3, r0
 800228a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228c:	e009      	b.n	80022a2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228e:	f7fe fced 	bl	8000c6c <HAL_GetTick>
 8002292:	0002      	movs	r2, r0
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	4a27      	ldr	r2, [pc, #156]	@ (8002338 <HAL_RCC_ClockConfig+0x18c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e042      	b.n	8002328 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	4b24      	ldr	r3, [pc, #144]	@ (8002334 <HAL_RCC_ClockConfig+0x188>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	220c      	movs	r2, #12
 80022a8:	401a      	ands	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d1ec      	bne.n	800228e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002330 <HAL_RCC_ClockConfig+0x184>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2201      	movs	r2, #1
 80022ba:	4013      	ands	r3, r2
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d211      	bcs.n	80022e6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002330 <HAL_RCC_ClockConfig+0x184>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2201      	movs	r2, #1
 80022c8:	4393      	bics	r3, r2
 80022ca:	0019      	movs	r1, r3
 80022cc:	4b18      	ldr	r3, [pc, #96]	@ (8002330 <HAL_RCC_ClockConfig+0x184>)
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d4:	4b16      	ldr	r3, [pc, #88]	@ (8002330 <HAL_RCC_ClockConfig+0x184>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2201      	movs	r2, #1
 80022da:	4013      	ands	r3, r2
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e020      	b.n	8002328 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2204      	movs	r2, #4
 80022ec:	4013      	ands	r3, r2
 80022ee:	d009      	beq.n	8002304 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80022f0:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <HAL_RCC_ClockConfig+0x188>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4a11      	ldr	r2, [pc, #68]	@ (800233c <HAL_RCC_ClockConfig+0x190>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	0019      	movs	r1, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002334 <HAL_RCC_ClockConfig+0x188>)
 8002300:	430a      	orrs	r2, r1
 8002302:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002304:	f000 f820 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8002308:	0001      	movs	r1, r0
 800230a:	4b0a      	ldr	r3, [pc, #40]	@ (8002334 <HAL_RCC_ClockConfig+0x188>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	220f      	movs	r2, #15
 8002312:	4013      	ands	r3, r2
 8002314:	4a0a      	ldr	r2, [pc, #40]	@ (8002340 <HAL_RCC_ClockConfig+0x194>)
 8002316:	5cd3      	ldrb	r3, [r2, r3]
 8002318:	000a      	movs	r2, r1
 800231a:	40da      	lsrs	r2, r3
 800231c:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <HAL_RCC_ClockConfig+0x198>)
 800231e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002320:	2000      	movs	r0, #0
 8002322:	f7fe fc5d 	bl	8000be0 <HAL_InitTick>
  
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	0018      	movs	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	b004      	add	sp, #16
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40022000 	.word	0x40022000
 8002334:	40021000 	.word	0x40021000
 8002338:	00001388 	.word	0x00001388
 800233c:	fffff8ff 	.word	0xfffff8ff
 8002340:	08003354 	.word	0x08003354
 8002344:	20000004 	.word	0x20000004

08002348 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002362:	4b20      	ldr	r3, [pc, #128]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	220c      	movs	r2, #12
 800236c:	4013      	ands	r3, r2
 800236e:	2b04      	cmp	r3, #4
 8002370:	d002      	beq.n	8002378 <HAL_RCC_GetSysClockFreq+0x30>
 8002372:	2b08      	cmp	r3, #8
 8002374:	d003      	beq.n	800237e <HAL_RCC_GetSysClockFreq+0x36>
 8002376:	e02c      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002378:	4b1b      	ldr	r3, [pc, #108]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800237a:	613b      	str	r3, [r7, #16]
      break;
 800237c:	e02c      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	0c9b      	lsrs	r3, r3, #18
 8002382:	220f      	movs	r2, #15
 8002384:	4013      	ands	r3, r2
 8002386:	4a19      	ldr	r2, [pc, #100]	@ (80023ec <HAL_RCC_GetSysClockFreq+0xa4>)
 8002388:	5cd3      	ldrb	r3, [r2, r3]
 800238a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800238c:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800238e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002390:	220f      	movs	r2, #15
 8002392:	4013      	ands	r3, r2
 8002394:	4a16      	ldr	r2, [pc, #88]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002396:	5cd3      	ldrb	r3, [r2, r3]
 8002398:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	2380      	movs	r3, #128	@ 0x80
 800239e:	025b      	lsls	r3, r3, #9
 80023a0:	4013      	ands	r3, r2
 80023a2:	d009      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	4810      	ldr	r0, [pc, #64]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023a8:	f7fd feae 	bl	8000108 <__udivsi3>
 80023ac:	0003      	movs	r3, r0
 80023ae:	001a      	movs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4353      	muls	r3, r2
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	e009      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	000a      	movs	r2, r1
 80023bc:	0152      	lsls	r2, r2, #5
 80023be:	1a52      	subs	r2, r2, r1
 80023c0:	0193      	lsls	r3, r2, #6
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	185b      	adds	r3, r3, r1
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	613b      	str	r3, [r7, #16]
      break;
 80023d0:	e002      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023d2:	4b05      	ldr	r3, [pc, #20]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023d4:	613b      	str	r3, [r7, #16]
      break;
 80023d6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80023d8:	693b      	ldr	r3, [r7, #16]
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b006      	add	sp, #24
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	40021000 	.word	0x40021000
 80023e8:	007a1200 	.word	0x007a1200
 80023ec:	08003364 	.word	0x08003364
 80023f0:	08003374 	.word	0x08003374

080023f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2380      	movs	r3, #128	@ 0x80
 800240a:	025b      	lsls	r3, r3, #9
 800240c:	4013      	ands	r3, r2
 800240e:	d100      	bne.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002410:	e08e      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002412:	2017      	movs	r0, #23
 8002414:	183b      	adds	r3, r7, r0
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241a:	4b5f      	ldr	r3, [pc, #380]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800241c:	69da      	ldr	r2, [r3, #28]
 800241e:	2380      	movs	r3, #128	@ 0x80
 8002420:	055b      	lsls	r3, r3, #21
 8002422:	4013      	ands	r3, r2
 8002424:	d110      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	4b5c      	ldr	r3, [pc, #368]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002428:	69da      	ldr	r2, [r3, #28]
 800242a:	4b5b      	ldr	r3, [pc, #364]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800242c:	2180      	movs	r1, #128	@ 0x80
 800242e:	0549      	lsls	r1, r1, #21
 8002430:	430a      	orrs	r2, r1
 8002432:	61da      	str	r2, [r3, #28]
 8002434:	4b58      	ldr	r3, [pc, #352]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002436:	69da      	ldr	r2, [r3, #28]
 8002438:	2380      	movs	r3, #128	@ 0x80
 800243a:	055b      	lsls	r3, r3, #21
 800243c:	4013      	ands	r3, r2
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002442:	183b      	adds	r3, r7, r0
 8002444:	2201      	movs	r2, #1
 8002446:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002448:	4b54      	ldr	r3, [pc, #336]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	2380      	movs	r3, #128	@ 0x80
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4013      	ands	r3, r2
 8002452:	d11a      	bne.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002454:	4b51      	ldr	r3, [pc, #324]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b50      	ldr	r3, [pc, #320]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800245a:	2180      	movs	r1, #128	@ 0x80
 800245c:	0049      	lsls	r1, r1, #1
 800245e:	430a      	orrs	r2, r1
 8002460:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002462:	f7fe fc03 	bl	8000c6c <HAL_GetTick>
 8002466:	0003      	movs	r3, r0
 8002468:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246a:	e008      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246c:	f7fe fbfe 	bl	8000c6c <HAL_GetTick>
 8002470:	0002      	movs	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b64      	cmp	r3, #100	@ 0x64
 8002478:	d901      	bls.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e087      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247e:	4b47      	ldr	r3, [pc, #284]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	2380      	movs	r3, #128	@ 0x80
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4013      	ands	r3, r2
 8002488:	d0f0      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800248a:	4b43      	ldr	r3, [pc, #268]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800248c:	6a1a      	ldr	r2, [r3, #32]
 800248e:	23c0      	movs	r3, #192	@ 0xc0
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4013      	ands	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d034      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	23c0      	movs	r3, #192	@ 0xc0
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4013      	ands	r3, r2
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d02c      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	4a3b      	ldr	r2, [pc, #236]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024b6:	4b38      	ldr	r3, [pc, #224]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024b8:	6a1a      	ldr	r2, [r3, #32]
 80024ba:	4b37      	ldr	r3, [pc, #220]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024bc:	2180      	movs	r1, #128	@ 0x80
 80024be:	0249      	lsls	r1, r1, #9
 80024c0:	430a      	orrs	r2, r1
 80024c2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024c4:	4b34      	ldr	r3, [pc, #208]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024c6:	6a1a      	ldr	r2, [r3, #32]
 80024c8:	4b33      	ldr	r3, [pc, #204]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024ca:	4936      	ldr	r1, [pc, #216]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024d0:	4b31      	ldr	r3, [pc, #196]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	4013      	ands	r3, r2
 80024dc:	d013      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024de:	f7fe fbc5 	bl	8000c6c <HAL_GetTick>
 80024e2:	0003      	movs	r3, r0
 80024e4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e6:	e009      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e8:	f7fe fbc0 	bl	8000c6c <HAL_GetTick>
 80024ec:	0002      	movs	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	4a2d      	ldr	r2, [pc, #180]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d901      	bls.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e048      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fc:	4b26      	ldr	r3, [pc, #152]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	2202      	movs	r2, #2
 8002502:	4013      	ands	r3, r2
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002506:	4b24      	ldr	r3, [pc, #144]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	4a25      	ldr	r2, [pc, #148]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800250c:	4013      	ands	r3, r2
 800250e:	0019      	movs	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	4b20      	ldr	r3, [pc, #128]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002516:	430a      	orrs	r2, r1
 8002518:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800251a:	2317      	movs	r3, #23
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d105      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002524:	4b1c      	ldr	r3, [pc, #112]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002526:	69da      	ldr	r2, [r3, #28]
 8002528:	4b1b      	ldr	r3, [pc, #108]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800252a:	4920      	ldr	r1, [pc, #128]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800252c:	400a      	ands	r2, r1
 800252e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2201      	movs	r2, #1
 8002536:	4013      	ands	r3, r2
 8002538:	d009      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800253a:	4b17      	ldr	r3, [pc, #92]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	2203      	movs	r2, #3
 8002540:	4393      	bics	r3, r2
 8002542:	0019      	movs	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	4b13      	ldr	r3, [pc, #76]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800254a:	430a      	orrs	r2, r1
 800254c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2220      	movs	r2, #32
 8002554:	4013      	ands	r3, r2
 8002556:	d009      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002558:	4b0f      	ldr	r3, [pc, #60]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255c:	2210      	movs	r2, #16
 800255e:	4393      	bics	r3, r2
 8002560:	0019      	movs	r1, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	4b0c      	ldr	r3, [pc, #48]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002568:	430a      	orrs	r2, r1
 800256a:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	2380      	movs	r3, #128	@ 0x80
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4013      	ands	r3, r2
 8002576:	d009      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002578:	4b07      	ldr	r3, [pc, #28]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257c:	2240      	movs	r2, #64	@ 0x40
 800257e:	4393      	bics	r3, r2
 8002580:	0019      	movs	r1, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	4b04      	ldr	r3, [pc, #16]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002588:	430a      	orrs	r2, r1
 800258a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	0018      	movs	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	b006      	add	sp, #24
 8002594:	bd80      	pop	{r7, pc}
 8002596:	46c0      	nop			@ (mov r8, r8)
 8002598:	40021000 	.word	0x40021000
 800259c:	40007000 	.word	0x40007000
 80025a0:	fffffcff 	.word	0xfffffcff
 80025a4:	fffeffff 	.word	0xfffeffff
 80025a8:	00001388 	.word	0x00001388
 80025ac:	efffffff 	.word	0xefffffff

080025b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e042      	b.n	8002648 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	223d      	movs	r2, #61	@ 0x3d
 80025c6:	5c9b      	ldrb	r3, [r3, r2]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d107      	bne.n	80025de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	223c      	movs	r2, #60	@ 0x3c
 80025d2:	2100      	movs	r1, #0
 80025d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	0018      	movs	r0, r3
 80025da:	f7fe fa19 	bl	8000a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	223d      	movs	r2, #61	@ 0x3d
 80025e2:	2102      	movs	r1, #2
 80025e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3304      	adds	r3, #4
 80025ee:	0019      	movs	r1, r3
 80025f0:	0010      	movs	r0, r2
 80025f2:	f000 fb5b 	bl	8002cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2246      	movs	r2, #70	@ 0x46
 80025fa:	2101      	movs	r1, #1
 80025fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	223e      	movs	r2, #62	@ 0x3e
 8002602:	2101      	movs	r1, #1
 8002604:	5499      	strb	r1, [r3, r2]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	223f      	movs	r2, #63	@ 0x3f
 800260a:	2101      	movs	r1, #1
 800260c:	5499      	strb	r1, [r3, r2]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2240      	movs	r2, #64	@ 0x40
 8002612:	2101      	movs	r1, #1
 8002614:	5499      	strb	r1, [r3, r2]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2241      	movs	r2, #65	@ 0x41
 800261a:	2101      	movs	r1, #1
 800261c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2242      	movs	r2, #66	@ 0x42
 8002622:	2101      	movs	r1, #1
 8002624:	5499      	strb	r1, [r3, r2]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2243      	movs	r2, #67	@ 0x43
 800262a:	2101      	movs	r1, #1
 800262c:	5499      	strb	r1, [r3, r2]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2244      	movs	r2, #68	@ 0x44
 8002632:	2101      	movs	r1, #1
 8002634:	5499      	strb	r1, [r3, r2]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2245      	movs	r2, #69	@ 0x45
 800263a:	2101      	movs	r1, #1
 800263c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	223d      	movs	r2, #61	@ 0x3d
 8002642:	2101      	movs	r1, #1
 8002644:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	0018      	movs	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	b002      	add	sp, #8
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	223d      	movs	r2, #61	@ 0x3d
 800265c:	5c9b      	ldrb	r3, [r3, r2]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b01      	cmp	r3, #1
 8002662:	d001      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e03b      	b.n	80026e0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	223d      	movs	r2, #61	@ 0x3d
 800266c:	2102      	movs	r1, #2
 800266e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2101      	movs	r1, #1
 800267c:	430a      	orrs	r2, r1
 800267e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a18      	ldr	r2, [pc, #96]	@ (80026e8 <HAL_TIM_Base_Start_IT+0x98>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00f      	beq.n	80026aa <HAL_TIM_Base_Start_IT+0x5a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	2380      	movs	r3, #128	@ 0x80
 8002690:	05db      	lsls	r3, r3, #23
 8002692:	429a      	cmp	r2, r3
 8002694:	d009      	beq.n	80026aa <HAL_TIM_Base_Start_IT+0x5a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a14      	ldr	r2, [pc, #80]	@ (80026ec <HAL_TIM_Base_Start_IT+0x9c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d004      	beq.n	80026aa <HAL_TIM_Base_Start_IT+0x5a>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a12      	ldr	r2, [pc, #72]	@ (80026f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d111      	bne.n	80026ce <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2207      	movs	r2, #7
 80026b2:	4013      	ands	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b06      	cmp	r3, #6
 80026ba:	d010      	beq.n	80026de <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2101      	movs	r1, #1
 80026c8:	430a      	orrs	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026cc:	e007      	b.n	80026de <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2101      	movs	r1, #1
 80026da:	430a      	orrs	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	0018      	movs	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b004      	add	sp, #16
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40012c00 	.word	0x40012c00
 80026ec:	40000400 	.word	0x40000400
 80026f0:	40014000 	.word	0x40014000

080026f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e042      	b.n	800278c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	223d      	movs	r2, #61	@ 0x3d
 800270a:	5c9b      	ldrb	r3, [r3, r2]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d107      	bne.n	8002722 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	223c      	movs	r2, #60	@ 0x3c
 8002716:	2100      	movs	r1, #0
 8002718:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	0018      	movs	r0, r3
 800271e:	f7fe f959 	bl	80009d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	223d      	movs	r2, #61	@ 0x3d
 8002726:	2102      	movs	r1, #2
 8002728:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3304      	adds	r3, #4
 8002732:	0019      	movs	r1, r3
 8002734:	0010      	movs	r0, r2
 8002736:	f000 fab9 	bl	8002cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2246      	movs	r2, #70	@ 0x46
 800273e:	2101      	movs	r1, #1
 8002740:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	223e      	movs	r2, #62	@ 0x3e
 8002746:	2101      	movs	r1, #1
 8002748:	5499      	strb	r1, [r3, r2]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	223f      	movs	r2, #63	@ 0x3f
 800274e:	2101      	movs	r1, #1
 8002750:	5499      	strb	r1, [r3, r2]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2240      	movs	r2, #64	@ 0x40
 8002756:	2101      	movs	r1, #1
 8002758:	5499      	strb	r1, [r3, r2]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2241      	movs	r2, #65	@ 0x41
 800275e:	2101      	movs	r1, #1
 8002760:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2242      	movs	r2, #66	@ 0x42
 8002766:	2101      	movs	r1, #1
 8002768:	5499      	strb	r1, [r3, r2]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2243      	movs	r2, #67	@ 0x43
 800276e:	2101      	movs	r1, #1
 8002770:	5499      	strb	r1, [r3, r2]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2244      	movs	r2, #68	@ 0x44
 8002776:	2101      	movs	r1, #1
 8002778:	5499      	strb	r1, [r3, r2]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2245      	movs	r2, #69	@ 0x45
 800277e:	2101      	movs	r1, #1
 8002780:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	223d      	movs	r2, #61	@ 0x3d
 8002786:	2101      	movs	r1, #1
 8002788:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	b002      	add	sp, #8
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d108      	bne.n	80027b6 <HAL_TIM_PWM_Start+0x22>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	223e      	movs	r2, #62	@ 0x3e
 80027a8:	5c9b      	ldrb	r3, [r3, r2]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	3b01      	subs	r3, #1
 80027ae:	1e5a      	subs	r2, r3, #1
 80027b0:	4193      	sbcs	r3, r2
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	e01f      	b.n	80027f6 <HAL_TIM_PWM_Start+0x62>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d108      	bne.n	80027ce <HAL_TIM_PWM_Start+0x3a>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	223f      	movs	r2, #63	@ 0x3f
 80027c0:	5c9b      	ldrb	r3, [r3, r2]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	3b01      	subs	r3, #1
 80027c6:	1e5a      	subs	r2, r3, #1
 80027c8:	4193      	sbcs	r3, r2
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	e013      	b.n	80027f6 <HAL_TIM_PWM_Start+0x62>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d108      	bne.n	80027e6 <HAL_TIM_PWM_Start+0x52>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2240      	movs	r2, #64	@ 0x40
 80027d8:	5c9b      	ldrb	r3, [r3, r2]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	3b01      	subs	r3, #1
 80027de:	1e5a      	subs	r2, r3, #1
 80027e0:	4193      	sbcs	r3, r2
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	e007      	b.n	80027f6 <HAL_TIM_PWM_Start+0x62>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2241      	movs	r2, #65	@ 0x41
 80027ea:	5c9b      	ldrb	r3, [r3, r2]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	3b01      	subs	r3, #1
 80027f0:	1e5a      	subs	r2, r3, #1
 80027f2:	4193      	sbcs	r3, r2
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e074      	b.n	80028e8 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d104      	bne.n	800280e <HAL_TIM_PWM_Start+0x7a>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	223e      	movs	r2, #62	@ 0x3e
 8002808:	2102      	movs	r1, #2
 800280a:	5499      	strb	r1, [r3, r2]
 800280c:	e013      	b.n	8002836 <HAL_TIM_PWM_Start+0xa2>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b04      	cmp	r3, #4
 8002812:	d104      	bne.n	800281e <HAL_TIM_PWM_Start+0x8a>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	223f      	movs	r2, #63	@ 0x3f
 8002818:	2102      	movs	r1, #2
 800281a:	5499      	strb	r1, [r3, r2]
 800281c:	e00b      	b.n	8002836 <HAL_TIM_PWM_Start+0xa2>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b08      	cmp	r3, #8
 8002822:	d104      	bne.n	800282e <HAL_TIM_PWM_Start+0x9a>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2240      	movs	r2, #64	@ 0x40
 8002828:	2102      	movs	r1, #2
 800282a:	5499      	strb	r1, [r3, r2]
 800282c:	e003      	b.n	8002836 <HAL_TIM_PWM_Start+0xa2>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2241      	movs	r2, #65	@ 0x41
 8002832:	2102      	movs	r1, #2
 8002834:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6839      	ldr	r1, [r7, #0]
 800283c:	2201      	movs	r2, #1
 800283e:	0018      	movs	r0, r3
 8002840:	f000 fcbe 	bl	80031c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a29      	ldr	r2, [pc, #164]	@ (80028f0 <HAL_TIM_PWM_Start+0x15c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00e      	beq.n	800286c <HAL_TIM_PWM_Start+0xd8>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a28      	ldr	r2, [pc, #160]	@ (80028f4 <HAL_TIM_PWM_Start+0x160>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d009      	beq.n	800286c <HAL_TIM_PWM_Start+0xd8>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a26      	ldr	r2, [pc, #152]	@ (80028f8 <HAL_TIM_PWM_Start+0x164>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d004      	beq.n	800286c <HAL_TIM_PWM_Start+0xd8>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a25      	ldr	r2, [pc, #148]	@ (80028fc <HAL_TIM_PWM_Start+0x168>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d101      	bne.n	8002870 <HAL_TIM_PWM_Start+0xdc>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <HAL_TIM_PWM_Start+0xde>
 8002870:	2300      	movs	r3, #0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d008      	beq.n	8002888 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2180      	movs	r1, #128	@ 0x80
 8002882:	0209      	lsls	r1, r1, #8
 8002884:	430a      	orrs	r2, r1
 8002886:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a18      	ldr	r2, [pc, #96]	@ (80028f0 <HAL_TIM_PWM_Start+0x15c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00f      	beq.n	80028b2 <HAL_TIM_PWM_Start+0x11e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	2380      	movs	r3, #128	@ 0x80
 8002898:	05db      	lsls	r3, r3, #23
 800289a:	429a      	cmp	r2, r3
 800289c:	d009      	beq.n	80028b2 <HAL_TIM_PWM_Start+0x11e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a17      	ldr	r2, [pc, #92]	@ (8002900 <HAL_TIM_PWM_Start+0x16c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d004      	beq.n	80028b2 <HAL_TIM_PWM_Start+0x11e>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a11      	ldr	r2, [pc, #68]	@ (80028f4 <HAL_TIM_PWM_Start+0x160>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d111      	bne.n	80028d6 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2207      	movs	r2, #7
 80028ba:	4013      	ands	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b06      	cmp	r3, #6
 80028c2:	d010      	beq.n	80028e6 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2101      	movs	r1, #1
 80028d0:	430a      	orrs	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d4:	e007      	b.n	80028e6 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2101      	movs	r1, #1
 80028e2:	430a      	orrs	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	0018      	movs	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	b004      	add	sp, #16
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40012c00 	.word	0x40012c00
 80028f4:	40014000 	.word	0x40014000
 80028f8:	40014400 	.word	0x40014400
 80028fc:	40014800 	.word	0x40014800
 8002900:	40000400 	.word	0x40000400

08002904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2202      	movs	r2, #2
 8002920:	4013      	ands	r3, r2
 8002922:	d021      	beq.n	8002968 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2202      	movs	r2, #2
 8002928:	4013      	ands	r3, r2
 800292a:	d01d      	beq.n	8002968 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2203      	movs	r2, #3
 8002932:	4252      	negs	r2, r2
 8002934:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	2203      	movs	r2, #3
 8002944:	4013      	ands	r3, r2
 8002946:	d004      	beq.n	8002952 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	0018      	movs	r0, r3
 800294c:	f000 f996 	bl	8002c7c <HAL_TIM_IC_CaptureCallback>
 8002950:	e007      	b.n	8002962 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	0018      	movs	r0, r3
 8002956:	f000 f989 	bl	8002c6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	0018      	movs	r0, r3
 800295e:	f000 f995 	bl	8002c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2204      	movs	r2, #4
 800296c:	4013      	ands	r3, r2
 800296e:	d022      	beq.n	80029b6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2204      	movs	r2, #4
 8002974:	4013      	ands	r3, r2
 8002976:	d01e      	beq.n	80029b6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2205      	movs	r2, #5
 800297e:	4252      	negs	r2, r2
 8002980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2202      	movs	r2, #2
 8002986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	23c0      	movs	r3, #192	@ 0xc0
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4013      	ands	r3, r2
 8002994:	d004      	beq.n	80029a0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	0018      	movs	r0, r3
 800299a:	f000 f96f 	bl	8002c7c <HAL_TIM_IC_CaptureCallback>
 800299e:	e007      	b.n	80029b0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	0018      	movs	r0, r3
 80029a4:	f000 f962 	bl	8002c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f000 f96e 	bl	8002c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2208      	movs	r2, #8
 80029ba:	4013      	ands	r3, r2
 80029bc:	d021      	beq.n	8002a02 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2208      	movs	r2, #8
 80029c2:	4013      	ands	r3, r2
 80029c4:	d01d      	beq.n	8002a02 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2209      	movs	r2, #9
 80029cc:	4252      	negs	r2, r2
 80029ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2204      	movs	r2, #4
 80029d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	2203      	movs	r2, #3
 80029de:	4013      	ands	r3, r2
 80029e0:	d004      	beq.n	80029ec <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	0018      	movs	r0, r3
 80029e6:	f000 f949 	bl	8002c7c <HAL_TIM_IC_CaptureCallback>
 80029ea:	e007      	b.n	80029fc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	0018      	movs	r0, r3
 80029f0:	f000 f93c 	bl	8002c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	0018      	movs	r0, r3
 80029f8:	f000 f948 	bl	8002c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2210      	movs	r2, #16
 8002a06:	4013      	ands	r3, r2
 8002a08:	d022      	beq.n	8002a50 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2210      	movs	r2, #16
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d01e      	beq.n	8002a50 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2211      	movs	r2, #17
 8002a18:	4252      	negs	r2, r2
 8002a1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2208      	movs	r2, #8
 8002a20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69da      	ldr	r2, [r3, #28]
 8002a28:	23c0      	movs	r3, #192	@ 0xc0
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d004      	beq.n	8002a3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	0018      	movs	r0, r3
 8002a34:	f000 f922 	bl	8002c7c <HAL_TIM_IC_CaptureCallback>
 8002a38:	e007      	b.n	8002a4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f000 f915 	bl	8002c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	0018      	movs	r0, r3
 8002a46:	f000 f921 	bl	8002c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2201      	movs	r2, #1
 8002a54:	4013      	ands	r3, r2
 8002a56:	d00c      	beq.n	8002a72 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d008      	beq.n	8002a72 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2202      	movs	r2, #2
 8002a66:	4252      	negs	r2, r2
 8002a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7fd ff0b 	bl	8000888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2280      	movs	r2, #128	@ 0x80
 8002a76:	4013      	ands	r3, r2
 8002a78:	d00c      	beq.n	8002a94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2280      	movs	r2, #128	@ 0x80
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d008      	beq.n	8002a94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2281      	movs	r2, #129	@ 0x81
 8002a88:	4252      	negs	r2, r2
 8002a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f000 fc20 	bl	80032d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2240      	movs	r2, #64	@ 0x40
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d00c      	beq.n	8002ab6 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2240      	movs	r2, #64	@ 0x40
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d008      	beq.n	8002ab6 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2241      	movs	r2, #65	@ 0x41
 8002aaa:	4252      	negs	r2, r2
 8002aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f000 f8f3 	bl	8002c9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	4013      	ands	r3, r2
 8002abc:	d00c      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d008      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2221      	movs	r2, #33	@ 0x21
 8002acc:	4252      	negs	r2, r2
 8002ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f000 fbf6 	bl	80032c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ad8:	46c0      	nop			@ (mov r8, r8)
 8002ada:	46bd      	mov	sp, r7
 8002adc:	b004      	add	sp, #16
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aec:	2317      	movs	r3, #23
 8002aee:	18fb      	adds	r3, r7, r3
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	223c      	movs	r2, #60	@ 0x3c
 8002af8:	5c9b      	ldrb	r3, [r3, r2]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e0ad      	b.n	8002c5e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	223c      	movs	r2, #60	@ 0x3c
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b0c      	cmp	r3, #12
 8002b0e:	d100      	bne.n	8002b12 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002b10:	e076      	b.n	8002c00 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b0c      	cmp	r3, #12
 8002b16:	d900      	bls.n	8002b1a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002b18:	e095      	b.n	8002c46 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d04e      	beq.n	8002bbe <HAL_TIM_PWM_ConfigChannel+0xde>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d900      	bls.n	8002b28 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002b26:	e08e      	b.n	8002c46 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d021      	beq.n	8002b78 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002b34:	e087      	b.n	8002c46 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	0011      	movs	r1, r2
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f000 f942 	bl	8002dc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2108      	movs	r1, #8
 8002b50:	430a      	orrs	r2, r1
 8002b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2104      	movs	r1, #4
 8002b60:	438a      	bics	r2, r1
 8002b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6999      	ldr	r1, [r3, #24]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	619a      	str	r2, [r3, #24]
      break;
 8002b76:	e06b      	b.n	8002c50 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	0011      	movs	r1, r2
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 f9a9 	bl	8002ed8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2180      	movs	r1, #128	@ 0x80
 8002b92:	0109      	lsls	r1, r1, #4
 8002b94:	430a      	orrs	r2, r1
 8002b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4931      	ldr	r1, [pc, #196]	@ (8002c68 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002ba4:	400a      	ands	r2, r1
 8002ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6999      	ldr	r1, [r3, #24]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	021a      	lsls	r2, r3, #8
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	619a      	str	r2, [r3, #24]
      break;
 8002bbc:	e048      	b.n	8002c50 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	0011      	movs	r1, r2
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f000 fa0a 	bl	8002fe0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69da      	ldr	r2, [r3, #28]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2108      	movs	r1, #8
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	69da      	ldr	r2, [r3, #28]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2104      	movs	r1, #4
 8002be8:	438a      	bics	r2, r1
 8002bea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69d9      	ldr	r1, [r3, #28]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	61da      	str	r2, [r3, #28]
      break;
 8002bfe:	e027      	b.n	8002c50 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	0011      	movs	r1, r2
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f000 fa6f 	bl	80030ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	69da      	ldr	r2, [r3, #28]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2180      	movs	r1, #128	@ 0x80
 8002c1a:	0109      	lsls	r1, r1, #4
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	69da      	ldr	r2, [r3, #28]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	490f      	ldr	r1, [pc, #60]	@ (8002c68 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002c2c:	400a      	ands	r2, r1
 8002c2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	69d9      	ldr	r1, [r3, #28]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	021a      	lsls	r2, r3, #8
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	61da      	str	r2, [r3, #28]
      break;
 8002c44:	e004      	b.n	8002c50 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002c46:	2317      	movs	r3, #23
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	701a      	strb	r2, [r3, #0]
      break;
 8002c4e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	223c      	movs	r2, #60	@ 0x3c
 8002c54:	2100      	movs	r1, #0
 8002c56:	5499      	strb	r1, [r3, r2]

  return status;
 8002c58:	2317      	movs	r3, #23
 8002c5a:	18fb      	adds	r3, r7, r3
 8002c5c:	781b      	ldrb	r3, [r3, #0]
}
 8002c5e:	0018      	movs	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	b006      	add	sp, #24
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	46c0      	nop			@ (mov r8, r8)
 8002c68:	fffffbff 	.word	0xfffffbff

08002c6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c74:	46c0      	nop			@ (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b002      	add	sp, #8
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c84:	46c0      	nop			@ (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b002      	add	sp, #8
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c94:	46c0      	nop			@ (mov r8, r8)
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b002      	add	sp, #8
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ca4:	46c0      	nop			@ (mov r8, r8)
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b002      	add	sp, #8
 8002caa:	bd80      	pop	{r7, pc}

08002cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a3b      	ldr	r2, [pc, #236]	@ (8002dac <TIM_Base_SetConfig+0x100>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d008      	beq.n	8002cd6 <TIM_Base_SetConfig+0x2a>
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	2380      	movs	r3, #128	@ 0x80
 8002cc8:	05db      	lsls	r3, r3, #23
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d003      	beq.n	8002cd6 <TIM_Base_SetConfig+0x2a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a37      	ldr	r2, [pc, #220]	@ (8002db0 <TIM_Base_SetConfig+0x104>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d108      	bne.n	8002ce8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2270      	movs	r2, #112	@ 0x70
 8002cda:	4393      	bics	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a30      	ldr	r2, [pc, #192]	@ (8002dac <TIM_Base_SetConfig+0x100>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d018      	beq.n	8002d22 <TIM_Base_SetConfig+0x76>
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	2380      	movs	r3, #128	@ 0x80
 8002cf4:	05db      	lsls	r3, r3, #23
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d013      	beq.n	8002d22 <TIM_Base_SetConfig+0x76>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a2c      	ldr	r2, [pc, #176]	@ (8002db0 <TIM_Base_SetConfig+0x104>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00f      	beq.n	8002d22 <TIM_Base_SetConfig+0x76>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a2b      	ldr	r2, [pc, #172]	@ (8002db4 <TIM_Base_SetConfig+0x108>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00b      	beq.n	8002d22 <TIM_Base_SetConfig+0x76>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a2a      	ldr	r2, [pc, #168]	@ (8002db8 <TIM_Base_SetConfig+0x10c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d007      	beq.n	8002d22 <TIM_Base_SetConfig+0x76>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a29      	ldr	r2, [pc, #164]	@ (8002dbc <TIM_Base_SetConfig+0x110>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d003      	beq.n	8002d22 <TIM_Base_SetConfig+0x76>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a28      	ldr	r2, [pc, #160]	@ (8002dc0 <TIM_Base_SetConfig+0x114>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d108      	bne.n	8002d34 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4a27      	ldr	r2, [pc, #156]	@ (8002dc4 <TIM_Base_SetConfig+0x118>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2280      	movs	r2, #128	@ 0x80
 8002d38:	4393      	bics	r3, r2
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a13      	ldr	r2, [pc, #76]	@ (8002dac <TIM_Base_SetConfig+0x100>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00b      	beq.n	8002d7a <TIM_Base_SetConfig+0xce>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a14      	ldr	r2, [pc, #80]	@ (8002db8 <TIM_Base_SetConfig+0x10c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d007      	beq.n	8002d7a <TIM_Base_SetConfig+0xce>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a13      	ldr	r2, [pc, #76]	@ (8002dbc <TIM_Base_SetConfig+0x110>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d003      	beq.n	8002d7a <TIM_Base_SetConfig+0xce>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a12      	ldr	r2, [pc, #72]	@ (8002dc0 <TIM_Base_SetConfig+0x114>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d103      	bne.n	8002d82 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d106      	bne.n	8002da2 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	4393      	bics	r3, r2
 8002d9c:	001a      	movs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	611a      	str	r2, [r3, #16]
  }
}
 8002da2:	46c0      	nop			@ (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b004      	add	sp, #16
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			@ (mov r8, r8)
 8002dac:	40012c00 	.word	0x40012c00
 8002db0:	40000400 	.word	0x40000400
 8002db4:	40002000 	.word	0x40002000
 8002db8:	40014000 	.word	0x40014000
 8002dbc:	40014400 	.word	0x40014400
 8002dc0:	40014800 	.word	0x40014800
 8002dc4:	fffffcff 	.word	0xfffffcff

08002dc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	4393      	bics	r3, r2
 8002de0:	001a      	movs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2270      	movs	r2, #112	@ 0x70
 8002df6:	4393      	bics	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	4393      	bics	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	4393      	bics	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a27      	ldr	r2, [pc, #156]	@ (8002ec0 <TIM_OC1_SetConfig+0xf8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00b      	beq.n	8002e3e <TIM_OC1_SetConfig+0x76>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a26      	ldr	r2, [pc, #152]	@ (8002ec4 <TIM_OC1_SetConfig+0xfc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d007      	beq.n	8002e3e <TIM_OC1_SetConfig+0x76>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a25      	ldr	r2, [pc, #148]	@ (8002ec8 <TIM_OC1_SetConfig+0x100>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d003      	beq.n	8002e3e <TIM_OC1_SetConfig+0x76>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a24      	ldr	r2, [pc, #144]	@ (8002ecc <TIM_OC1_SetConfig+0x104>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d10c      	bne.n	8002e58 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2208      	movs	r2, #8
 8002e42:	4393      	bics	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2204      	movs	r2, #4
 8002e54:	4393      	bics	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a19      	ldr	r2, [pc, #100]	@ (8002ec0 <TIM_OC1_SetConfig+0xf8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d00b      	beq.n	8002e78 <TIM_OC1_SetConfig+0xb0>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a18      	ldr	r2, [pc, #96]	@ (8002ec4 <TIM_OC1_SetConfig+0xfc>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d007      	beq.n	8002e78 <TIM_OC1_SetConfig+0xb0>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a17      	ldr	r2, [pc, #92]	@ (8002ec8 <TIM_OC1_SetConfig+0x100>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d003      	beq.n	8002e78 <TIM_OC1_SetConfig+0xb0>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a16      	ldr	r2, [pc, #88]	@ (8002ecc <TIM_OC1_SetConfig+0x104>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d111      	bne.n	8002e9c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4a15      	ldr	r2, [pc, #84]	@ (8002ed0 <TIM_OC1_SetConfig+0x108>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4a14      	ldr	r2, [pc, #80]	@ (8002ed4 <TIM_OC1_SetConfig+0x10c>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	621a      	str	r2, [r3, #32]
}
 8002eb6:	46c0      	nop			@ (mov r8, r8)
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b006      	add	sp, #24
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			@ (mov r8, r8)
 8002ec0:	40012c00 	.word	0x40012c00
 8002ec4:	40014000 	.word	0x40014000
 8002ec8:	40014400 	.word	0x40014400
 8002ecc:	40014800 	.word	0x40014800
 8002ed0:	fffffeff 	.word	0xfffffeff
 8002ed4:	fffffdff 	.word	0xfffffdff

08002ed8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	2210      	movs	r2, #16
 8002eee:	4393      	bics	r3, r2
 8002ef0:	001a      	movs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4a2e      	ldr	r2, [pc, #184]	@ (8002fc0 <TIM_OC2_SetConfig+0xe8>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8002fc4 <TIM_OC2_SetConfig+0xec>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2220      	movs	r2, #32
 8002f22:	4393      	bics	r3, r2
 8002f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a24      	ldr	r2, [pc, #144]	@ (8002fc8 <TIM_OC2_SetConfig+0xf0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d10d      	bne.n	8002f56 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2280      	movs	r2, #128	@ 0x80
 8002f3e:	4393      	bics	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2240      	movs	r2, #64	@ 0x40
 8002f52:	4393      	bics	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc8 <TIM_OC2_SetConfig+0xf0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00b      	beq.n	8002f76 <TIM_OC2_SetConfig+0x9e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a1a      	ldr	r2, [pc, #104]	@ (8002fcc <TIM_OC2_SetConfig+0xf4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d007      	beq.n	8002f76 <TIM_OC2_SetConfig+0x9e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a19      	ldr	r2, [pc, #100]	@ (8002fd0 <TIM_OC2_SetConfig+0xf8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d003      	beq.n	8002f76 <TIM_OC2_SetConfig+0x9e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a18      	ldr	r2, [pc, #96]	@ (8002fd4 <TIM_OC2_SetConfig+0xfc>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d113      	bne.n	8002f9e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4a17      	ldr	r2, [pc, #92]	@ (8002fd8 <TIM_OC2_SetConfig+0x100>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4a16      	ldr	r2, [pc, #88]	@ (8002fdc <TIM_OC2_SetConfig+0x104>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	621a      	str	r2, [r3, #32]
}
 8002fb8:	46c0      	nop			@ (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b006      	add	sp, #24
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	ffff8fff 	.word	0xffff8fff
 8002fc4:	fffffcff 	.word	0xfffffcff
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	40014000 	.word	0x40014000
 8002fd0:	40014400 	.word	0x40014400
 8002fd4:	40014800 	.word	0x40014800
 8002fd8:	fffffbff 	.word	0xfffffbff
 8002fdc:	fffff7ff 	.word	0xfffff7ff

08002fe0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	4a33      	ldr	r2, [pc, #204]	@ (80030c4 <TIM_OC3_SetConfig+0xe4>)
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2270      	movs	r2, #112	@ 0x70
 800300c:	4393      	bics	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2203      	movs	r2, #3
 8003014:	4393      	bics	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	4a28      	ldr	r2, [pc, #160]	@ (80030c8 <TIM_OC3_SetConfig+0xe8>)
 8003026:	4013      	ands	r3, r2
 8003028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	4313      	orrs	r3, r2
 8003034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a24      	ldr	r2, [pc, #144]	@ (80030cc <TIM_OC3_SetConfig+0xec>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d10d      	bne.n	800305a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	4a23      	ldr	r2, [pc, #140]	@ (80030d0 <TIM_OC3_SetConfig+0xf0>)
 8003042:	4013      	ands	r3, r2
 8003044:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	021b      	lsls	r3, r3, #8
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	4a1f      	ldr	r2, [pc, #124]	@ (80030d4 <TIM_OC3_SetConfig+0xf4>)
 8003056:	4013      	ands	r3, r2
 8003058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a1b      	ldr	r2, [pc, #108]	@ (80030cc <TIM_OC3_SetConfig+0xec>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00b      	beq.n	800307a <TIM_OC3_SetConfig+0x9a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a1c      	ldr	r2, [pc, #112]	@ (80030d8 <TIM_OC3_SetConfig+0xf8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d007      	beq.n	800307a <TIM_OC3_SetConfig+0x9a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a1b      	ldr	r2, [pc, #108]	@ (80030dc <TIM_OC3_SetConfig+0xfc>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d003      	beq.n	800307a <TIM_OC3_SetConfig+0x9a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a1a      	ldr	r2, [pc, #104]	@ (80030e0 <TIM_OC3_SetConfig+0x100>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d113      	bne.n	80030a2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4a19      	ldr	r2, [pc, #100]	@ (80030e4 <TIM_OC3_SetConfig+0x104>)
 800307e:	4013      	ands	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4a18      	ldr	r2, [pc, #96]	@ (80030e8 <TIM_OC3_SetConfig+0x108>)
 8003086:	4013      	ands	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	621a      	str	r2, [r3, #32]
}
 80030bc:	46c0      	nop			@ (mov r8, r8)
 80030be:	46bd      	mov	sp, r7
 80030c0:	b006      	add	sp, #24
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	fffffeff 	.word	0xfffffeff
 80030c8:	fffffdff 	.word	0xfffffdff
 80030cc:	40012c00 	.word	0x40012c00
 80030d0:	fffff7ff 	.word	0xfffff7ff
 80030d4:	fffffbff 	.word	0xfffffbff
 80030d8:	40014000 	.word	0x40014000
 80030dc:	40014400 	.word	0x40014400
 80030e0:	40014800 	.word	0x40014800
 80030e4:	ffffefff 	.word	0xffffefff
 80030e8:	ffffdfff 	.word	0xffffdfff

080030ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	4a26      	ldr	r2, [pc, #152]	@ (800319c <TIM_OC4_SetConfig+0xb0>)
 8003102:	401a      	ands	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4a22      	ldr	r2, [pc, #136]	@ (80031a0 <TIM_OC4_SetConfig+0xb4>)
 8003118:	4013      	ands	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4a21      	ldr	r2, [pc, #132]	@ (80031a4 <TIM_OC4_SetConfig+0xb8>)
 8003120:	4013      	ands	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	021b      	lsls	r3, r3, #8
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4a1d      	ldr	r2, [pc, #116]	@ (80031a8 <TIM_OC4_SetConfig+0xbc>)
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	031b      	lsls	r3, r3, #12
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a19      	ldr	r2, [pc, #100]	@ (80031ac <TIM_OC4_SetConfig+0xc0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00b      	beq.n	8003164 <TIM_OC4_SetConfig+0x78>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a18      	ldr	r2, [pc, #96]	@ (80031b0 <TIM_OC4_SetConfig+0xc4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d007      	beq.n	8003164 <TIM_OC4_SetConfig+0x78>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a17      	ldr	r2, [pc, #92]	@ (80031b4 <TIM_OC4_SetConfig+0xc8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d003      	beq.n	8003164 <TIM_OC4_SetConfig+0x78>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a16      	ldr	r2, [pc, #88]	@ (80031b8 <TIM_OC4_SetConfig+0xcc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d109      	bne.n	8003178 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	4a15      	ldr	r2, [pc, #84]	@ (80031bc <TIM_OC4_SetConfig+0xd0>)
 8003168:	4013      	ands	r3, r2
 800316a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	019b      	lsls	r3, r3, #6
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	621a      	str	r2, [r3, #32]
}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b006      	add	sp, #24
 8003198:	bd80      	pop	{r7, pc}
 800319a:	46c0      	nop			@ (mov r8, r8)
 800319c:	ffffefff 	.word	0xffffefff
 80031a0:	ffff8fff 	.word	0xffff8fff
 80031a4:	fffffcff 	.word	0xfffffcff
 80031a8:	ffffdfff 	.word	0xffffdfff
 80031ac:	40012c00 	.word	0x40012c00
 80031b0:	40014000 	.word	0x40014000
 80031b4:	40014400 	.word	0x40014400
 80031b8:	40014800 	.word	0x40014800
 80031bc:	ffffbfff 	.word	0xffffbfff

080031c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	221f      	movs	r2, #31
 80031d0:	4013      	ands	r3, r2
 80031d2:	2201      	movs	r2, #1
 80031d4:	409a      	lsls	r2, r3
 80031d6:	0013      	movs	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	43d2      	mvns	r2, r2
 80031e2:	401a      	ands	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a1a      	ldr	r2, [r3, #32]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	211f      	movs	r1, #31
 80031f0:	400b      	ands	r3, r1
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4099      	lsls	r1, r3
 80031f6:	000b      	movs	r3, r1
 80031f8:	431a      	orrs	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	621a      	str	r2, [r3, #32]
}
 80031fe:	46c0      	nop			@ (mov r8, r8)
 8003200:	46bd      	mov	sp, r7
 8003202:	b006      	add	sp, #24
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	223c      	movs	r2, #60	@ 0x3c
 8003216:	5c9b      	ldrb	r3, [r3, r2]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800321c:	2302      	movs	r3, #2
 800321e:	e047      	b.n	80032b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	223c      	movs	r2, #60	@ 0x3c
 8003224:	2101      	movs	r1, #1
 8003226:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	223d      	movs	r2, #61	@ 0x3d
 800322c:	2102      	movs	r1, #2
 800322e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2270      	movs	r2, #112	@ 0x70
 8003244:	4393      	bics	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a16      	ldr	r2, [pc, #88]	@ (80032b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d00f      	beq.n	8003284 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	2380      	movs	r3, #128	@ 0x80
 800326a:	05db      	lsls	r3, r3, #23
 800326c:	429a      	cmp	r2, r3
 800326e:	d009      	beq.n	8003284 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a11      	ldr	r2, [pc, #68]	@ (80032bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d004      	beq.n	8003284 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a10      	ldr	r2, [pc, #64]	@ (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d10c      	bne.n	800329e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2280      	movs	r2, #128	@ 0x80
 8003288:	4393      	bics	r3, r2
 800328a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	4313      	orrs	r3, r2
 8003294:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	223d      	movs	r2, #61	@ 0x3d
 80032a2:	2101      	movs	r1, #1
 80032a4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	223c      	movs	r2, #60	@ 0x3c
 80032aa:	2100      	movs	r1, #0
 80032ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	0018      	movs	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	b004      	add	sp, #16
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40012c00 	.word	0x40012c00
 80032bc:	40000400 	.word	0x40000400
 80032c0:	40014000 	.word	0x40014000

080032c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032cc:	46c0      	nop			@ (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b002      	add	sp, #8
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032dc:	46c0      	nop			@ (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	b002      	add	sp, #8
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <memset>:
 80032e4:	0003      	movs	r3, r0
 80032e6:	1882      	adds	r2, r0, r2
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d100      	bne.n	80032ee <memset+0xa>
 80032ec:	4770      	bx	lr
 80032ee:	7019      	strb	r1, [r3, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	e7f9      	b.n	80032e8 <memset+0x4>

080032f4 <__libc_init_array>:
 80032f4:	b570      	push	{r4, r5, r6, lr}
 80032f6:	2600      	movs	r6, #0
 80032f8:	4c0c      	ldr	r4, [pc, #48]	@ (800332c <__libc_init_array+0x38>)
 80032fa:	4d0d      	ldr	r5, [pc, #52]	@ (8003330 <__libc_init_array+0x3c>)
 80032fc:	1b64      	subs	r4, r4, r5
 80032fe:	10a4      	asrs	r4, r4, #2
 8003300:	42a6      	cmp	r6, r4
 8003302:	d109      	bne.n	8003318 <__libc_init_array+0x24>
 8003304:	2600      	movs	r6, #0
 8003306:	f000 f819 	bl	800333c <_init>
 800330a:	4c0a      	ldr	r4, [pc, #40]	@ (8003334 <__libc_init_array+0x40>)
 800330c:	4d0a      	ldr	r5, [pc, #40]	@ (8003338 <__libc_init_array+0x44>)
 800330e:	1b64      	subs	r4, r4, r5
 8003310:	10a4      	asrs	r4, r4, #2
 8003312:	42a6      	cmp	r6, r4
 8003314:	d105      	bne.n	8003322 <__libc_init_array+0x2e>
 8003316:	bd70      	pop	{r4, r5, r6, pc}
 8003318:	00b3      	lsls	r3, r6, #2
 800331a:	58eb      	ldr	r3, [r5, r3]
 800331c:	4798      	blx	r3
 800331e:	3601      	adds	r6, #1
 8003320:	e7ee      	b.n	8003300 <__libc_init_array+0xc>
 8003322:	00b3      	lsls	r3, r6, #2
 8003324:	58eb      	ldr	r3, [r5, r3]
 8003326:	4798      	blx	r3
 8003328:	3601      	adds	r6, #1
 800332a:	e7f2      	b.n	8003312 <__libc_init_array+0x1e>
 800332c:	08003384 	.word	0x08003384
 8003330:	08003384 	.word	0x08003384
 8003334:	08003388 	.word	0x08003388
 8003338:	08003384 	.word	0x08003384

0800333c <_init>:
 800333c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333e:	46c0      	nop			@ (mov r8, r8)
 8003340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003342:	bc08      	pop	{r3}
 8003344:	469e      	mov	lr, r3
 8003346:	4770      	bx	lr

08003348 <_fini>:
 8003348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334a:	46c0      	nop			@ (mov r8, r8)
 800334c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800334e:	bc08      	pop	{r3}
 8003350:	469e      	mov	lr, r3
 8003352:	4770      	bx	lr
