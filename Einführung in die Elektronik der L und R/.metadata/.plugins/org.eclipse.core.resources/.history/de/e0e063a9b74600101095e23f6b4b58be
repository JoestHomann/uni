/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : 2D Detumbling ACS Main Program Body
  ******************************************************************************
  * @details
  *
  * This program implements a basic 2D detumbling attitude control system on an
  * STM32F0 microcontroller, designed for satellite applications. It utilises a
  * gyroscope (FXAS21002) and magnetometer (FXOS8700) to measure the angular
  * rate and magnetic field, calculates the required control torque, and sets
  * PWM outputs for the magnetic actuators.
  *
  * Main functionalities:
  *   - Blue switch start: Waits for user to press and release the blue pushbutton
  *     ("blue switch") before starting the control loop. LED animation
  *     indicates waiting status.
  *   - Sensor initialisation and health check: Verifies sensor connectivity,
  *     signaling errors or success via status LEDs.
  *   - Control loop: Triggered by a timer interrupt at fixed intervals (e.g., 10 Hz).
  *     Each cycle reads sensor data, computes torque, and updates PWM outputs.
  *   - Energy-saving sleep mode: If the angular rate remains below a threshold
  *     for a set period, the MCU enters sleep mode. It wakes up automatically if
  *     the angular rate rises above a defined value.
  *
  * Usage:
  *   1. Power on the system.
  *   2. Press and release the blue button to arm/start the controller.
  *   3. The system will automatically run the detumbling control loop, enter sleep
  *      mode as needed, and wake on new motion.
  *
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include <math.h>  		// e.g. used for fabsf()
//#include <stdint.h>		// e

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
// ============================= USER PDs =====================================
#define SLEEP_THRESHOLD         1.0f	// [°/s] Threshold to enter sleep mode
#define WAKEUP_THRESHOLD        2.0f	// [°/s] Threshold to exit sleep mode
#define IDLE_CYCLES			    50		// [-] at 10 Hz control cycle: 5 sec
#define PWM_NEUTRAL             50		// [%] Neutral brightness (50 %)
#define PWM_SLEEP               1		// [%] Sleep brightness   (1 %)
#define PWM_MAX					100		// [%] Maximum brightness (100 %)
#define	PWM_MIN					0		// [%] Minimum brightness (0 %)

// Edit these values for easy control

// ============================================================================
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim14;

/* USER CODE BEGIN PV */

volatile 	uint8_t 	do_control = 0;		// Timer interrupt flag for control cycle
static 		uint8_t 	isSleeping = 0;		// Sleep flag
static 		uint16_t 	quietCounter = 0;	// If value reaches IDLE_CYCLES value enter sleep mode

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM14_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

// Check function prototypes
uint8_t check_fxas21002(void);		// If check (un-)successful, return true (false)
uint8_t check_fxos8700(void);		// If check (un-)successful, return true (false)


// Initialisation
void init_fxas21002(void);		// Initialisation of control registers of the gyroscope (FXAS21002C)
void init_fxos8700(void);		// Initialisation of control registers of the magnetometer (FXOS8700CQ)

// Read sensor functions
void read_gyro(float* gyro_z);		// Outputs Z-axis sensor values of 3-axis digital angular rate gyroscope (FXAS21002C)
void read_magnetometer(int16_t* mag_x, int16_t* mag_z);		// Outputs X- and Z-axis sensor values of magnetometer (FXOS8700CQ)

// Calculation function
void compute_torque(float gyro_z, int16_t mag_x, int16_t mag_z, uint8_t* pwm_x, uint8_t* pwm_y);	// Computes PWM-value ("torque of magnetorquer") from sensor values

// Sleep function
void handle_sleep_logic(float gyro_z);		// Implements sleep logic with IDLE_CYCLES, SLEEP_THRESHOLD and WAKEUP_THRESHOLD

// PWM function
void set_pwm(uint8_t pwm_x, uint8_t pwm_y);		// Modulates brightness of green LED (pwm_x) and blue LED (pwm_y) with given value (0-100%)

// Other functions
void blink_sos_pwm(TIM_HandleTypeDef* htim, uint32_t channel);		// Modulates brightness of given LED with "S-O-S"

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern TIM_HandleTypeDef htim14;
extern TIM_HandleTypeDef htim3;
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM3_Init();
  MX_TIM14_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */

  // Start PWM on green and blue LED
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);



  if (check_fxas21002())
  {
    blink_sos_pwm(&htim3, TIM_CHANNEL_3); // Check successful
  }
  else
  {
    blink_sos_pwm(&htim3, TIM_CHANNEL_4); // Check failed
  }

  HAL_Delay(1000);  // Pause to make checks visually distinguishable

  if (check_fxos8700())
  {
    blink_sos_pwm(&htim3, TIM_CHANNEL_3); // Check successful
  }
  else
  {
    blink_sos_pwm(&htim3, TIM_CHANNEL_4); // Check failed
  }

  HAL_Delay(1000);  // Pause to make checks visually distinguishable

  // Sensor initialisations
  init_fxas21002();		// Initialisation of the gyroscope
  init_fxos8700();		// Initialisation of the magnetometer


  // Blue Switch

  // 1. Warte auf Drücken (LOW)
  while (HAL_GPIO_ReadPin(blue_switch_GPIO_Port, blue_switch_Pin) == GPIO_PIN_RESET) {
      // Animation: LED oszilliert, solange nicht gedrückt
      static uint8_t val = 0;
      val = (val + 5) % 100;
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, val);
      HAL_Delay(50);
  }
  // Entprellen nach Drücken
  HAL_Delay(50);

  // 2. Warte auf Loslassen (HIGH)
  while (HAL_GPIO_ReadPin(blue_switch_GPIO_Port, blue_switch_Pin) == GPIO_PIN_SET) {
      // Animation: LED blinkt schneller, solange gedrückt
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, PWM_MAX);
      HAL_Delay(50);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, PWM_MIN);
      HAL_Delay(50);
  }
  // Entprellen nach Loslassen
  HAL_Delay(50);

  // Jetzt startet die Regelung
  HAL_TIM_Base_Start_IT(&htim14);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (do_control)
	      {
	          do_control = 0;

	          float gyro_z = 0.0f;
	          int16_t mag_x = 0, mag_z = 0;
	          uint8_t pwm_x = 0, pwm_y = 0;

	          read_gyro(&gyro_z);
	          read_magnetometer(&mag_x, &mag_z);

	          handle_sleep_logic(gyro_z);

	          if (!isSleeping) {
	              compute_torque(gyro_z, mag_x, mag_z, &pwm_x, &pwm_y);
	              set_pwm(pwm_x, pwm_y);
	          } else {
	              set_pwm(PWM_SLEEP, PWM_SLEEP); // Idle/neutral
	          }
	      }
	      HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x00201D2B;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 479;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 100;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 50;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
  htim14.Init.Prescaler = 47999;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim14.Init.Period = 99;
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : blue_switch_Pin */
  GPIO_InitStruct.Pin = blue_switch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(blue_switch_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  	  	  // GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

// Initialisation check functions
void blink_sos_pwm(TIM_HandleTypeDef* htim, uint32_t channel)
{
  for (int i = 0; i < 3; i++) {  // S = ...
    __HAL_TIM_SET_COMPARE(htim, channel, PWM_MAX); // "an"
    HAL_Delay(150);
    __HAL_TIM_SET_COMPARE(htim, channel, PWM_MIN);   // "aus"
    HAL_Delay(150);
  }

  HAL_Delay(300);

  for (int i = 0; i < 3; i++) {  // O = ---
    __HAL_TIM_SET_COMPARE(htim, channel, PWM_MAX);
    HAL_Delay(450);
    __HAL_TIM_SET_COMPARE(htim, channel, PWM_MIN);
    HAL_Delay(150);
  }

  HAL_Delay(300);

  for (int i = 0; i < 3; i++) {  // S = ...
    __HAL_TIM_SET_COMPARE(htim, channel, PWM_MAX);
    HAL_Delay(150);
    __HAL_TIM_SET_COMPARE(htim, channel, PWM_MIN);
    HAL_Delay(150);
  }

  // wieder neutral
  __HAL_TIM_SET_COMPARE(htim, channel, PWM_NEUTRAL); // neutral → "aus"
}


uint8_t check_fxos8700(void)
{
  uint8_t fxos_addr = 0x1F << 1;  // Bit shift verstehen (SA0 =1???)
  uint8_t reg_addr = 0x0D;       // WHO_AM_I Register
  uint8_t id = 0;

  if (HAL_I2C_Mem_Read(&hi2c1, fxos_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, &id, 1, 100) != HAL_OK)
  {
    return 0;  // Lesevorgang fehlgeschlagen
  }

  if (id == 0xC7)
  {
    return 1;  // Sensor korrekt erkannt
  }

  return 0;  // Falscher Wert
}

uint8_t check_fxas21002(void)
{
  uint8_t fxas_addr = 0x21 << 1;           // 7-bit Adresse (0x21) << 1 für HAL
  uint8_t reg_addr = 0x0C;                 // WHO_AM_I Register
  uint8_t id = 0;

  if (HAL_I2C_Mem_Read(&hi2c1, fxas_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, &id, 1, 100) != HAL_OK)
  {
    return 0;  // Lesevorgang fehlgeschlagen
  }

  if (id == 0xD7)
  {
    return 1;  // ID korrekt
  }

  return 0;  // Falsche ID
}


void init_fxas21002(void)
{
    const uint8_t fxas_addr = 0x21 << 1;  // SA0 = HIGH → I2C-Adresse 0x42

    // 1. Standby: DR=011 (100 Hz), ACTIVE=0 ⇒ 0b0001 1000 = 0x18
    uint8_t ctrl_reg1_standby = 0x18;
    HAL_I2C_Mem_Write(&hi2c1, fxas_addr, 0x13, I2C_MEMADD_SIZE_8BIT, &ctrl_reg1_standby, 1, 100);
    HAL_Delay(100); // Anpassen -> Verringern

    // 2. CTRL_REG0 = 0x03 → ±250 dps (FS1 = FS0 = 1)
    uint8_t ctrl_reg0 = 0x03;
    HAL_I2C_Mem_Write(&hi2c1, fxas_addr, 0x0D, I2C_MEMADD_SIZE_8BIT, &ctrl_reg0, 1, 100);
    HAL_Delay(100);

    // 3. CTRL_REG3 = 0x04 → INT_EN_DRDY = 1 (bit 2) aktivieren → ZYXDR wird gesetzt
    uint8_t ctrl_reg3 = 0x04;
    HAL_I2C_Mem_Write(&hi2c1, fxas_addr, 0x15, I2C_MEMADD_SIZE_8BIT, &ctrl_reg3, 1, 100);
    HAL_Delay(100);

    // 4. Aktivieren: gleiche DR-Bits + ACTIVE=1 ⇒ 0b0001 1100 = 0x1C
    uint8_t ctrl_reg1_active = 0x1C;
    HAL_I2C_Mem_Write(&hi2c1, fxas_addr, 0x13, I2C_MEMADD_SIZE_8BIT, &ctrl_reg1_active, 1, 100);
    HAL_Delay(100);
}


void init_fxos8700(void)
{
    uint8_t fxos_addr = 0x1F << 1;

    // 1. Standby setzen (CTRL_REG1 = 0x00)
    uint8_t standby = 0x00;
    HAL_I2C_Mem_Write(&hi2c1, fxos_addr, 0x2A, I2C_MEMADD_SIZE_8BIT, &standby, 1, 100);
    HAL_Delay(100);

    // 2. Magnetometer-Konfiguration: M_CTRL_REG1 = 0x1F
    // HMS = 11 → Hybrid Mode
    // OSR = 111 → Oversampling 8x -> reduce noise
    uint8_t mctrl1 = 0x1F;
    HAL_I2C_Mem_Write(&hi2c1, fxos_addr, 0x5B, I2C_MEMADD_SIZE_8BIT, &mctrl1, 1, 100);
    HAL_Delay(100);

    // 3. M_CTRL_REG2 = 0x20 → hyb_autoinc_mode aktivieren
    uint8_t mctrl2 = 0x20;
    HAL_I2C_Mem_Write(&hi2c1, fxos_addr, 0x5C, I2C_MEMADD_SIZE_8BIT, &mctrl2, 1, 100);
    HAL_Delay(100);

    // 4. XYZ_DATA_CFG = 0x01 → ±4g Range
    uint8_t data_cfg = 0x01;
    HAL_I2C_Mem_Write(&hi2c1, fxos_addr, 0x0E, I2C_MEMADD_SIZE_8BIT, &data_cfg, 1, 100);
    HAL_Delay(100);

    // 5. CTRL_REG1 = 0x0D → DR=001 (200 Hz), LNOISE=1, ACTIVE=1
    uint8_t active = 0x0D;
    HAL_I2C_Mem_Write(&hi2c1, fxos_addr, 0x2A, I2C_MEMADD_SIZE_8BIT, &active, 1, 100);
    HAL_Delay(100);
}


void read_gyro(float* gyro_z) // fxas21002
{	// Vllt Tiefpass einfügen????
    const uint8_t fxas_addr = 0x21 << 1;
    const uint8_t reg_status = 0x00;
    const uint8_t reg_gyro_x_msb = 0x01;

    uint8_t status = 0;
    uint8_t data[6] = {0};  // X_MSB, X_LSB, Y_MSB, Y_LSB, Z_MSB, Z_LSB

    // Statusregister prüfen
    if (HAL_I2C_Mem_Read(&hi2c1, fxas_addr, reg_status, I2C_MEMADD_SIZE_8BIT, &status, 1, 100) != HAL_OK)
    {
        *gyro_z = 0.0f;
        return;
    }

    // Nur wenn neue Daten vorhanden
    if ((status & 0x08) == 0)  // prüft ZYXDR // vorher: if ((status & 0x01) == 0) if ((status & 0x01) == 0) // prüft XDR
    {
        *gyro_z = 0.0f;
        return;
    }

    // Alle 6 Bytes lesen (X, Y, Z)
    if (HAL_I2C_Mem_Read(&hi2c1, fxas_addr, reg_gyro_x_msb, I2C_MEMADD_SIZE_8BIT, data, 6, 100) != HAL_OK)
    {
        *gyro_z = 0.0f;
        return;
    }

    // Z-Daten extrahieren (Byte 4 und 5)
    int16_t raw_z = (int16_t)((data[4] << 8) | data[5]);
    *gyro_z = raw_z * 0.0078125f;  // 7.8125 mdps/LSB = 0.0078125 dps/LSB
}


void read_magnetometer(int16_t* mag_x, int16_t* mag_z) // fxos8700
{
    const uint8_t fxos_addr = 0x1F << 1;
    const uint8_t reg_status = 0x00;
    const uint8_t reg_mag_x_msb = 0x33;

    uint8_t status = 0;
    uint8_t data[6] = {0};  // X_MSB, X_LSB, Y_MSB, Y_LSB, Z_MSB, Z_LSB

    // Optional: STATUS-Register abfragen (nicht zwingend nötig bei kontinuierlichem Lesen)
    if (HAL_I2C_Mem_Read(&hi2c1, fxos_addr, reg_status, I2C_MEMADD_SIZE_8BIT, &status, 1, 100) != HAL_OK)
    {
        *mag_x = 0;
        *mag_z = 0;
        return;
    }

    // Bit 3: ZYXDR = 1 → neue XYZ-Daten verfügbar
    if ((status & 0x08) == 0)
    {
        *mag_x = 0;
        *mag_z = 0;
        return;
    }

    // 6 Bytes ab 0x33 (X, Y, Z) lesen
    if (HAL_I2C_Mem_Read(&hi2c1, fxos_addr, reg_mag_x_msb, I2C_MEMADD_SIZE_8BIT, data, 6, 100) != HAL_OK)
    {
        *mag_x = 0;
        *mag_z = 0;
        return;
    }

    // 14-bit linksbündig → rechts shiften um 2 Bits
    *mag_x = (int16_t)((data[0] << 8) | data[1]) >> 2;
    *mag_z = (int16_t)((data[4] << 8) | data[5]) >> 2;
}


void compute_torque(float gyro_z, int16_t mag_x, int16_t mag_z, uint8_t* pwm_x, uint8_t* pwm_y)
{
    // 1) Schwellwert gegen Rauschen
    const float threshold = 1.0f;  // in °/s
    if (fabsf(gyro_z) < threshold) {
        *pwm_x = PWM_NEUTRAL;  // Idle-Level (keine Dämpfung)
        *pwm_y = PWM_NEUTRAL;
        return;
    }

    // 2) Control-Law: m = –K * (ω × B)
    //    Für 2D mit ω = [0,0,ωz], B = [Bx,0,Bz]:
    //    ω×B = [ –ωz·Bz, ωz·Bx, 0 ]
    const float K = 0.04f;  // einstellbarer Verstärkungsfaktor
    float m_x = -K * gyro_z * (float)mag_z;
    float m_y =  K * gyro_z * (float)mag_x;

    // 3) Umrechnung auf PWM-Werte (0-100)
    int p_x = (int)(50.0f + m_x * 0.1f);
    int p_y = (int)(50.0f + m_y * 0.7f);

    // clamp
    p_x = p_x<0 ? 0 : (p_x>100 ? 100 : p_x);
    p_y = p_y<0 ? 0 : (p_y>100 ? 100 : p_y);

    *pwm_x = (uint8_t)p_x;
    *pwm_y = (uint8_t)p_y;
}


void set_pwm(uint8_t pwm_x, uint8_t pwm_y)
{
    // PWM setzen auf PC9 (X)
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm_x);

    // PWM setzen auf PC8 (Y)
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_y);
}


void handle_sleep_logic(float gyro_z)
{
    if (!isSleeping) {
        if (fabsf(gyro_z) < SLEEP_THRESHOLD) {
            quietCounter++;
            if (quietCounter >= IDLE_CYCLES) { // 5 s bei 10 Hz
                isSleeping = 1;
            }
        } else {
            quietCounter = 0;
        }
    } else {
        if (fabsf(gyro_z) > WAKEUP_THRESHOLD) {
            isSleeping = 0;
            quietCounter = 0;
        }
    }
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if (htim->Instance == TIM14)
        do_control = 1;
}



/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
